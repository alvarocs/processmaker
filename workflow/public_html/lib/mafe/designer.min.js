var PMDesigner = {};


PMDesigner.remoteUrl = "";
PMDesigner.moddle = new BpmnModdle();
PMDesigner.bpmnFactory = new BpmnFactory(PMDesigner.moddle);
PMDesigner.keyCodeF5 = 116;
/**
 * function to get the enviroment variables (WORKSPACE, LANG, SKIN)
 */
enviromentVariables = function (variable) {
    if (window.parent) {
        var url1 = window.parent.location.pathname;
        var variables = url1.split('/');
        var WORKSPACE = variables[1];
        WORKSPACE = WORKSPACE.substring(3);
        var LANG = variables[2];
        var SKIN = variables[3];

        if (variable == 'WORKSPACE') {
            return WORKSPACE;
        } else if (variable == 'LANG') {
            return LANG;
        } else if (variable == 'SKIN') {
            return SKIN;
        } else {
            return null;
        }
    }
}

var LANG = (typeof SYS_LANG !== "undefined") ? SYS_LANG : enviromentVariables('LANG');
var WORKSPACE = (typeof SYS_SYS !== "undefined") ? SYS_SYS : enviromentVariables('WORKSPACE');
var SKIN = (typeof SYS_SKIN !== "undefined") ? SYS_SKIN : enviromentVariables('SKIN');

var DEFAULT_WINDOW_WIDTH = 943;
var DEFAULT_WINDOW_HEIGHT = 520;
var ENABLED_FEATURES = [];

if (LANG != 'en') {
    if (typeof __TRANSLATIONMAFE != "undefined" && typeof __TRANSLATIONMAFE[LANG] != 'undefined') {
        PMUI.loadLanguage(__TRANSLATIONMAFE.en, 'en');
        PMUI.loadLanguage(__TRANSLATIONMAFE[LANG], LANG);

        PMUI.setDefaultLanguage('en');
        PMUI.setCurrentLanguage(LANG);
    }
}

PMDesigner.resizeFrame = function () {
    if (parent.document.documentElement === document.documentElement) {
        jQuery(".content").css("height", parseInt(jQuery(window).height()));
    } else {
        jQuery(".content").css("height", document.body.clientHeight);

    }
};


var resizingFrame = PMDesigner.resizeFrame;

PMDesigner.applyCanvasOptions = function () {
    list = new PMUI.control.DropDownListControl({
        options: [],
        style: {
            cssClasses: [
                "mafe-dropdown-zoom"
            ]
        },
        width: 150,
        onChange: function (newValue, previous) {
            var canvas = PMDesigner.project.diagrams.find('id', newValue);
            PMUI.getActiveCanvas().getHTML().style.display = 'none';
            PMUI.setActiveCanvas(canvas);
            canvas.getHTML().style.display = 'inline';
        }
    });
    //enable to support multidiagram
    //jQuery(jQuery(".navBar li")[6]).append(list.getHTML());
    list.defineEvents();
    PMDesigner.canvasList = list;
};

//Zoom
PMDesigner.ApplyOptionsZoom = function () {
    list = new PMUI.control.DropDownListControl({
    id:'_idListZoom',
        options: [
            {
                label: "50%",
                value: 1
            },
            {
                label: "75%",
                value: 2
            },
            {
                label: "100%",
                value: 3,
                selected: true
            },
            {
                label: "125%",
                value: 4
            },
            {
                label: "150%",
                value: 5
            }
        ],
        style: {
            cssClasses: [
                "mafe-dropdown-zoom"
            ]
        },
        onChange: function (newValue, previous) {
            var i;
            newValue = parseInt(newValue, 10);
            PMUI.getActiveCanvas().applyZoom(newValue);
        }
    });

    //jQuery(jQuery(".navBar li")[4]).append(list.getHTML());
    jQuery(jQuery(".mafe-zoom-options")).append(list.getHTML());

    list.defineEvents();
};
/**
 * hides all requiered TinyControls
 */
PMDesigner.hideAllTinyEditorControls = function () {
    var control,
        i,
        max,
        j,
        mapMax,
        editor,
        controlMap = [
            'tinyeditor_fontselect',
            'tinyeditor_fontsizeselect',
            'tinyeditor_bullist',
            'tinyeditor_numlist',
            'tinyeditor_forecolor',
            'tinyeditor_backcolor'
        ];
    for (i = 0, max = tinymce.editors.length; i < max; i += 1) {
        editor = tinymce.editors[i];
        jQuery.each(editor.controlManager.controls, function (index, val) {
            if (val && jQuery.isFunction(val.hideMenu)){
                val.hideMenu();
            }
        });
    }

};


jQuery(document).ready(function ($) {

    /***************************************************
     * Defines the Process
     ***************************************************/
    if (typeof prj_uid === "undefined") {
        prj_uid = '';
    }
    if (typeof prj_readonly === "undefined") {
        prj_readonly = '';
    }
    if (typeof credentials === "undefined") {
        credentials = '';
    } else {
        credentials = RCBase64.decode(credentials);
        credentials = (credentials == '') ? "" : JSON.parse(credentials);
    }

    if (prj_readonly !== 'true') {
        $("#idContent").find(".content_controls").show();
        $(".bpmn_shapes").show();
        $('.bpmn_shapes_legend').hide();
        $("#idNavBar").show().css('height','33px');
    }

    PMDesigner.createHTML();


    var setSaveButtonDisabled = function (that) {
        if (that.isDirty()) {
             if (document.getElementsByClassName("mafe-save-process").length > 0) {
                    document.getElementsByClassName("mafe-save-process")[0].removeAttribute("style");
                    document.getElementsByClassName("mafe-save-process")[0].childNodes[0].style.color = "#FFF";

                var mafebuttonMenu = document.getElementsByClassName("mafe-button-menu")[0];
                mafebuttonMenu.style.backgroundColor = "#0C9778";
                mafebuttonMenu.firstChild.src = "/lib/img/caret-down-w.png";
            }
        } else {
            if (document.getElementsByClassName("mafe-save-process").length > 0) {
                document.getElementsByClassName("mafe-save-process")[0].style.backgroundColor = "#e8e8e8";
                document.getElementsByClassName("mafe-save-process")[0].style.color = "#000";
                document.getElementsByClassName("mafe-save-process")[0].childNodes[0].style.color = "#000";
                document.getElementsByClassName("mafe-save-process")[0].childNodes[0].text = "Save".translate();

                var mafebuttonMenu = document.getElementsByClassName("mafe-button-menu")[0];
                mafebuttonMenu.style.backgroundColor = "#e8e8e8";
                mafebuttonMenu.firstChild.src = "/lib/img/caret-down.png";
            }
        }
    };
    var s;
    var sidebarCanvas = [];
    for (s = 0; s < PMDesigner.sidebar.length; s += 1) {
        sidebarCanvas = sidebarCanvas.concat(PMDesigner.sidebar[s].getSelectors());
        jQuery(".bpmn_shapes").append(PMDesigner.sidebar[s].getHTML());
    }
    //sidebarCanvas.splice(15, 1);  //to remove lane selector
    //// sidebarCanvas = sidebarCanvas + ',.mafe-event-start';
    //sidebarCanvas = sidebarCanvas.concat('.mafe-event-start');
    //sidebarCanvas = sidebarCanvas.concat('.pmui-pmactivity');
    //sidebarCanvas = sidebarCanvas.concat('.mafe-event-end');

    //Adding Sidebar to DOM
    firstAbsuluteX = jQuery("#div-layout-canvas").offset().left;


    //PMDesigner.canvas = new PMCanvas({
    //    id: PMUI.generateUniqueId(),
    //    process: PMDesigner.process,
    //    absoluteX: jQuery("#div-layout-canvas").offset().left,
    //    absoluteY: jQuery("#div-layout-canvas").offset().top,
    //    //left: jQuery("#div-layout-canvas").offset().left,
    //    //top: jQuery("#div-layout-canvas").offset().top,
    //    //left:jQuery("#pm_designer").offset().left,
    //    //top:jQuery("#pm_designer").offset().top,
    //    width: 4000,
    //    height: 4000,
    //    style: {
    //        cssProperties: {
    //            overflow: "hidden"
    //        }
    //    },
    //    drop: {
    //        type: 'container',
    //        selectors: sidebarCanvas
    //    },
    //    //container: "regularcontainer",
    //    container: "pmcanvas",
    //    //readOnly:  true,
    //    readOnly: prj_readonly === 'true' ? true : false,
    //    hasClickEvent : true,
    //    copyAndPasteReferences: {
    //        PMEvent: PMEvent,
    //        PMGateway: PMGateway,
    //        PMActivity: PMActivity,
    //        PMArtifact: PMArtifact,
    //        PMFlow: PMFlow
    //    }
    //});

    var project = new PMProject({
        id: prj_uid,
        name: 'Untitled Process',
        keys: {
            access_token: credentials.access_token,
            expires_in: credentials.expires_in,
            token_type: credentials.token_type,
            scope: credentials.scope,
            refresh_token: credentials.refresh_token,
            client_id: credentials.client_id,
            client_secret: credentials.client_secret
        },
        listeners: {
            create: function (self, element) {
                var sh, i,
                        contDivergent = 0,
                        contConvergent = 0;
                //Updating the background color for connections
                jQuery(".pmui-intersection > div > div").css("background-color", "black");

                if (element.type == "Connection") {
                    ///////////****************Changing the gatDirection*******************//////////////////
                    if (element.relatedObject.srcPort.parent.gat_type === "PARALLEL" ||
                            element.relatedObject.srcPort.parent.gat_type === "INCLUSIVE" ||
                            element.relatedObject.destPort.parent.gat_type === "PARALLEL" ||
                            element.relatedObject.destPort.parent.gat_type === "INCLUSIVE") {
                        if (element.relatedObject.srcPort.parent.gat_type !== undefined) {
                            sh = element.relatedObject.srcPort.parent;
                        } else {
                            sh = element.relatedObject.destPort.parent;
                        }

                        if (sh.gat_direction === "DIVERGING") {
                            for (i = 0; i < sh.ports.asArray().length; i += 1) {
                                if (sh.ports.asArray()[i].connection.flo_element_origin_type === "bpmnActivity") {
                                    contDivergent++;
                                }
                                if (contDivergent > 1) {
                                    sh.gat_direction = "CONVERGING";
                                    i = sh.ports.asArray().length;
                                }
                            }
                        }
                        if (sh.gat_direction === "CONVERGING") {
                            for (i = 0; i < sh.ports.asArray().length; i += 1) {
                                if (sh.ports.asArray()[i].connection.flo_element_origin_type === "bpmnGateway") {
                                    contConvergent++;
                                }
                                if (contConvergent > 1) {
                                    sh.gat_direction = "DIVERGING";
                                    i = sh.ports.asArray().length;
                                }
                            }
                        }

                    }
                    ///////
                }


                setSaveButtonDisabled(self);
            },
            update: function (self) {
                //Updating the background color for connections
                jQuery(".pmui-intersection > div > div").css("background-color", "black");
                setSaveButtonDisabled(self);
            },
            remove: function (self) {
                setSaveButtonDisabled(self);
            },
            success: function (self, xhr, response) {
                var message;
                self.dirty = false;
                setSaveButtonDisabled(self);
                self.dirtyElements[0] = {
                    laneset: {},
                    lanes: {},
                    activities: {},
                    events: {},
                    gateways: {},
                    flows: {},
                    artifacts: {},
                    lines: {},
                    data: {},
                    participants: {},
                    startMessageEvent: {},
                    startTimerEvent: {}
                };
                self.updateIdentifiers(response);
                PMDesigner.connectValidator.bpmnValidator();
                //if (PMDesigner.currentMsgFlash) {
                PMDesigner.msgFlash('The process was saved successfully.'.translate(), document.body, 'success', 3000, 5);
                PMDesigner.RoutingRuleSetOrder();
                //}

            },
            failure: function (self, xhr, response) {
                var message;
                if (response.error.code === 401) {
                    /*message = new PMUI.ui.FlashMessage({
                     message: "It was not possible to establish a connection with the server".translate(),
                     duration: 5000,
                     appendTo: document.body,
                     severity: 'info'
                     });
                     message.show();*/
                    //self.remoteProxy.setUrl("/"+WORKSPACE+"/oauth2/token");
                    //self.setRefreshToken();
                    //self.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
                    //self.save();
                } else {
                    PMDesigner.msgFlash('Error saving the process.'.translate(), document.body, 'error', 3000, 5);
                    self.updateIdentifiers(response);
                }
            }
        }
    });
    PMDesigner.project = project;
    //create a new restApi
    PMDesigner.restApi = RestApi.createRestApi({
        serverUrl: '/rest/v10',
        keys: PMDesigner.project.keys
    });
    systemRest = new PMRestClient({
        typeRequest: 'post',
        multipart: true,
        data: {
            calls: [{
                    url: 'system/enabled-features',
                    method: 'GET'
                }
            ]
        },
        functionSuccess: function (xhr, response) {
            var result = response.pop();
            ENABLED_FEATURES = result.response;
        },
        functionFailure: function (xhr, response)
        {
            ENABLED_FEATURES = [];
        }
    }).setBaseEndPoint('').executeRestClient();
    //var canvas = project.buildCanvas(sidebarCanvas);
    //PMDesigner.canvas.setPosition(jQuery(".ui-layout-pane-center").offset().left, jQuery(".ui-layout-pane-center").offset().top);
    //jQuery("#div-layout-canvas").append(PMDesigner.canvas.getHTML());
    //jQuery("#p-center-layout").scroll(PMDesigner.canvas.onScroll(PMDesigner.canvas, jQuery("#p-center-layout")));


    //PMDesigner.canvas.setShapeFactory(PMDesigner.shapeFactory);
    //PMDesigner.canvas.attachListeners();
    //PMDesigner.canvas.createConnectHandlers('','');
    //PMUI.setActiveCanvas(canvas);
    //create connect validator
    PMDesigner.connectValidator = new ConnectValidator();
    var d;
    for (d = 0; d < PMDesigner.sidebar.length; d += 1) {
        PMDesigner.sidebar[d].activate();
    }

    /**
     * ContextMenu added to HTMLElement
     **/

    //if (!PMDesigner.canvas.readOnly) {
    //    menuCanvas = PMDesigner.getMenuFactory("CANVAS");
    //    PMDesigner.canvas.setContextMenu(menuCanvas);
    $('.bpmn_shapes_legend').hide();
    //} else {
    //    $('.bpmn_shapes').hide();
    //    $('.content_controls').hide();
    //    $('.navBar').hide();
    //    //update bpmn_shapes_legend
    //    var i;
    //    var dt = [
    //        ['red', 'Task in Progress'],
    //        ['green', 'Completed Task'],
    //        ['silver', 'Pending Task / Not Executed'],
    //        ['orange', 'Parallel Task']
    //    ];
    //    for (i = 0; i < dt.length; i++) {
    //        var legend = $("<div></div>");
    //        var legendIcon = $("<div></div>").addClass("mafe-activity-task-" + dt[i][0]).addClass("icon-legend");
    //        var legendText = $("<div>" + dt[i][1] + "</div>").addClass("text-legend");
    //        legend.append(legendIcon).append(legendText);
    //        jQuery(".bpmn_shapes_legend").append(legend);
    //    }
    //}


    //PMDesigner.process.setCanvas(PMDesigner.canvas);

    //
    //var xml2;
    //var moddle = new BpmnModdle();
    //PMDesigner.bpmnFactory =  new BpmnFactory(moddle);
    //PMDesigner.moddle = moddle;
    //var action = 'import';
    //
    //if (action === 'import') {
    //    jQuery.get('/resources/miwg-test-suite/A.2.0.bpmn', function(data) {
    //        //alert(data);
    //        ////process text file line by line
    //        //$('#div').html(data.replace('n','<br />'));
    //        moddle.fromXML(data, function(err, definitions) {
    //            var imp = new importBpmnDiagram(definitions);
    //
    //            console.log('import');
    //
    //            console.log(definitions);
    //
    //            moddle.toXML(definitions, function(err, xmlStrUpdated) {
    //
    //                //console.log(xmlStrUpdated);
    //                xml2 = xmlStrUpdated;
    //                // xmlStrUpdated contains new id and the added process
    //            });
    //        });
    //    });
    //} else {
    //    var xmlStr =
    //        '<?xml version="1.0" encoding="UTF-8"?>' +
    //        '<bpmn2:definitions xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" id="empty-definitions" targetNamespace="http://bpmn.io/schema/bpmn">' +
    //        '</bpmn2:definitions>';
    //
    //    moddle.fromXML(xmlStr, function(err, definitions) {
    //        //    var imp = new importBpmnDiagram(definitions);
    //        //
    //        //    console.log('export');
    //        //
    //        //console.log(definitions);
    //        PMDesigner.businessObject = definitions;
    //        PMDesigner.canvas.setBussinesObject();
    //        //    moddle.toXML(definitions, function(err, xmlStrUpdated) {
    //        ////        //console.log(xmlStrUpdated);
    //        //        xml2 = xmlStrUpdated;
    //        ////        // xmlStrUpdated contains new id and the added process
    //        //    });
    //        PMDesigner.process.remoteProxy.setUrl("/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
    //        PMDesigner.process.load();
    //
    //    });
    //}
    project.remoteProxy.setUrl(HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + prj_uid);
    project.load();

    var downloadLink = $('.mafe-button-export-bpmn-process');
    downloadLink.click(function (e) {
        PMDesigner.moddle.toXML(PMDesigner.businessObject, function (err, xmlStrUpdated) {

            setEncoded(downloadLink, PMDesigner.project.projectName + '.bpmn', xmlStrUpdated);
            // xmlStrUpdated contains new id and the added process
        });

    });

    //Code export - export granular (handler)
    var handlerExportNormal = function () {
        var ws = enviromentVariables('WORKSPACE');
        if (!HTTP_SERVER_HOSTNAME) {
            HTTP_SERVER_HOSTNAME = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
        }
        location.href = HTTP_SERVER_HOSTNAME + "/api/1.0/" + ws + "/project/" + PMDesigner.project.id + "/export?access_token=" + PMDesigner.project.keys.access_token;
    };
    
    var handlerExportGranular = function () {
        var optionExportNormal = $("<div class='mafe-button-submenu-option normalExport'>" + "Normal".translate() + "</div>"),
            optionExportGranular = $("<div class='mafe-button-submenu-option granularExport'>" + "Custom".translate() + "</div>"),
            menuExport = $("<div class='mafe-button-menu-container sub-nav'></div>").hide(),
            $item = $("#idNavBar").find(".mafe-button-export-process").closest("li");

        menuExport.append(optionExportNormal).append(optionExportGranular);
        if (!$item.find(".mafe-button-menu-container").length) {
            $item.append(menuExport);
        }
        $(".ui-tooltip").hide();
        $(menuExport).slideToggle("slow");
        $item.on("mouseleave", function (e) {
            if ($(this).find(".mafe-button-menu-container").eq(0).is(":visible")) {
                var that = this;
                $(that).find(".mafe-button-menu-container").remove();
            }
        });

        $(".sub-nav").on("click", ".normalExport", function (event) {
            var ws = enviromentVariables('WORKSPACE'),
                locationOrigin;
            if (!window.location.origin) {
                locationOrigin = window.location.protocol + "//" + window.location.hostname +
                    (window.location.port ? ':' + window.location.port : '');
            } else if (typeof HTTP_SERVER_HOSTNAME !== 'undefined') {
                locationOrigin = HTTP_SERVER_HOSTNAME;
            } else {
                locationOrigin = window.location.origin;
            }
            location.href = locationOrigin + "/api/1.0/" + ws + "/project/" + PMDesigner.project.id + "/export?access_token=" + PMDesigner.project.keys.access_token;
        });

        $(".sub-nav").on("click", ".granularExport", function (event) {
            PMDesigner.granularProcessExport();
        });
    };
    
    var handler;
    if (inArray("jXsSi94bkRUcVZyRStNVExlTXhEclVadGRRcG9xbjNvTWVFQUF3cklKQVBiVT0=", ENABLED_FEATURES)) {
        handler = handlerExportGranular;
    } else {
        handler = handlerExportNormal;
    }

    /*===========================================
     =            ProcessMaker module            =
     ===========================================*/
    new PMAction({
        selector: ".mafe-menu-variable",
        label: {
            text: "Variables".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.variables();
        }
    });
    new PMAction({
        selector: ".mafe-menu-eventmessages",
        label: {
            text: "Event messages".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.eventMessages();
        }
    });
    new PMAction({
        selector: ".mafe-menu-messagetype",
        label: {
            text: "Message Types".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.messageType();
        }
    });
    new PMAction({
        selector: ".mafe-menu-dynaform",
        label: {
            text: "Dynaforms".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.dynaform();
        }
    });
    new PMAction({
        selector: ".mafe-menu-inputdocuments",
        label: {
            text: "Input Documents".translate()
        },
        execute: true,
        handler: function () {
            var inputDocument = new InputDocument();
            inputDocument.build();
        }
    });
    new PMAction({
        selector: ".mafe-menu-outputdocuments",
        label: {
            text: "Output Documents".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.output();
        }
    });
    new PMAction({
        selector: ".mafe-menu-triggers",
        label: {
            text: "Triggers".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.trigger();
        }
    });
    new PMAction({
        selector: ".mafe-menu-reporttables",
        label: {
            text: "Report Tables".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.reporttable();
        }
    });
    new PMAction({
        selector: ".mafe-menu-databaseconnections",
        label: {
            text: "Database Connections".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.database();
        }
    });
    new PMAction({
        selector: ".mafe-menu-templates",
        label: {
            text: "Templates".translate()
        },
        execute: true,
        handler: function()
        {
            PMDesigner.ProcessFilesManager("templates", "CREATION_NORMAL");
        }
    });
    new PMAction({
        selector: ".mafe-menu-public",
        label: {
            text: "Public Files".translate()
        },
        execute: true,
        handler: function()
        {
            PMDesigner.ProcessFilesManager("public", "CREATION_NORMAL");
        }
    });
    new PMAction({
        selector: ".mafe-menu-permissions",
        label: {
            text: "Permissions".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.processPermissions();
        }
    });
    new PMAction({
        selector: ".mafe-menu-supervisors",
        label: {
            text: "Supervisors".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.assigmentSupervisors();
        }
    });
    new PMAction({  
        selector: ".mafe-menu-casetracker",
        label: {
            text: "Case Tracker".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.caseTracker();showObjects();
        }
    });

    /*-----  End of ProcessMaker module  ------*/

    /*==========================================================
     =            Processmake module - create action            =
     ==========================================================*/
    new PMAction({
        selector: ".mafe-menu-variable-create",
        label: {
            selector: ".mafe-menu-variable-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.variables.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-eventmessages-create",
        label: {
            selector: ".mafe-menu-eventmessages-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.eventMessages.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-messagetype-create",
        label: {
            selector: ".mafe-menu-messagetype-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.messageType.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-dynaform-create",
        label: {
            selector: ".mafe-menu-dynaform-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.dynaform.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-inputdocuments-create",
        label: {
            selector: ".mafe-menu-inputdocuments-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            var inputDocument = new InputDocument();
            inputDocument.build();
            inputDocument.openFormInMainWindow();
            inputDocument.method = "POST";
        }
    });
    new PMAction({
        selector: ".mafe-menu-outputdocuments-create",
        label: {
            selector: ".mafe-menu-outputdocuments-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.output();
            PMDesigner.output.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-triggers-create",
        label: {
            selector: ".mafe-menu-triggers-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.trigger();
            PMDesigner.trigger.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-reporttables-create",
        label: {
            selector: ".mafe-menu-reporttables-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.reporttable();
            PMDesigner.reporttable.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-databaseconnections-create",
        label: {
            selector: ".mafe-menu-databaseconnections-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.database.create();
        }
    });
    new PMAction({
        selector: ".mafe-menu-templates-create",
        label: {
            selector: ".mafe-menu-templates-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function()
        {
            PMDesigner.ProcessFilesManager.createFirst("templates", "CREATION_MORE");
        }
    });
    new PMAction({
        selector: ".mafe-menu-public-create",
        label: {
            selector: ".mafe-menu-public-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function()
        {
            PMDesigner.ProcessFilesManager.createFirst("public", "CREATION_MORE");
        }
    });
    new PMAction({
        selector: ".mafe-menu-permissions-create",
        label: {
            selector: ".mafe-menu-permissions-create span",
            text: "Create".translate()
        },
        execute: true,
        handler: function () {
            PMDesigner.processPermissions.create();
        }
    });

    /*-----  End of Processmake module - create action  ------*/



    /*========================================
     =            Designer buttons            =
     ========================================*/
    new PMAction({
        selector: ".mafe-button-save",
        tooltip: "Save process".translate(),
        label: {
            text: "Save".translate()
        },
        execute: true,
        handler: function(){
            if(PMDesigner.project.isDirty() && PMDesigner.project.isSave === false){
                PMDesigner.project.isSave = true;
                document.getElementsByClassName("mafe-save-process")[0].childNodes[0].text = "Saving";
                PMDesigner.project.save(true);
            }
        }
    });
    new PMAction({
        selector: ".mafe-button-export-process",
        tooltip: "Export process".translate(),
        label: {
            text: "Export Process".translate()
        },
        execute: true,
        handler: function () {
            handler();
        }
    });
    new PMAction({
        selector: ".mafe-button-export-bpmn-process",
        tooltip: "Export Diagram ".translate(),
        label: {
            text: "Export Diagram".translate()
        },
        execute: false,
        handler: function () {
            //var ws = enviromentVariables('WORKSPACE');
            //location.href = window.parent.location.origin+"/api/1.0/"+ws+"/project/"+PMDesigner.process.id+"/export?access_token="+PMDesigner.process.tokens.access_token;

            //var downloadLink = $('.mafe-button-export-bpmn-process');
            ////downloadLink.click(function (e) {
            //    PMDesigner.moddle.toXML(PMDesigner.businessObject, function(err, xmlStrUpdated) {
            //
            //        //console.log(xmlStrUpdated);
            //        //xml2 = xmlStrUpdated;
            //        setEncoded(downloadLink,PMDesigner.process.projectName + '.bpmn' , xmlStrUpdated);
            //        // xmlStrUpdated contains new id and the added process
            //    });

            //});
        }
    });
    new PMAction({
        selector: ".mafe-button-undo",
        tooltip:"Undo Action".translate(),
        label: {
            text: "".translate()
        },
        execute: true,
        handler: function () {
            PMUI.getActiveCanvas().hideDragConnectHandlers();
            //PMDesigner.canvas.commandStack.undo();
            PMUI.getActiveCanvas().commandStack.undo();
        }
    });
    new PMAction({
        selector: ".mafe-button-redo",
        tooltip: "Redo Action".translate(),
        label: {
            text: "".translate()
        },
        execute: true,
        handler: function () {
            PMUI.getActiveCanvas().hideDragConnectHandlers();
            //PMDesigner.canvas.commandStack.redo();
            PMUI.getActiveCanvas().commandStack.redo();
        }
    });
    PMDesigner.ApplyOptionsZoom();
    var fullscreamaction = new PMAction({
        selector: ".mafe-button-fullscreen",
        tooltip: "Full Screen".translate(),
        execute: true,
        handler: function () {
            PMDesigner.fullScreen.toggle(this);
        }
    });
    var validatosr = new PMAction({
        selector: ".mafe-toolbar-validation",
        tooltip: "Validator".translate(),
        execute: true,
        handler: function () {
            PMDesigner.reloadDataTable();
        }
    });
    var help = new PMAction({
        selector: ".mafe-toolbar-help",
        tooltip: "Help".translate(),
        execute: true,
        handler: function () {
          PMDesigner.helper.startIntro();
        }
    });
    new PMAction({
        selector: ".mafe-button-close",
        tooltip: "Close".translate(),
        execute: true,
        handler: function () {
            var message_window,
                browser = PMDesigner.getBrowser(),
                url = parent.location.href;

            if (PMDesigner.project.isDirty() && !PMDesigner.project.isSave) {
                var message_window = new PMUI.ui.MessageWindow({
                    windowMessageType: 'warning',
                    width: 490,
                    bodyHeight: 'auto',
                    id: "cancelSaveSubprocPropertiesWin",
                    title: PMDesigner.project.projectName,
                    message: 'Save your changes and exit ?'.translate(),
                    footerItems: [
                        {
                            pmType: 'label',
                            text: " ".translate()
                        },{
                            text: "No".translate(),
                            handler: function () {
                                PMDesigner.project.isClose = true;
                                if((navigator.userAgent.indexOf("MSIE")!=-1) || (navigator.userAgent.indexOf("Trident")!=-1)) {
                                    window.close();
                                } else {
                                    parent.location.href = url;
                                }
                            },
                            buttonType : "error"
                        },

                        {
                            text: "Yes".translate(),
                            handler: function () {
                                PMDesigner.project.saveClose(true);
                            },
                            buttonType : "success"
                        },

                    ]
                });
                message_window.open();
                message_window.showFooter();
            } else {
                if ((navigator.userAgent.indexOf("MSIE") != -1) || (navigator.userAgent.indexOf("Trident") != -1)) {
                    window.close();
                } else {
                    parent.location.href = url;
                }
            }
        }
    });


    var option = $("<div class='mafe-button-menu-option'>" + "Save as".translate() + "</div>");

    /**
     * Add data tables
     */
    $('body').append('<div class="bpmn_validator"><div class="validator_header"></div><div class="validator_body"></div></div>')
    $('.validator_header').append( '<h2> Validator</h2>');
    $('.validator_header').append( '<a class="validator-close" href="#"><span class="mafe-validator-close" title=""></span></a>');
    $('.validator_body').html( '<table cellpadding="0" cellspacing="0" border="0" class="display" id="validator-table" width="100%"></table>' );
    PMDesigner.validTable = $('#validator-table').DataTable({
        paging: false,
        scrollY: 100,
        searching: false,
        //scrollCollapse: true,
        "info": false,
        scrollCollapse: true,
        //"autoWidth": false,
        //"left":true,
        //"data": errorList.asArray(),
        "columns": [
            {
                name: 'id',
                //data: 'id',
                //visible: false,
                className: 'never'
            },
            {
                "title": "Type".translate(),
                width: '10%',
                //data: 'category',
                name: 'category',
                render: function ( data, type, row ) {
                    var clasMap = {
                        Error: 'mafe-icon-error',
                        Warning: 'mafe-icon-warning'
                    };
                    if ( type === 'display' ) {
                        return ' <i class="' + clasMap[data] + '"></i> ' + data;
                    }
                    return data;
                }
            },
            {name: 'code', "title": "Code".translate(), width: '10%'},
            {name: 'element', "title": "Element".translate(), width: '20%'},
            {name: 'element-type', "title": "Element Type".translate(), width: '20%'},
            {name: 'description', "title": "Description".translate(), width: '40%'}
        ]
    });
    jQuery('#validator-table tbody').on( 'click', 'tr', function () {
        var id = PMDesigner.validTable.row( this ).data()[0];
        var shape;
        if ( $(this).hasClass('selected') ) {
            $(this).removeClass('selected');
            PMUI.getActiveCanvas().emptyCurrentSelection();
        }
        else {
            PMDesigner.validTable.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');
            PMUI.getActiveCanvas().emptyCurrentSelection();
            shape = PMUI.getActiveCanvas().items.find('id', id);
            PMUI.getActiveCanvas().addToSelection( shape.relatedObject);
        }
    });
    PMDesigner.validTable.columns([0]).visible(false);
    /********finish datatables********/
    new PMAction({
        selector: ".mafe-validator-close",
        tooltip: "Close Validator".translate(),
        execute: true,
        handler: function () {
            $('.bpmn_validator').css('visibility', 'hidden');
            $('.mafe-toolbar-validation').css('background-color', 'rgb(233, 233, 233)');
            PMDesigner.validator = false;
        }
    });

    var menu = $("<div class='mafe-button-menu-container'></div>");
    menu.append(option);
    option.on("mouseout", function (e) {
        menu.hide();
    });
    option.on("click", function (e) {
        menu.hide();
        PMDesigner.project.remoteProxy.setUrl(HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id);
        PMDesigner.project.isSave = true;
        PMDesigner.project.save(true);
        var saveas = new SaveAs();
        saveas.open();
    });
    $(".mafe-button-menu").on("click", function (e) {
        e.stopPropagation();
        $(".mafe-save-process").append(menu);
        menu.show();
    });

    /*-----  End of Designer buttons  ------*/
    /*=================================================
     =            Full screen functionality            =
     =================================================*/
    var elem;
    if (parent.document.documentElement === document.documentElement) {
        elem = document.documentElement;
    } else {
        elem = parent.document.getElementById("frameMain");
    }
    PMDesigner.fullScreen = new FullScreen({
        element: elem,
        action: fullscreamaction,
        onReadyScreen: function () {
            setTimeout(function () {
                PMDesigner.resizeFrame();
            }, 500);
        },
        onCancelScreen: function () {
            setTimeout(function () {
                PMDesigner.resizeFrame();
            }, 500);
        }
    });
    /*-----  End of Full screen functionality  ------*/

    /*=============================================
     =            Shapes and Controls Box            =
     =============================================*/
    PMDesigner.cookie = {
        name: "PMDesigner",
        object: {},
        get: function (cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i].trim();
                if (c.indexOf(name) == 0)
                    return c.substring(name.length, c.length);
            }
            return "";
        },
        remove: function (cname) {
            jQuery.each(PMDesigner.cookie.object, function (index, val) {
                if (index === cname) {
                    delete PMDesigner.cookie.object[cname];
                    PMDesigner.cookie.refresh();
                }
            });
        },
        refresh: function () {
            document.cookie = PMDesigner.cookie.name + "=" + JSON.stringify(PMDesigner.cookie.object);
        }
    };
    PMDesigner.localStorage = {
        prefix: "PM_" + WORKSPACE + "_" + prj_uid,
        object: {},
        remove: function (cname) {
            var obj;
            obj = localStorage.getItem(PMDesigner.localStorage.prefix);
            obj = (obj === null) ? {} : JSON.parse(obj);
            if (obj[cname]) {
                delete obj[cname];
                localStorage.setItem(PMDesigner.localStorage.prefix, JSON.stringify(obj));
            }
        }
    };
    if (Modernizr.localstorage) {
        var localDesigner = localStorage.getItem(PMDesigner.localStorage.prefix);
        localDesigner = (localDesigner === null) ? {} : JSON.parse(localDesigner);
        PMDesigner.panelsPosition = localDesigner;
    } else {
        if (PMDesigner.cookie.get(PMDesigner.cookie.name) !== "") {
            var positions, pLeft, pTop, html;
            positions = JSON.parse(PMDesigner.cookie.get(PMDesigner.cookie.name));
            PMDesigner.cookie.object = positions;
            PMDesigner.panelsPosition = positions;
        }
    }
    if (typeof PMDesigner.panelsPosition === "object") {
        var pst = PMDesigner.panelsPosition;
        if (pst.navbar) {
            pLeft = pst.navbar.x;
            pTop = pst.navbar.y;
            html = document.getElementsByClassName("navBar")[0];
            //html.style.left = pLeft+"px";
            //html.style.top = pTop+"px";
            //html.style.left = '0px';
            //html.style.left = '0px';
        }
        if (pst.bpmn) {
            //pLeft = pst.bpmn.x;
            //pTop = pst.bpmn.y;
            pLeft = 0;
            pTop = 0;
            html = document.getElementsByClassName("bpmn_shapes")[0];
            html.style.left = pLeft + "px";
            html.style.top = pTop + "px";
        }
        if (pst.controls) {
            pLeft = pst.controls.x;
            pTop = pst.controls.y;
            html = document.getElementsByClassName("content_controls")[0];
            html.style.left = pLeft + "px";
            html.style.top = pTop + "px";
            if(pTop > 503) {
                $("#idContent").find(".content_controls").css({'top':'','left':''});
            }
        }
    }

    //jQuery(".navBar").draggable({
    //    handle: "div",
    //    start: function(){
    //    },
    //    drag: function(){
    //    },
    //    stop: function(event){
    //        var pLeft, pTop, currentObj;
    //        pLeft = parseInt(event.target.style.left);
    //        pTop = parseInt(event.target.style.top)
    //        navbar = {
    //            navbar: {
    //                x: pLeft,
    //                y: pTop
    //            }
    //        };
    //        if (Modernizr.localstorage) {
    //            currentObj = localStorage.getItem(PMDesigner.localStorage.prefix);
    //            currentObj = (currentObj === null) ? {} : JSON.parse(currentObj);
    //            jQuery.extend(true, currentObj,navbar);
    //            localStorage.setItem(PMDesigner.localStorage.prefix, JSON.stringify(currentObj));
    //        } else {
    //            jQuery.extend(true, PMDesigner.cookie.object,navbar);
    //            document.cookie = PMDesigner.cookie.name+"="+JSON.stringify(PMDesigner.cookie.object);
    //        }
    //    }
    //});
    jQuery(".bpmn_shapes").draggable({
        handle: "div",
        start: function () {
        },
        drag: function () {
        },
        stop: function (event) {
            var pLeft, pTop, currentObj;
            pLeft = parseInt(event.target.style.left);
            pTop = parseInt(event.target.style.top);
            bpmn = {
                bpmn: {
                    x: pLeft,
                    y: pTop
                }
            };
            if (Modernizr.localstorage) {
                currentObj = localStorage.getItem(PMDesigner.localStorage.prefix);
                currentObj = (currentObj === null) ? {} : JSON.parse(currentObj);
                jQuery.extend(true, currentObj, bpmn);
                localStorage.setItem(PMDesigner.localStorage.prefix, JSON.stringify(currentObj));
            } else {
                jQuery.extend(true, PMDesigner.cookie.object, bpmn);
                document.cookie = PMDesigner.cookie.name + "=" + JSON.stringify(PMDesigner.cookie.object);
            }
        }
    });
    jQuery(".content_controls").draggable({
        handle: "div",
        start: function () {
        },
        drag: function () {
            jQuery("html").css("overflow","hidden");
        },
        stop: function (event) {
            jQuery("html").css("overflow","auto");
            if(jQuery(this).position().top > $(window).height()){
                var x = $(window).height() - 30;
                jQuery(this).css({'top' : x + 'px'});
            }
            var pLeft, pTop, currentObj;
            pLeft = parseInt(event.target.style.left);
            pTop = parseInt(event.target.style.top);
            if(pTop<90)
                pTop = 90;
            event.target.style.setProperty("top",pTop.toString()+"px");
            controls = {
                controls: {
                    x: pLeft,
                    y: pTop
                }
            };
            if (Modernizr.localstorage) {
                currentObj = localStorage.getItem(PMDesigner.localStorage.prefix);
                currentObj = (currentObj === null) ? {} : JSON.parse(currentObj);
                jQuery.extend(true, currentObj, controls);
                localStorage.setItem(PMDesigner.localStorage.prefix, JSON.stringify(currentObj));
            } else {
                jQuery.extend(true, PMDesigner.cookie.object, controls);
                document.cookie = PMDesigner.cookie.name + "=" + JSON.stringify(PMDesigner.cookie.object);
            }
        }
    });
    /*-----  End of Shapes and Controls Box  ------*/

    //Resize window
    PMDesigner.resizeFrame();

    /*==============================================
    =            Autosave functionality            =
    ==============================================*/
    PMDesigner.project.setSaveInterval(40000);
    setInterval(function(){
        if (PMDesigner.project.isDirty()) {
            PMDesigner.project.remoteProxy.setUrl(HTTP_SERVER_HOSTNAME + "/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
            if(PMDesigner.project.isSave === true){
                PMDesigner.msgFlash('Saving Process'.translate(), document.body, 'success',5000, 5);
            }else{
                PMDesigner.project.isSave = true;
                PMDesigner.project.save(true);
            }
        }
    }, PMDesigner.project.saveInterval);
    /*-----  End of Autosave functionality  ------*/

    //Reviewing functionalities
    if (!PMDesigner.supportBrowser("fullscreen")) {
        var li = document.getElementsByClassName("mafe-button-fullscreen");

        if (li) {
            li[0].parentElement.style.display = "none";
        }
    }
    ///**
    // *  DRAG IMPORT FUNCTIONALITY
    // */
    //var container = $('#div-layout-canvas');
    //// check file api availability
    //if (!window.FileList || !window.FileReader) {
    //    window.alert(
    //            'Looks like you use an older browser that does not support drag and drop. ' +
    //            'Try using Chrome, Firefox or the Internet Explorer > 10.');
    //} else {
    //    //registerFileDrop(container, openDiagram);
    //    registerFileDrop(container, PMDesigner.project.importDiagram);
    //}
    //
    //function registerFileDrop(container, callback) {
    //
    //    function handleFileSelect(e) {
    //        e.stopPropagation();
    //        e.preventDefault();
    //
    //        var files = e.dataTransfer.files;
    //
    //        var file = files[0];
    //
    //        var reader = new FileReader();
    //
    //        reader.onload = function (e) {
    //
    //            var xml = e.target.result;
    //
    //            //console.log(xml);
    //            callback(xml);
    //        };
    //
    //        reader.readAsText(file);
    //    }
    //
    //    function handleDragOver(e) {
    //        e.stopPropagation();
    //        e.preventDefault();
    //
    //        e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
    //    }
    //
    //    container.get(0).addEventListener('dragover', handleDragOver, false);
    //    container.get(0).addEventListener('drop', handleFileSelect, false);
    //}


    jQuery('.mafe-zoom-options').attr('title','Zoom'.translate()).tooltip({tooltipClass: "mafe-action-tooltip"});
    jQuery('.mafe-toolbar-lasso').mouseover(function (e) {
        $('.mafe-toolbar-lasso').css('cursor', 'pointer');
    });
    jQuery('.mafe-toolbar-validation').mouseover(function (e) {
        $('.mafe-toolbar-validation').css('cursor', 'pointer');
    });
    jQuery('.mafe-toolbar-lasso').click(function (e) {
        if (!PMUI.getActiveCanvas().lassoEnabled) {
            $('.mafe-toolbar-lasso').css('background-color', 'rgb(207, 207, 207)');
            PMUI.getActiveCanvas().lassoEnabled = true;
        } else {
            $('.mafe-toolbar-lasso').css('background-color', 'rgb(233, 233, 233)');
            PMUI.getActiveCanvas().lassoEnabled = false;
        }
    });

    PMDesigner.helper = new IntroHelper({
        tooltipClass: 'general',
        skipLabel:'Quit'.translate(),

        nextLabel: 'Next &#8594;'.translate(),
        prevLabel: '&#8592; Back'.translate(),
        doneLabel: 'Done'.translate(),
        steps:  [
            {
                //element: '#step1',
                intro: '<div class="screencast"/>'
            },
            {
                element: '#idNavBar',
                intro: 'The designer bar displays the process name and is used to control the process view (zoom, full screen view), the export, undo/redo and the save button.'.translate()
                //position: 'left'
            },

            {
                element: '.bpmn_shapes',
                intro: 'Drag and Drop the process elements that you want include in the process design.'.translate() +
                '<br /><img src="../../../lib/img/corona-task.png">' + ' Task: Add to include action in your process.'.translate() +
                '<br /><img src="../../../lib/img/corona-gateway-exclusive.png"> <img src="../../../lib/img/corona-gateway-parallel.png"> <img src="../../../lib/img/corona-gateway-inclusive.png">' + ' Gateway: Used to control the execution flow. '.translate() +
                '<br /><img src="../../../lib/img/corona-start.png"> <img src="../../../lib/img/corona-start-message.png">' + ' Start Event: The process begins with a start event.'.translate() +
                '<br /><img src="../../../lib/img/corona-intermediate-receive-message.png"> <img src="../../../lib/img/corona-intermediate-send-message.png">' + ' Intermediate Event: Used to define an event that could happen in the middle of the process.'.translate() +
                '<br /><img src="../../../lib/img/corona-end.png"> <img src="../../../lib/img/corona-end-message.png">' + ' End Event: End the execution of the process.'.translate() +
                '<br /><img src="../../../lib/img/corona-pool.png"> <img src="../../../lib/img/corona-lane.png">' + ' Pool & Lanes: Separate Multiple processes into different pools.'.translate()
                //position: 'right'
            },
            {
                element: '#div-layout-canvas',
                intro: "In the design area you can drop the process elements and order or arrange them to design your process.".translate()
                //position: 'right'
            },

            {
                element: '.content_controls',
                //intro: 'More features, more <span style="color: red;">f</span><span style="color: green;">u</span><span style="color: blue;">n</span>.',
                intro: '<p>' +
                'The process objects are used to add execution features to the current process design.'.translate()  +
                '<br/>Variables: Define the process data.'.translate()  +
                '<br/>Dynaforms: Create dynamic forms.'.translate()  +
                '<br/>Triggers: Create scripts.'.translate()  +
                '<br/>Output documents: Generate documents with process data.'.translate()  +
                '<br/>DB connections: Connect to external databases.'.translate() +
                '</p>',
                position: 'left'
            },
            {
                intro: '<div class="startcoronahelp"></div><div>' + 'Select an element in the designer to display the quick toolbar with the list of the most used options available for that element.'.translate() + '</div>'
            }
        ]
    });
    //jQuery('.mafe-toolbar-help').click(function (e) {
    //    PMDesigner.helper.startIntro();
    //});
    jQuery('.mafe-toolbar-validation').click(function (e) {
        if (!PMDesigner.validator) {
            $('.mafe-toolbar-validation').css('background-color', 'rgb(207, 207, 207)');
            PMDesigner.validator = true;
        } else {
            $('.bpmn_validator').css('visibility', 'hidden');
            $('.mafe-toolbar-validation').css('background-color', 'rgb(233, 233, 233)');
            PMDesigner.validator = false;
        }
    });
    if (inArray("jXsSi94bkRUcVZyRStNVExlTXhEclVadGRRcG9xbjNvTWVFQUF3cklKQVBiVT0=", ENABLED_FEATURES)) {
        $("#idNavBar").find(".mafe-button-export-process").html(
            $("#idNavBar").find(".mafe-button-export-process").text() + "  &#x25BC;"
        );
    }

    function inArray(needle, haystack) {
        var i;
        var length = haystack.length;
        for(i = 0; i < length; i++) {
            if(haystack[i] == needle) return true;
        }
        return false;
    }
});

window.onload = function () {
    //Reset the scroll positions
    window.scrollBy(-window.scrollX, -window.scrollY);
    document.onkeydown = function (e) {
        if (e.keyCode === 8 && e.target === document.body) {
            e.stopPropagation();
            return false;
        }
    };
};
/*==================================================
 =            Components from the Panels            =
 ==================================================*/

PMDesigner.createHTML = function () {
    var minShapes = document.createElement("span"),
            minShapesLegend = document.createElement("span"),
            refreshShapes = document.createElement("span"),
            minControls = document.createElement("span"),
            processObjects = document.createElement("span"),
            refreshControls = document.createElement("span"),
            refreshNavBar = document.createElement("span");
    minShapes.id = "minShapes";
    minShapesLegend.id = "minShapesLegend";
    refreshShapes.id = "resetShapes";
    minControls.id = "minControls";
    refreshControls.id = "resetControls";
    refreshNavBar.id = "resetNavBar";
    minShapes.className = "mafe-shapes-toggle";
    minShapesLegend.className = "mafe-shapes-toggle";
    refreshShapes.className = "mafe-shapes-refresh";
    minControls.className = "mafe-shapes-toggle";
    processObjects.className = "mafe-process-object";
    refreshControls.className = "mafe-shapes-refresh";
    refreshNavBar.className = "mafe-shapes-refresh";
    minShapes.title = "Minimize".translate();
    minShapesLegend.title = "Minimize".translate();
    refreshShapes.title = "reset".translate();
    minControls.title = "Minimize".translate();
    refreshControls.title = "Reset to original position".translate();
    refreshNavBar.title = "reset".translate();

    jQuery(minShapes).tooltip({tooltipClass: "mafe-action-tooltip"});
    jQuery(minShapesLegend).tooltip({tooltipClass: "mafe-action-tooltip"});
    jQuery(refreshShapes).tooltip({tooltipClass: "mafe-action-tooltip"});
    jQuery(minControls).tooltip({tooltipClass: "mafe-action-tooltip"});
    jQuery(refreshControls).tooltip({tooltipClass: "mafe-action-tooltip"});
    jQuery(refreshNavBar).tooltip({tooltipClass: "mafe-action-tooltip"});

    refreshControls.style.backgroundPosition ='0px 0px';
    processObjects.textContent = "Process Objects".translate();

    minShapes.onclick = function () {
        var i,
                items = jQuery(".bpmn_shapes > ul");
        if (items.length > 0) {
            for (i = 0; i < items.length; i += 1) {
                if (jQuery(items[i]).css("display").toLowerCase() !== "none") {
                    jQuery(items[i]).css({
                        display: 'none'
                    });
                } else {
                    jQuery(items[i]).css({
                        display: 'block'
                    });
                }

            }
        }
    };
    minShapesLegend.onclick = function () {
        var i;
        var items = jQuery(".bpmn_shapes_legend").children();
        for (i = 1; i < items.length; i++) {
            if (jQuery(items[i]).css("display").toLowerCase() !== "none") {
                jQuery(items[i]).css({
                    display: 'none'
                });
            } else {
                jQuery(items[i]).css({
                    display: 'block'
                });
            }
        }
    };
    refreshShapes.onclick = function () {
        jQuery(".bpmn_shapes").removeAttr('style');
        if (Modernizr.localstorage) {
            PMDesigner.localStorage.remove("bpmn");
        } else {
            PMDesigner.cookie.remove("bpmn");
        }
    };
    minControls.onclick = function () {
        var i,
            title = '',
            items = jQuery(".content_controls > ul");

        if (items.length > 0) {
            for (i = 0; i < items.length; i += 1) {
                if (jQuery(items[i]).css("display").toLowerCase() !== "none") {
                    jQuery(items[i]).css({
                        display: 'none'
                    });
                    title = "Maximize";
                    $('#minControls').removeClass('mafe-shapes-toggle');
                    $('#minControls').addClass('mafe-shapes-plus');
                } else {
                    jQuery(items[i]).css({
                        display: 'block'
                    });
                    title = "Minimize";
                    $('#minControls').removeClass('mafe-shapes-plus');
                    $('#minControls').addClass('mafe-shapes-toggle');

                }
            }
        }
        jQuery(minControls).tooltip({content: title.translate()});
    };
    refreshControls.onclick = function () {
        jQuery(".content_controls").css({
            left : "auto",
            right : "20px",
            top : "90px"
        });
        if (Modernizr.localstorage) {
            PMDesigner.localStorage.remove("controls");
        } else {
            PMDesigner.cookie.remove("controls");
        }
    };
    refreshNavBar.onclick = function () {
        jQuery(".navBar").removeAttr('style');
        if (Modernizr.localstorage) {
            PMDesigner.localStorage.remove("navbar");
        } else {
            PMDesigner.cookie.remove("navbar");
        }
    };


    jQuery(".bpmn_shapes>div").append(minShapes);
    jQuery(".bpmn_shapes>div").append(refreshShapes);
    jQuery(".content_controls>div").append(processObjects);
    jQuery(".content_controls>div").append(minControls);
    jQuery(".content_controls>div").append(refreshControls);
    jQuery(".navBar>div").append(refreshNavBar);
    jQuery(".bpmn_shapes_legend>div").append(minShapesLegend);
    jQuery(".bpmn_shapes, .content_controls").on("contextmenu", function (e) {
        e.preventDefault();
    });

    PMDesigner.applyCanvasOptions();

};

/*-----  End of Components from the Panels  ------*/

/*=====================================================
 =            Get information about browser            =
 =====================================================*/
PMDesigner.getBrowser = function () {
    var match,
            ua = navigator.userAgent.toLowerCase();
    if (ua) {
        match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
                /(webkit)[ \/]([\w.]+)/.exec(ua) ||
                /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
                /(msie) ([\w.]+)/.exec(ua) ||
                ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
                [];

        return {
            browser: match[ 1 ] || "",
            version: match[ 2 ] || "0"
        };
    }
};
/*-----  End of Get information about browser  ------*/

PMDesigner.supportBrowser = function (functionality) {
    var browser, el, module;
    functionality = functionality.toLowerCase();
    switch (functionality) {
        case "fullscreen":
            browser = PMDesigner.getBrowser();
            if ((browser.browser === "msie") && (parseInt(browser.version, 10) <= 10)) {
                try {
                    module = new ActiveXObject("WScript.Shell");
                } catch (e) {
                    module = false;
                }
            } else {
                el = document.documentElement;
                module = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullScreen;
                if (!module) {
                    module = false;
                }
            }
            break;
        case "":
            break;
    }
    return module;
};

/*============================================================
 =            Leave the current page Functionality            =
 ============================================================*/
window.onbeforeunload = function (e) {
    var message;
    if(PMDesigner.project.isDirty()
        && PMDesigner.project.isClose == false
        && PMDesigner.project.isSave == false) {
        PMDesigner.project.remoteProxy.setUrl(HTTP_SERVER_HOSTNAME + "/api/1.0/"+WORKSPACE+"/project/"+prj_uid);
        if(PMDesigner.project.isSave === true){
                PMDesigner.msgFlash('Saving Process'.translate(), document.body, 'success',5000, 5);
        }else{
            PMDesigner.project.isSave = true;
            PMDesigner.project.save(true);
        }
        message = "There are unsaved changes, if you leave the editor some changes won't be saved.".translate();
        e = e || window.event;
        if (e) {
            e.returnValue = message;
        }
        return message;
    }
};
/*-----  End of Leave the current page Functionality  ------*/

/*=====================================================================
 =            Validating coordinates for create a new shape            =
 =====================================================================*/
PMUI.validCoordinatedToCreate = function (canvas, event, shape) {
    var position, p, width, height, createElem = true, panels = [], message;
    //navBar panel
    position = jQuery(".navBar").offset();
    width = jQuery(".navBar").width();
    height = jQuery(".navBar").height();
    element = {
        x1: position.left,
        y1: position.top,
        x2: position.left + width,
        y2: position.top + height
    };
    panels.push(element);
    //BPMN panel
    position = jQuery(".bpmn_shapes").offset();
    width = jQuery(".bpmn_shapes").width();
    height = jQuery(".bpmn_shapes").height();
    element = {
        x1: position.left,
        y1: position.top,
        x2: position.left + width,
        y2: position.top + height
    };
    //panels.push(element);
    ////Controls panel
    //position = jQuery(".content_controls").offset();
    //width = jQuery(".content_controls").width();
    //height = jQuery(".content_controls").height();
    //element = {
    //    x1: position.left,
    //    y1: position.top,
    //    x2: position.left + width,
    //    y2: position.top + height
    //};
    //panels.push(element);

    //Review the positions
    if (panels.length > 0) {
        for (p = 0; p < panels.length; p += 1) {
            if (((event.pageX >= panels[p].x1) && (event.pageX <= panels[p].x2))
                    && ((event.pageY >= panels[p].y1) && (event.pageY <= panels[p].y2))) {
                PMDesigner.msgFlash('Is not possible create the element in that area'.translate(), document.body, 'info', 3000, 5);
                return false;
            }
        }
    }

    return true;
};
/*-----  End of Validating coordinates for create a new shape  ------*/

PMUI.pageCoordinatesToShapeCoordinates = function (shape, e, xCoord, yCoord, customShape) {
    var coordinates,
            x = (!xCoord) ? e.pageX : xCoord,
            y = (!yCoord) ? e.pageY : yCoord,
            orgX = (!xCoord) ? e.pageX : xCoord,
            orgY = (!yCoord) ? e.pageY : yCoord,
            canvas = shape.getCanvas();
    x += canvas.getLeftScroll() - shape.getAbsoluteX() - canvas.getX();
    y += canvas.getTopScroll() - shape.getAbsoluteY() - canvas.getY();
    //if (customShape instanceof PMLine) {
    //    if (customShape.art_orientation === "vertical") {
    //
    //        y = -parseInt(customShape.height / 3, 10);
    //    } else if (customShape.art_orientation === "horizontal") {
    //        x = -parseInt(customShape.width / 3, 10);
    //    }
    //} else {
    //    if (orgX === x) {
    //        x -= parseInt(customShape.width * customShape.canvas.zoomFactor / 2, 10);
    //    }
    //    if (orgY === y) {
    //        y -= parseInt(customShape.height * customShape.canvas.zoomFactor / 2, 10);
    //    }
    //}
    coordinates = new PMUI.util.Point(x, y);
    return coordinates;
};

PMDesigner.msgFlash = function (text, container, severity, duration, zorder) {

        var msg;
        if (!PMDesigner.currentMsgFlash) {
            msg = new PMUI.ui.FlashMessage({
                id: '__msgFlashMessage',
                severity: 'success'
            });
        } else {
            msg = PMDesigner.currentMsgFlash;
        }
        if(msg.html)
            jQuery(msg.html).remove();
        msg.setMessage(text||"");
        msg.setAppendTo(container||document.body);
        msg.setSeverity(severity||"success");
        msg.setDuration(duration||3000);
        msg.setZOrder(zorder||100);
        msg.show();
        PMDesigner.currentMsgFlash = msg;
};

PMDesigner.msgWinError = function (text) {

    var msgError;
    if (!PMDesigner.currentWinError) {
        msgError = new PMUI.ui.MessageWindow({
            id: 'showMessageWindowFailure',
            width: 490,
            windowMessageType: 'error',
            title: 'Error'.translate(),
            footerItems: [
                {
                    text: 'Ok'.translate(),
                    handler: function () {
                        msgError.close();
                    },
                    buttonType : "success"
                }
            ]
        });
    } else {
        msgError = PMDesigner.currentWinError;
    }
    msgError.setMessage(text || 'Error'.translate());
    msgError.showFooter();
    msgError.open();
    PMDesigner.currentWinError = msgError;
};

PMDesigner.msgWinWarning = function (text) {

    var msgWarning;
    if (!PMDesigner.currentWinWarning) {
        msgWarning = new PMUI.ui.MessageWindow({
            id: 'showMessageWindowWarning',
            windowMessageType: 'warning',
            width: 490,
            title: 'Warning'.translate(),
            footerItems: [{
                text: 'Ok'.translate(),
                buttonType : "success", handler: function () {
                        msgWarning.close();
                    }}]
        });
    } else {
        msgWarning = PMDesigner.currentWinWarning;
    }
    msgWarning.setMessage(text || 'Warning'.translate());
    msgWarning.showFooter();
    msgWarning.open();
    PMDesigner.currentWinWarning = msgWarning;
};


PMDesigner.modeReadOnly = function () {
    if (prj_readonly === 'true') {
        var restClient = new PMRestClient({
            typeRequest: 'post',
            multipart: true,
            data: {
                calls: [{
                        url: 'cases/' + app_uid + '/tasks',
                        method: 'GET'
                    }
                ]
            },
            functionSuccess: function (xhr, response) {
                var viewTaskInformation = new ViewTaskInformation();
                viewTaskInformation.setData(response[0].response);
                viewTaskInformation.setShapes();
                viewTaskInformation.showViewLegendsInformation();
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        });
        restClient.setBaseEndPoint('');
        restClient.executeRestClient();
    }
};

PMDesigner.reloadDataTable = function () {
    $('.bpmn_validator').css('visibility', 'visible');

};

var DataDictionary = function () {
};
DataDictionary.prototype.getColor = function (value) {
    switch (value) {
        case 'TASK_IN_PROGRESS':
            return 'red';
        case 'TASK_COMPLETED':
            return 'green';
        case 'TASK_PENDING_NOT_EXECUTED':
            return 'silver';
        case 'TASK_PARALLEL':
            return 'orange';
        default:
            return 'white';
    }
};
DataDictionary.prototype.getStatus = function (value) {
    switch (value) {
        case 'TASK_IN_PROGRESS':
            return 'Task in Progress'.translate();
        case 'TASK_COMPLETED':
            return 'Completed Task'.translate();
        case 'TASK_PENDING_NOT_EXECUTED':
            return 'Pending Task / Not Executed'.translate();
        case 'TASK_PARALLEL':
            return 'Parallel Task'.translate();
        default:
            return value;
    }
};
DataDictionary.prototype.getTasAssignType = function (value) {
    switch (value) {
        case 'BALANCED':
            return 'Balanced'.translate();
        case 'MANUAL':
            return 'Manual'.translate();
        case 'REPORT_TO':
            return 'Report toO'.translate();
        case 'EVALUATE':
            return 'Evaluate'.translate();
        case 'SELF_SERVICE':
            return 'self Service'.translate();
        case 'SELF_SERVICE_EVALUATE':
            return 'Self Service Evaluate'.translate();
        default:
            return value;
    }
};
DataDictionary.prototype.getTasType = function (value) {
    switch (value) {
        case 'NORMAL':
            return 'Normal'.translate();
        case 'SUBPROCESS':
            return 'Sub Process'.translate();
        default:
            return value;
    }
};
DataDictionary.prototype.getTasDerivation = function (value) {
    switch (value) {
        case 'NORMAL':
            return 'Normal'.translate();
        default:
            return value;
    }
};

var ViewTaskInformation = function (settings) {
    ViewTaskInformation.prototype.init.call(this, settings);
};
ViewTaskInformation.prototype.init = function () {
    var that = this;
    var panelButton = new PMUI.core.Panel({
        layout: 'hbox',
        items: [
            that.getButton('Information', function () {
                that.showInformation();
            }),
            that.getButton('Delegations', function () {
                that.showDelegations();
            }),
            that.getButton('Route', function () {
                that.showRoute();
            })
        ]
    });
    that.windowAbstract.showFooter();
    that.windowAbstract.addItem(panelButton);
    that.windowAbstract.addItem(that.panelvertical);
};
ViewTaskInformation.prototype.dataDictionary = new DataDictionary();
ViewTaskInformation.prototype.data = null;
ViewTaskInformation.prototype.shapeData = null;
ViewTaskInformation.prototype.panelvertical = new PMUI.core.Panel({layout: 'vbox', width: 400});
ViewTaskInformation.prototype.windowAbstract = new PMUI.ui.Window({id: 'windowAbstract', width: 500, height: 350});
ViewTaskInformation.prototype.setData = function (data) {
    this.data = data;
};
ViewTaskInformation.prototype.setCursor = function (shape) {
    shape.getHTML().onmouseover = function () {
        this.style.cursor = 'pointer';
    };
    shape.getHTML().onmouseout = function () {
        this.style.cursor = '';
    };
};
ViewTaskInformation.prototype.setShapes = function () {
    var that = this;
    var shape;
    var dt = that.data;
    for (var i = 0; i < dt.length; i++) {
        var diagrams = PMDesigner.project.diagrams.asArray();
        for (var j = 0; j < diagrams.length; j++) {
            shape = diagrams[j].getCustomShapes().find('id', dt[i].tas_uid);
            if (typeof shape != "undefined" && shape != null) {
                shape.changeColor(that.dataDictionary.getColor(dt[i].status));
                shape.data = dt[i];
                shape.hasClick = function (event) {
                    that.setShapeData(this.data);
                    that.showInformation();
                };
                that.setCursor(shape);
            }
        }
    }
};
ViewTaskInformation.prototype.setShapeData = function (data) {
    this.shapeData = data;
};
ViewTaskInformation.prototype.addRowNewLine = function (label, value) {
    var panelhorizontal = new PMUI.core.Panel({
        layout: 'hbox'
    });
    panelhorizontal.addItem(new PMUI.ui.TextLabel({text: ''}));
    this.panelvertical.addItem(panelhorizontal);
    return panelhorizontal;
};
ViewTaskInformation.prototype.addRow = function (label, value) {
    var field1, field2, field3;

    field1 = new PMUI.ui.TextLabel({text: label.translate(), proportion: 0.3});
    field2 = new PMUI.ui.TextLabel({text: ':', proportion: 0.1});
    field3 = new PMUI.ui.TextLabel({text: value ? value + '' : '', proportion: 0.6});

    var panelhorizontal = new PMUI.core.Panel({
        layout: 'hbox'
    });

    panelhorizontal.addItem(field1);
    panelhorizontal.addItem(field2);
    panelhorizontal.addItem(field3);
    this.panelvertical.addItem(panelhorizontal);
    return panelhorizontal;
};
ViewTaskInformation.prototype.clearRows = function () {
    this.panelvertical.clearItems();
};
ViewTaskInformation.prototype.showInformation = function () {
    var that = this;
    that.clearRows();
    that.addRow('Title', that.shapeData.tas_title);
    that.addRow('Description', that.shapeData.tas_description);
    that.addRow('Status', that.dataDictionary.getStatus(that.shapeData.status));
    that.addRow('Type', that.dataDictionary.getTasType(that.shapeData.tas_type));
    that.addRow('Assign type', that.dataDictionary.getTasAssignType(that.shapeData.tas_assign_type));
    that.addRow('Derivation', that.dataDictionary.getTasDerivation(that.shapeData.tas_derivation));
    that.addRow('Start', that.shapeData.tas_start);
    that.addRowNewLine();
    that.addRow('User Name', that.shapeData.usr_username);
    that.addRow('User', that.shapeData.usr_firstname + ' ' + that.shapeData.usr_lastname);

    that.windowAbstract.setTitle('Information'.translate() + ' ' + that.shapeData.tas_title);
    that.windowAbstract.open();
    that.windowAbstract.body.style.padding = '20px';
};
ViewTaskInformation.prototype.showDelegations = function () {
    var that = this, i, dt;
    that.clearRows();
    dt = that.shapeData.delegations;
    for (i = 0; i < dt.length; i++) {
        that.addRow('User', dt[i].usr_username);
        that.addRow('User Name', dt[i].usr_firstname + ' ' + dt[i].usr_lastname);
        that.addRow('Duration', dt[i].del_duration);
        that.addRow('Finish Date', dt[i].del_finish_date);
        that.addRow('Index', dt[i].del_index);
        that.addRow('Init Date', dt[i].del_init_date);
        that.addRow('Task Due Date', dt[i].del_task_due_date);
        that.addRowNewLine();
    }

    that.windowAbstract.setTitle('Delegations'.translate() + ' ' + that.shapeData.tas_title);
    that.windowAbstract.open();
    that.windowAbstract.body.style.padding = '20px';
};
ViewTaskInformation.prototype.showRoute = function () {
    var that = this, i, dt;
    that.clearRows();
    that.addRow('Type', that.shapeData.route.type);
    that.addRowNewLine();
    dt = that.shapeData.route.to;
    for (i = 0; i < dt.length; i++) {
        that.addRow('Condition', dt[i].rou_condition);
        that.addRow('Number', dt[i].rou_number);
        that.addRowNewLine();
    }

    that.windowAbstract.setTitle('Route'.translate() + ' ' + that.shapeData.tas_title);
    that.windowAbstract.open();
    that.windowAbstract.body.style.padding = '20px';
};
ViewTaskInformation.prototype.getButton = function (text, fn) {
    return new PMUI.ui.Button({
        text: text.translate(),
        width: 180,
        height: 50,
        style: {
            cssProperties: {
                marginRight: 10,
                marginBottom: 10,
                backgroundColor: '#474747',
                borderRadius: 5,
                padding: 5
            },
            cssClasses: ['mafeButton']
        },
        handler: fn
    });
};
ViewTaskInformation.prototype.showViewLegendsInformation = function () {
    $('.bpmn_shapes_legend').show();

    var i;
    var dt = [
        ['red', 'Task in Progress'.translate()],
        ['green', 'Completed Task'.translate()],
        ['silver', 'Pending Task / Not Executed'.translate()],
        ['orange', 'Parallel Task'.translate()]
    ];
    for (i = 0; i < dt.length; i++) {
        var legend = $("<div></div>");
        var legendIcon = $("<div></div>").addClass("mafe-activity-task-" + dt[i][0]).addClass("icon-legend");
        var legendText = $("<div>" + dt[i][1] + "</div>").addClass("text-legend");
        legend.append(legendIcon).append(legendText);
        jQuery(".bpmn_shapes_legend").append(legend);
    }

    jQuery(".bpmn_shapes_legend").draggable({
        handle: "div",
        start: function(){
        },
        drag: function(event,e,u){
        },
        stop: function(event){

        }
    });
};

(function () {
    PMDesigner.getMenuFactory = function (type) {
        if (prj_readonly === 'true') {
            return {};
        }

        var menuMessages={
            'START':{
                'TIMER': 'Please configure cron to create cases.'.translate(),
                'CONDITIONAL' : 'Please configure cron to create cases in base to a condition.'.translate(),
                'SIGNALCATCH' : 'Please configure cron to create cases in base to a signal.'.translate()
            },
            'INTERMEDIATE':{
                'CATCH':{
                    'TIMER' : 'Please configure cron to wait for time event.'.translate(),
                    'CONDITIONAL' : 'Please configure cron to wait for time condition.'.translate(),
                    'SIGNALCATCH' : 'Please configure script to wait for a signal.'.translate()
                },
                'THROW':{
                    'SIGNALTHROW' : 'Please configure a script to send a signal.'.translate()
                }                
            },
            'END':{
                'ERRORTHROW' : 'Please configure script to end with error status.'.translate(),
                'SIGNALTHROW' : 'Please configure script to send a signal.'.translate(),
                'TERMINATETHROW' : 'Please configure script to terminate case.'.translate()
            }          
        };

        var menu = {},rootMenu,
            elementActivite,
            direction = {
                text: "Gateway Direction".translate(),
                icon: "mafe-menu-properties-action",
                id: "gatewaydirection",
                items: [
                    {
                        id: "gatewaydiverging",
                        text: "Diverging".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.gat_direction = "DIVERGING";
                        }
                    },
                    {
                        id: "gatewayconverging",
                        text: "Converging".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.gat_direction = "CONVERGING";
                        }
                    }
                ]
            },
            typeMenu = {
                text: "Gateway Type".translate(),
                icon: "mafe-menu-properties-action",
                id: "gatewaytype",
                items: [
                    {
                        id: "gatewayexclusive",
                        text: "Exclusive (XOR) Gateway".translate(),
                        onClick: function (menuOption) {
                            //PMDesigner.assigmentSupervisors(menuOption.getMenuTargetElement());
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeTypeTo('EXCLUSIVE');
                        }
                    },
                    {
                        id: "gatewayparallel",
                        text: "Parallel (AND) Gateway".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeTypeTo('PARALLEL');

                        }
                    },
                    {
                        id: "gatewayinclusive",
                        text: "Inclusive (OR) Gateway".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeTypeTo('INCLUSIVE');
                        }
                    }
                    /*{
                        id: "gatewayeventbased",
                        text: "Event-based Gateway".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeTypeTo('EVENTBASED');
                        }
                    },
                    {
                        id: "gatewaycomplex",
                        text: "Complex Gateway".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeTypeTo('COMPLEX');
                        }
                    }*/
                    //{
                    //    id: "gatewayexclusiveeventbased",
                    //    text: "Exclusive Event-based Gateway".translate(),
                    //    onClick: function (menuOption) {
                    //        var targetElement = menuOption
                    //                .getMenuTargetElement();
                    //        targetElement.changeTypeTo('EXCLUSIVEEVENTBASED');
                    //    }
                    //},
                    //{
                    //    id: "gatewayparalleleventbased",
                    //    text: "Parallel Event-based Gateway".translate(),
                    //    onClick: function (menuOption) {
                    //        var targetElement = menuOption
                    //                .getMenuTargetElement();
                    //        targetElement.changeTypeTo('PARALLELEVENTBASED');
                    //    }
                    //}
                ]
            },
            endMarker = {
                text: "End Event Type".translate(),
                icon: "mafe-menu-properties-action",
                id: "result",
                items: [
                    {
                        id: "endempty",
                        text: "Empty".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('EMPTY', 'Empty');
                        }
                    },
                    {
                        id: "endemail",
                        text: "Email Message".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('EMAIL', 'Email Message');
                        }
                    },
                    {
                        id: "endmessagethrow",
                        text: "Message".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('MESSAGETHROW', 'Message');
                        }
                    },
                    {
                        id: "enderrorthrow",
                        text: "Error".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('ERRORTHROW', 'Error');
                        }
                    },
                    /*{
                        id: "endcancelthrow",
                        text: "Cancel".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('CANCELTHROW');

                        }
                    },*/
                    /*{
                        id: "endcompensationthrow",
                        text: "Compensation".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('COMPENSATIONTHROW');
                        }
                    },*/
                    {
                        id: "endsignalthrow",
                        text: "Signal".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('SIGNALTHROW', 'Signal');
                        }
                    },
                    //{
                    //    id: "endmultiplethrow",
                    //    text: "Multiple Marker".translate(),
                    //    onClick: function (menuOption) {
                    //        var targetElement = menuOption
                    //                .getMenuTargetElement();
                    //        targetElement.changeMarkerTo('MULTIPLETHROW');
                    //    }
                    //},
                    {
                        id: "endterminatethrow",
                        text: "Terminate".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('TERMINATETHROW', 'Terminate');
                        }
                    }
                ]
            },
            intermediateCatchMarker = {
                text: "Intermediate Event Type".translate(),
                icon: "mafe-menu-properties-action",
                id: "trigger",
                items: [
                    {
                        id: "intermediatemessagecatch",
                        text: "Receive Message".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('MESSAGECATCH', 'Receive Message');
                        }
                    },
                    {
                        id: "intermediatetimer",
                        text: "Timer".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('TIMER', 'Timer');
                        }
                    },
                    {
                        id: "intermediateconditional",
                        text: "Conditional".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('CONDITIONAL', 'Conditional');
                        }
                    },
                    /*{
                        id: "intermediatelinkcatch",
                        text: "Link".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('LINKCATCH');
                        }
                    },*/
                    {
                        id: "intermediatesignalcatch",
                        text: "Signal".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('SIGNALCATCH', 'Signal');
                        }
                    }
                    //{
                    //    id: "intermediatemultiplecatch",
                    //    text: "Multiple".translate(),
                    //    onClick: function (menuOption) {
                    //        var targetElement = menuOption
                    //                .getMenuTargetElement();
                    //        targetElement.changeMarkerTo('MULTIPLECATCH');
                    //    }
                    //},
                    //{
                    //    id: "intermediateparallelcatch",
                    //    text: "Parallel".translate(),
                    //    onClick: function (menuOption) {
                    //        var targetElement = menuOption
                    //                .getMenuTargetElement();
                    //        targetElement.changeMarkerTo('PARALLELCATCH');
                    //    }
                    //}
                ]
            },
            boundaryCatchMarker = {
                text: "Boundary Event Type".translate(),
                icon: "mafe-menu-properties-action",
                id: "eventType",
                items: [
                    {
                        id: "messageCatch",
                        text: "Receive Message".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('MESSAGECATCH', 'Receive Message');
                        }
                    },
                    {
                        id: "boundaryTimer",
                        text: "Timer".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('TIMER', 'Timer');
                        }
                    },
                    {
                        id: "BoudaryConditional",
                        text: "Conditional".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('CONDITIONAL', 'Conditional');
                        }
                    },
                    {
                        id: "BoudarySignal",
                        text: "Signal".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('SIGNALCATCH', 'Signal');
                        }
                    },
                    {
                        id: "BoudaryError",
                        text: "Error".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('ERRORCATCH', 'Error');
                        }
                    }
                ]
            },
            intermediateThrowMarker = {
                text: "Intermediate Event Type".translate(),
                icon: "mafe-menu-properties-action",
                id: "result",
                items: [
                    {
                        id: "intermediateemail",
                        text: "Email Message".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('EMAIL', 'Email Message');
                        }
                    },
                    {
                        id: "intermediatemessagethrow",
                        text: "Send Message".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('MESSAGETHROW', 'Send Message');
                        }
                    },
                    /*{
                        id: "intermediatelinkthrow",
                        text: "Link".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('LINKTHROW');
                        }
                    },*/
                    /*{
                        id: "intermediatecompensationthrow",
                        text: "Compensation".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('COMPENSATIONTHROW');
                        }
                    },*/
                    {
                        id: "intermediatesignalthrow",
                        text: "Signal".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('SIGNALTHROW', 'Signal');
                        }
                    }
                    //{
                    //    id: "intermediatemultiplethrow",
                    //    text: "Multiple".translate(),
                    //    onClick: function (menuOption) {
                    //        var targetElement = menuOption
                    //                .getMenuTargetElement();
                    //        targetElement.changeMarkerTo('MultipleTHROW');
                    //    }
                    //}
                ]
            },
            startCatchMarker = {
                text: "Start Event Type".translate(),
                icon: "mafe-menu-properties-action",
                id: "trigger",
                items: [
                    {
                        id: "startempty",
                        text: "Empty".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('EMPTY', 'Empty');
                        }
                    },
                    {
                        id: "startmessagecatch",
                        text: "Receive Message".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('MESSAGECATCH', 'Receive Message');
                            rootMenu = menuOption.getRootMenu();
                            rootMenu.getItems()[3].disable();
                        }
                    },
                    {
                        id: "starttimer",
                        text: "Timer".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('TIMER', 'Timer');
                            rootMenu = menuOption.getRootMenu();
                            rootMenu.getItems()[3].disable();
                        }
                    },
                    {
                        id: "startconditional",
                        text: "Conditional".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('CONDITIONAL', 'Conditional');
                            rootMenu = menuOption.getRootMenu();
                            rootMenu.getItems()[3].disable();
                        }
                    },
                    {
                        id: "startsignalcatch",
                        text: "Signal".translate(),
                        onClick: function (menuOption) {
                            var targetElement = menuOption
                                .getMenuTargetElement();
                            targetElement.changeMarkerTo('SIGNALCATCH', 'Signal');
                            rootMenu = menuOption.getRootMenu();
                            rootMenu.getItems()[3].disable();
                        }
                    }
                    //{
                    //    id: "startmultiplecatch",
                    //    text: "Multiple".translate(),
                    //    onClick: function (menuOption) {
                    //        var targetElement = menuOption
                    //                .getMenuTargetElement();
                    //        targetElement.changeMarkerTo('MULTIPLECATCH');
                    //    }
                    //},
                    //{
                    //    id: "startparallelcatch",
                    //    text: "Parallel".translate(),
                    //    onClick: function (menuOption) {
                    //        var targetElement = menuOption
                    //                .getMenuTargetElement();
                    //        targetElement.changeMarkerTo('PARALLELCATCH');
                    //    }
                    //}
                ]
            };
        switch (type) {
            case 'CANVAS':
                menu = {
                    id: "menuCanvas",
                    width: 150,
                    items: [
                        {
                            id: "menuEditProcess",
                            text: "Edit Process".translate(),
                            onClick: function (menuOption) {
                                PMDesigner.propertiesProcess();
                            }
                        },
                        /*{
                            id: "menuProcessSupervisors",
                            text: "Process Supervisors".translate(),
                            items: [
                                {
                                    id: "menuSupervisors",
                                    text: "Supervisors".translate(),
                                    onClick: function (menuOption) {
                                        PMDesigner.assigmentSupervisors(menuOption
                                            .getMenuTargetElement());
                                    }
                                },
                                {
                                    id: "menuSteps",
                                    text: "Steps".translate(),
                                    onClick: function (menuOption) {
                                        PMDesigner.assigmentSupervisorsSteps();
                                    }
                                }
                            ]
                        },*/
                        {
                            id: "menuGridLines",
                            text: "Enable Grid Lines".translate(),
                            onClick: function () {
                                var canvas = PMUI.getActiveCanvas();
                                if(canvas.toogleGridLine()){
                                    this.setText("Disable Grid Lines".translate());
                                }else{
                                    this.setText("Enable Grid Lines".translate());
                                }
                            }
                        }                   
                    ],
                    onShow: function (menu) {
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                    }
                };
                break;
            case 'TASK':
                menu = {
                    id: "menuTask",
                    items: [                        
                        {
                            id: "taskType",
                            text: "Task Type".translate(),
                            items: [
                                {
                                    id: "empty",
                                    text: "Empty Task".translate(),
                                    onClick: function (menuOption) {
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchTaskType('EMPTY');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "sendtask",
                                    text: "Send Task".translate(),
                                    onClick: function (menuOption) {
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchTaskType('SENDTASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "receivetask",
                                    text: "Receive Task".translate(),
                                    onClick: function (menuOption) {
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchTaskType('RECEIVETASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "usertask",
                                    text: "User Task".translate(),
                                    onClick: function (menuOption) {
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchTaskType('USERTASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "servicetask",
                                    text: "Service Task".translate(),
                                    onClick: function (menuOption) {
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchTaskType('SERVICETASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "scripttask",
                                    text: "Script Task".translate(),
                                    onClick: function (menuOption) {
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchTaskType('SCRIPTTASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "manualtask",
                                    text: "Manual Task".translate(),
                                    onClick: function (menuOption) {
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchTaskType('MANUALTASK');
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "businessrule",
                                    text: "Business Rule Task".translate(),
                                    onClick: function (menuOption) {
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchTaskType('BUSINESSRULE');
                                        PMDesigner.project.updateElement([]);
                                    }
                                }
                            ]
                        },
                         {
                            id: "loopType",
                            text: "Marker Type".translate(),
                            items: [
                                {
                                    id: "empty",
                                    text: "None".translate(),
                                    onClick: function (menuOption) {
                                        var targetElement = menuOption
                                            .getMenuTargetElement();
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchLoopType('EMPTY', targetElement);
                                        PMDesigner.project.updateElement([]);
                                        
                                    }
                                },
                                {
                                    id: "loop",
                                    text: "Loop".translate(),
                                    onClick: function (menuOption) {
                                        var targetElement = menuOption
                                            .getMenuTargetElement();
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchLoopType('LOOP', targetElement);
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "parallel",
                                    text: "Parallel".translate(),
                                    onClick: function (menuOption) {
                                        var targetElement = menuOption
                                            .getMenuTargetElement();
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchLoopType('PARALLEL', targetElement);
                                        PMDesigner.project.updateElement([]);
                                    }
                                },
                                {
                                    id: "sequential",
                                    text: "Sequential".translate(),
                                    onClick: function (menuOption) {
                                        var targetElement = menuOption
                                            .getMenuTargetElement();
                                        handlerMarkerType(menuOption);
                                        menuOption.parent.hide();
                                        menuOption.getMenuTargetElement().switchLoopType('SEQUENTIAL', targetElement);
                                        PMDesigner.project.updateElement([]);
                                    }
                                }
                            ]
                        },
                        {
                            id: "menuTaskSteps",
                            text: "Steps".translate(),
                            icon: "mafe-menu-task-steps",
                            onClick: function (menuOption) {
                                var splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                menuOption.parent.hide();
                                if ((splitedID && splitedID[0] === 'pmui') || PMDesigner.project.isDirty()) {
                                    PMDesigner.restApi.execute ({
                                        data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                        method: "update",
                                        url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                        success: function (data, textStatus, xhr) {
                                            PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                            PMDesigner.project.isSave = false;
                                            //open property form
                                            PMDesigner.act_name = menuOption.getMenuTargetElement().act_name;
                                            PMDesigner.act_uid = menuOption.getMenuTargetElement().act_uid;
                                            new StepsTask();

                                        },
                                        error: function (xhr, textStatus, errorThrown) {
                                            PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                            PMDesigner.project.isSave = false;
                                        }
                                    });
                                } else {
                                    PMDesigner.act_name = menuOption.getMenuTargetElement().act_name;
                                    PMDesigner.act_uid = menuOption.getMenuTargetElement().act_uid;
                                    new StepsTask();

                                }
                            }
                        },
                        {
                            id: "menuTaskAssignedRules",
                            text: "Assignment Rules".translate(),
                            icon: "mafe-menu-users-action",
                            onClick: function (menuOption) {
                                var splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                menuOption.parent.hide();
                                if ((splitedID && splitedID[0] === 'pmui') || PMDesigner.project.isDirty()) {
                                    PMDesigner.restApi.execute ({
                                        data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                        method: "update",
                                        url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                        success: function (data, textStatus, xhr) {
                                            PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                            PMDesigner.project.isSave = false;
                                            //open property form
                                            PMDesigner.assigmentRules(menuOption.getMenuTargetElement());
                                        },
                                        error: function (xhr, textStatus, errorThrown) {
                                            PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                            PMDesigner.project.isSave = false;
                                        }
                                    });
                                } else {
                                    PMDesigner.assigmentRules(menuOption.getMenuTargetElement());
                                }
                            }
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.parent.hide();

                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        //{
                        //    text: "Delete Routing Rule".translate(),
                        //    icon: "mafe-menu-delete-rules-action",
                        //    onClick: function (menuOption) {
                        //        PMDesigner.RoutingRuleDeleteAllFlow(menuOption.getMenuTargetElement());
                        //    }
                        //},
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                menuOption.parent.hide();

                                PMUI.getActiveCanvas().removeElements();
                            }
                        },
                        {
                            id: "menuTaskProperties",
                            text: "Properties".translate(), 
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                var splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                menuOption.parent.hide();
                                //TODO show activity property form
                                if ((splitedID && splitedID[0] === 'pmui') || PMDesigner.project.isDirty()) {
                                    PMDesigner.restApi.execute ({
                                        data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                        method: "update",
                                        url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                        success: function (data, textStatus, xhr) {
                                            PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                            PMDesigner.project.isSave = false;
                                            //open property form
                                            PMDesigner.activityProperties(menuOption.getMenuTargetElement());
                                        },
                                        error: function (xhr, textStatus, errorThrown) {
                                            PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                            PMDesigner.project.isSave = false;
                                        }
                                    });
                                } else {
                                    PMDesigner.activityProperties(menuOption.getMenuTargetElement());
                                }
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var targetElement = menu.getTargetElement();
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(targetElement);
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection
                                .hidePortsAndHandlers();
                        }
                        
                        if (targetElement.act_task_type == "SCRIPTTASK") {
                            menu.getItems()[1].setVisible(false);
                            menu.getItems()[2].setVisible(false);
                            menu.getItems()[3].setVisible(false);
                        } else {
                            menu.getItems()[1].setVisible(true);
                            menu.getItems()[2].setVisible(true);
                            menu.getItems()[3].setVisible(true);
                        }
                        
                        if (targetElement.act_task_type == "MANUALTASK" || targetElement.act_task_type == "USERTASK" || targetElement.act_task_type == "EMPTY") {
                            menu.getItems()[1].getItems()[2].setVisible(true);
                        } else {
                            menu.getItems()[1].getItems()[2].setVisible(false);
                        }
                    }
                };
                break;
            case 'SUB_PROCESS':
                menu = {
                    id: "menuSubProcess",
                    items: [
                        //{
                        //    text: "Open Diagram".translate(),
                        //    icon: "mafe-menu-delete-rules-action",
                        //    onClick: function (menuOption) {
                        //        //PMDesigner.RoutingRuleDeleteAllFlow(menuOption.getMenuTargetElement());
                        //        PMDesigner.project.subProcessDiagram(menuOption.getMenuTargetElement());
                        //    }
                        //},                        
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.parent.hide();

                                menuOption.getMenuTargetElement().label.canvas
                                    .hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete Routing Rule".translate(),
                            icon: "mafe-menu-delete-rules-action",
                            onClick: function (menuOption) {
                                var splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                menuOption.parent.hide();
                                if ((splitedID && splitedID[0] === 'pmui') || PMDesigner.project.isDirty()) {
                                    PMDesigner.restApi.execute ({
                                        data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                        method: "update",
                                        url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                        success: function (data, textStatus, xhr) {
                                            PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                            PMDesigner.project.isSave = false;
                                            //open property form
                                            PMDesigner.RoutingRuleDeleteAllFlow(menuOption.getMenuTargetElement());
                                        },
                                        error: function (xhr, textStatus, errorThrown) {
                                            PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                            PMDesigner.project.isSave = false;
                                        }
                                    });
                                } else {
                                    PMDesigner.RoutingRuleDeleteAllFlow(menuOption.getMenuTargetElement());
                                }
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                menuOption.parent.hide();

                                PMUI.getActiveCanvas().removeElements();
                            }
                        },
                        {
                            id: "menuSubProperties",
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                var splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                menuOption.parent.hide();
                                if ((splitedID && splitedID[0] === 'pmui') || PMDesigner.project.isDirty()) {
                                    PMDesigner.restApi.execute ({
                                        data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                        method: "update",
                                        url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                        success: function (data, textStatus, xhr) {
                                            PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                            PMDesigner.project.isSave = false;
                                            //open property form
                                            PMDesigner.propertiesSubProcess(menuOption
                                                .getMenuTargetElement(menuOption.getMenuTargetElement()));

                                        },
                                        error: function (xhr, textStatus, errorThrown) {
                                            PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                            PMDesigner.project.isSave = false;
                                        }
                                    });
                                } else {
                                    PMDesigner.propertiesSubProcess(menuOption
                                        .getMenuTargetElement(menuOption.getMenuTargetElement()));

                                }
                            }
                        }
                    ],
                    onShow: function (menu) {
                        /*PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas()
                            .addToSelection(menu.getTargetElement());
                        PMDesigner.project.save();
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection
                                .hidePortsAndHandlers();
                        }*/


                        var targetElement = menu.getTargetElement();
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(targetElement);
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection
                                .hidePortsAndHandlers();
                        }
                    }
                };
                break;
            case 'START':
                menu = {
                    id: 'menuStart',
                    items: [
                        startCatchMarker,
                        //{
                        //    id: "menuStartMessageProperties",
                        //    text: "Properties".translate(),
                        //    icon: "mafe-menu-start-message",
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        PMDesigner.startMessage.openForm();
                        //    }
                        //},
                        //{
                        //    id: "menuStartTimerProperties",
                        //    text: "Properties".translate(),
                        //    icon: "mafe-menu-start-timer",
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        PMDesigner.startTimer.openForm();
                        //    }
                        //},
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        },
                        {
                            id: "menuStartMessageView",
                            text: "Web Entry".translate(),
                            icon: "mafe-menu-start-message-view",
                            //visible: false,
                            onClick: function (menuOption) {
                                var splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                menuOption.parent.hide();
                                if ((splitedID && splitedID[0] === 'pmui') || PMDesigner.project.isDirty()) {
                                    PMDesigner.restApi.execute ({
                                        data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                        method: "update",
                                        url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                        success: function (data, textStatus, xhr) {
                                            PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                            PMDesigner.project.isSave = false;
                                            //open property form
                                            var webEntry = new WebEntry(menuOption.getMenuTargetElement());
                                        },
                                        error: function (xhr, textStatus, errorThrown) {
                                            PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                            PMDesigner.project.isSave = false;
                                        }
                                    });
                                } else {
                                    var webEntry = new WebEntry(menuOption.getMenuTargetElement());
                                }

                                //webEntry.BuildWebEntry();

                                //PMDesigner.startMessage(menuOption.getMenuTargetElement());
                                //PMDesigner.startMessage.viewForm();

                                //console.log('Web Entries');
                            }
                        }
                        //{
                        //    id: 'idReceiveMessage',
                        //    text: 'Properties Receive Message'.translate(),
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        var propertiesReceiveMessage = new PropertiesReceiveMessage(menuOption);
                        //        propertiesReceiveMessage.open();
                        //    }
                        //}
                        ,
                        {
                            id: "menuStartMessageView",
                            text: "Properties".translate(),
                            icon: "mafe-menu-start-message-view",
                            onClick: function (menuOption) {
                                var a = menuOption.getMenuTargetElement(),
                                    splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                switch(a.getEventMarker()) {
                                    case "TIMER":
                                        menuOption.parent.hide();
                                        if (splitedID
                                            && splitedID[0] === 'pmui') {
                                            PMDesigner.restApi.execute ({
                                                data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                                method: "update",
                                                url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                                success: function (data, textStatus, xhr) {
                                                    PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                                    PMDesigner.project.isSave = false;
                                                    //open property form
                                                    PMDesigner.timerEventProperties(menuOption.getMenuTargetElement());
                                                },
                                                error: function (xhr, textStatus, errorThrown) {
                                                    PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                                    PMDesigner.project.isSave = false;
                                                }
                                            });
                                        } else {
                                            PMDesigner.timerEventProperties(menuOption.getMenuTargetElement());
                                        }
                                    break;
                                    default :  
                                        var messageEventDefinition,
                                        eventCurrent =menuOption.getMenuTargetElement();
                                        if(menuMessages[eventCurrent.evn_type][eventCurrent.evn_marker] !== undefined){
                                            var message_window = new PMUI.ui.MessageWindow({
                                                id: "cancelMessageTriggers",
                                                width : 490,
                                                title: 'Information'.translate(),
                                                windowMessageType : 'info',
                                                bodyHeight : 'auto',
                                                message: menuMessages[eventCurrent.evn_type][eventCurrent.evn_marker],
                                                footerItems : [
                                                    {
                                                        text:'Ok'.translate(),
                                                        handler :function() {
                                                            message_window.close();
                                                        },
        												buttonType : "success"
                                                    }
                                                ]
                                            });
                                            message_window.open();
                                            message_window.showFooter();
                                        }else{
                                            menuOption.parent.hide();
                                            if (splitedID
                                                && splitedID[0] === 'pmui') {
                                                PMDesigner.restApi.execute ({
                                                    data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                                    method: "update",
                                                    url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                                    success: function (data, textStatus, xhr) {
                                                        PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                                        PMDesigner.project.isSave = false;
                                                        //open property form
                                                        messageEventDefinition = new MessageEventDefinition(eventCurrent);
                                                    },
                                                    error: function (xhr, textStatus, errorThrown) {
                                                        PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                                        PMDesigner.project.isSave = false;
                                                    }
                                                });
                                            } else {
                                                messageEventDefinition = new MessageEventDefinition(eventCurrent);
                                            }
                                        }    
                                }
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var targetElement = menu.getTargetElement(), activity,flow;
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(targetElement);
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        //if (targetElement.evn_marker == 'MESSAGE') {
                        //targetElement.menu.getItems()[0].setVisible(true);
                        //targetElement.menu.getItems()[1].setVisible(true);
                        //targetElement.menu.getItems()[0].disable();
                        //targetElement.menu.getItems()[1].disable();
                        //var validate = PMDesigner.startMessage.validate(targetElement);
                        //if (validate[0]) {
                        //    if (validate[1]) {
                        //        targetElement.menu.getItems()[0].enable();
                        //    }
                        //    targetElement.menu.getItems()[1].enable();
                        //}
                        //}
                        if (targetElement.evn_marker == 'TIMER') {
                            //targetElement.menu.getItems()[3].setVisible(true);
                            //targetElement.menu.getItems()[3].disable();
                            //if (PMDesigner.startTimer.validate(targetElement)) {
                            //    targetElement.menu.getItems()[3].enable();
                            //}
                        }
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        if (targetElement.evn_marker === 'MESSAGECATCH') {
                            var dt = menu.getItems();
                            for (var i = 0; i < dt.length; i++) {
                                if (dt[i].id === 'idReceiveMessage') {
                                    dt[i].setVisible(true);
                                }
                            }
                        }
                        //disabled weebentry for others pmEvent no support
                        if (targetElement.getPorts().asArray().length){
                            activity = targetElement.getPorts().asArray()[0].connection.destPort.parent;
                            if (activity && (activity instanceof PMActivity) && targetElement.evn_marker === "EMPTY"){
                                menu.getItems()[3].enable();
                            }else{
                                menu.getItems()[3].disable();
                            }
                        }else{
                            menu.getItems()[3].disable();
                        }

                        //Enable && Disabled - Properties
                        if (targetElement.evn_type == "START" && (targetElement.evn_marker == "MESSAGECATCH" || targetElement.evn_marker == "TIMER" || targetElement.evn_marker == "CONDITIONAL" || targetElement.evn_marker == "SIGNALCATCH")) {
                            menu.getItems()[4].enable();
                        } else {
                            menu.getItems()[4].disable();
                        }
                    },
                    onHide: function (menu) {
                        var dt = menu.getItems();
                        for (var i = 0; i < dt.length; i++) {
                            if (dt[i].id === 'idReceiveMessage') {
                                dt[i].setVisible(false);
                            }
                        }
                    }
                };
                break;
            case 'END':
                menu = {
                    id: 'menuEnd',
                    items: [
                        endMarker,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        },
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                var a = menuOption.getMenuTargetElement(),
                                splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                switch(a.getEventMarker()) {
                                    case "EMAIL":
                                        menuOption.parent.hide();
                                        if (splitedID
                                            && splitedID[0] === 'pmui') {
                                            PMDesigner.restApi.execute ({
                                                data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                                method: "update",
                                                url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                                success: function (data, textStatus, xhr) {
                                                    PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                                    PMDesigner.project.isSave = false;
                                                    //open property form
                                                    PMDesigner.emailEventProperties(menuOption.getMenuTargetElement());
                                                },
                                                error: function (xhr, textStatus, errorThrown) {
                                                    PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                                    PMDesigner.project.isSave = false;
                                                }
                                            });
                                        } else {
                                            PMDesigner.emailEventProperties(menuOption.getMenuTargetElement());
                                        }
                                    break;
                                    default :  
                                        var messageEventDefinition,
                                        eventCurrent =menuOption.getMenuTargetElement();
                                        if(menuMessages[eventCurrent.evn_type][eventCurrent.evn_marker] !== undefined){
                                            var message_window = new PMUI.ui.MessageWindow({
                                                id: "cancelMessageTriggers",
                                                width : 490,
                                                title: 'Information'.translate(),
                                                windowMessageType : 'info',
                                                bodyHeight : 'auto',
                                                message: menuMessages[eventCurrent.evn_type][eventCurrent.evn_marker],
                                                footerItems : [
                                                    {
                                                        text:'Ok'.translate(),
                                                        handler :function() {
                                                            message_window.close();
                                                        },
    													buttonType : "success"
                                                    }
                                                ]
                                            });
                                            message_window.open();
                                            message_window.showFooter();
                                        }else{
                                            if (splitedID
                                                && splitedID[0] === 'pmui') {
                                                PMDesigner.restApi.execute ({
                                                    data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                                    method: "update",
                                                    url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                                    success: function (data, textStatus, xhr) {
                                                        PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                                        PMDesigner.project.isSave = false;
                                                        //open property form
                                                        messageEventDefinition = new MessageEventDefinition(eventCurrent);
                                                    },
                                                    error: function (xhr, textStatus, errorThrown) {
                                                        PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                                        PMDesigner.project.isSave = false;
                                                    }
                                                });
                                            } else {
                                                messageEventDefinition = new MessageEventDefinition(eventCurrent);
                                            }
                                        }   
                                }
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }

                        //Enable && Disabled - Properties
                        var targetElement = menu.getTargetElement();

                        if (targetElement.evn_type == "END" && (targetElement.evn_marker == "MESSAGETHROW" || targetElement.evn_marker == "ERRORTHROW" || targetElement.evn_marker == "SIGNALTHROW" || targetElement.evn_marker == "TERMINATETHROW" || targetElement.evn_marker == "EMAIL")) {
                            menu.getItems()[3].enable();
                        } else {
                            menu.getItems()[3].disable();
                        }
                    }
                };
                break;
            case 'SELECTION':
                menu = {
                    id: 'menuSelection',
                    items: [
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action"
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action"
                        }
                    ]
                };
                break;
            case 'EVALUATION':
                menu = {
                    id: 'menuEvaluation',
                    items: [
                        
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                alert("Working on this feature...");
                            }
                        },
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                alert("Working on this feature...");
                            }
                        }
                    ]
                };
                break;
            case 'PARALLEL':
                menu = {
                    id: 'menuParallel',
                    items: [
                        //{
                        //    text: 'Turn into divergent'.translate(),
                        //    icon: 'mafe-menu-properties-action',
                        //    id: "divergent",
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        elementActivite.gat_direction = "DIVERGING"
                        //        PMDesigner.project.dirty = true;
                        //    }
                        //},
                        //{
                        //    text: 'Turn into convergent'.translate(),
                        //    icon: 'mafe-menu-properties-action',
                        //    id: "convergent",
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        elementActivite.gat_direction = "CONVERGING"
                        //        PMDesigner.project.dirty = true;
                        //    }
                        //},
                        direction,
                        typeMenu,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    listeners: {
//                    rightClick: function (element, event) {
//                        elementActivite = element;
//                        PMDesigner.canvas.emptyCurrentSelection();
//                        PMDesigner.canvas.addToSelection(element);
//
//                        ////////----///////
//
//                        var itemDivergent = elementActivite.menu.getItems()[0];
//                        var itemConvergent = elementActivite.menu.getItems()[1];
//
//                        if (elementActivite.gat_direction == "DIVERGING") {
//                            if (elementActivite.ports.asArray().length > 2) {
//                                var contDivergent = 0;
//                                for (i = 0; i < elementActivite.ports.asArray().length; i++) {
//                                    if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnActivity") {
//                                        contDivergent++;
//                                    }
//                                }
//                                if (contDivergent > 1) {
//                                    elementActivite.gat_direction = "CONVERGING";
//                                    PMDesigner.project.dirty = true;
//                                } else {
//                                    itemConvergent.disable();
//                                }
//                            }
//                            if (elementActivite.ports.asArray().length == 2) {
//                                var cont = 0;
//                                for (i = 0; i < 2; i++) {
//                                    if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnGateway") {
//                                        cont++;
//                                    }
//                                }
//                                if (cont == 2) {
//                                    itemConvergent.disable();
//                                } else if (cont == 1) {
//                                    itemConvergent.enable();
//                                } else if (cont == 0) {
//                                    elementActivite.gat_direction = "CONVERGING";
//                                    PMDesigner.project.dirty = true;
//                                }
//                            }
//
//                            itemDivergent.setVisible(false);
//                            itemConvergent.setVisible(true);
//                        }
//
//                        if (elementActivite.gat_direction == "CONVERGING") {
//                            if (elementActivite.ports.asArray().length > 2) {
//                                var contConvergent = 0;
//                                for (i = 0; i < elementActivite.ports.asArray().length; i++) {
//                                    if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnGateway") {
//                                        contConvergent++;
//                                    }
//                                }
//                                if (contConvergent > 1) {
//                                    elementActivite.gat_direction = "DIVERGING";
//                                    PMDesigner.project.dirty = true;
//                                } else {
//                                    itemDivergent.disable();
//                                }
//                            }
//                            if (elementActivite.ports.asArray().length == 2) {
//                                var cont = 0;
//                                for (i = 0; i < 2; i++) {
//                                    if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnActivity") {
//                                        cont++;
//                                    }
//                                }
//                                if (cont == 2) {
//                                    itemDivergent.disable();
//                                } else if (cont == 1) {
//                                    itemDivergent.enable();
//                                } else if (cont == 0) {
//                                    elementActivite.gat_direction = "DIVERGING";
//                                    PMDesigner.project.dirty = true;
//                                }
//                            }
//
//                            itemDivergent.setVisible(true);
//                            itemConvergent.setVisible(false);
//                        }
//                    }
                    },
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                    }
                };
                break;
//        case 'PARALLEL_EVALUATION':
//            menu = {
//                id: 'menuParallelEvaluation',
//                items: [
//                    {
//                        text: "Properties".translate(),
//                        icon: "mafe-menu-properties-action",
//                        onClick: function (menuOption) {
//                            alert("Working on this feature...");
//                        }
//                    },
//                    {
//                        text: "Edit Label".translate(),
//                        icon: "mafe-menu-edit-label-action",
//                        onClick: function (menuOption) {
//                            menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
//                            menuOption.getMenuTargetElement().label.getFocus();
//                        }
//                    },
//                    {
//                        text: "Delete".translate(),
//                        icon: "mafe-menu-delete-action",
//                        onClick: function (menuOption) {
//                            alert("Working on this feature...");
//                        }
//                    }
//                ]
//            };
//            break;
//        case 'PARALLEL_JOIN':
//            menu = {
//                id: 'menuParallelJoin',
//                items: [
//                    {
//                        text: "Properties".translate(),
//                        icon: "mafe-menu-properties-action"
//                    },
//                    {
//                        text: "Delete Event".translate(),
//                        icon: "mafe-menu-delete-action"
//                    }
//                ]
//            };
//            break;
            case 'EXCLUSIVE':
            case 'EVENTBASED':
            case 'EXCLUSIVEEVENTBASED':
            case 'PARALLELEVENTBASED':
                menu = {
                    id: 'menuExclusive',
                    items: [
                        direction,
                        typeMenu,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: "Delete".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        },
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                PMDesigner.RoutingRule(menuOption.getMenuTargetElement());
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var element = menu.getTargetElement(), propertyOption;
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(element);
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        if(menu.items){
                            if(element && element.gat_direction) {
                                propertyOption = menu.items.find("text","Properties");
                                if (propertyOption){
                                    if (element.gat_direction === 'CONVERGING') {
                                        propertyOption.disable();
                                    } else {
                                        propertyOption.enable();

                                    }
                                }
                            }
                        }

                    }
                };
                break;
            case 'INCLUSIVE':
                menu = {
                    id: 'menuInclusive',
                    items: [
                        //{
                        //    text: 'Turn Into Divergent'.translate(),
                        //    icon: 'mafe-menu-properties-action',
                        //    id: "divergent",
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        elementActivite.gat_direction = "DIVERGING";
                        //        PMDesigner.project.dirty = true;
                        //    }
                        //},
                        //{
                        //    text: 'Turn Into Convergent'.translate(),
                        //    icon: 'mafe-menu-properties-action',
                        //    id: "convergent",
                        //    visible: false,
                        //    onClick: function (menuOption) {
                        //        elementActivite.gat_direction = "CONVERGING";
                        //        PMDesigner.project.dirty = true;
                        //    }
                        //},
                        direction,
                        typeMenu,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        },
                        {
                            text: 'Properties'.translate(),
                            icon: 'mafe-menu-properties-action',
                            onClick: function (menuOption) {
                                PMDesigner.RoutingRule(menuOption.getMenuTargetElement());
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var element = menu.getTargetElement(), propertyOption;
                        PMUI.getActiveCanvas().addToSelection(element);
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();

                        if(menu.items){
                            if(element && element.gat_direction) {
                                propertyOption = menu.items.find("text","Properties");
                                if (propertyOption){
                                    if (element.gat_direction === 'CONVERGING') {
                                        propertyOption.disable();
                                    } else {
                                        propertyOption.enable();

                                    }
                                }
                            }
                        }

//                    PMDesigner.canvas.emptyCurrentSelection();
//                    PMDesigner.canvas.addToSelection(elementActivite);
//
//                    ////////----///////
//
//                    var itemDivergent = elementActivite.menu.getItems()[1];
//                    var itemConvergent = elementActivite.menu.getItems()[2];
//
//                    if (elementActivite.gat_direction == "DIVERGING") {
//                        elementActivite.menu.getItems()[2].setVisible(true);
//                        if (elementActivite.ports.asArray().length > 2) {
//                            var contDivergent = 0;
//                            for (i = 0; i < elementActivite.ports.asArray().length; i++) {
//                                if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnActivity") {
//                                    contDivergent++;
//                                }
//                            }
//                            if (contDivergent > 1) {
//                                elementActivite.gat_direction = "CONVERGING";
//                                PMDesigner.project.dirty = true;
//                            } else {
//                                itemConvergent.disable();
//                            }
//                        }
//                        if (elementActivite.ports.asArray().length == 2) {
//                            var cont = 0;
//                            for (i = 0; i < 2; i++) {
//                                if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnGateway") {
//                                    cont++;
//                                }
//                            }
//                            if (cont == 2) {
//                                itemConvergent.disable();
//                            } else if (cont == 1) {
//                                itemConvergent.enable();
//                            } else if (cont == 0) {
//                                elementActivite.gat_direction = "CONVERGING";
//                                PMDesigner.project.dirty = true;
//                            }
//                        }
//                        if (elementActivite.ports.asArray().length == 1 && elementActivite.ports.asArray()[0].connection.flo_element_origin_type == "bpmnGateway") {
//                            itemConvergent.enable();
//                        }
//
//                        itemDivergent.setVisible(false);
//                        itemConvergent.setVisible(false);
//                    }
//
//                    if (elementActivite.gat_direction == "CONVERGING") {
//                        elementActivite.menu.getItems()[2].setVisible(false);
//                        if (elementActivite.ports.asArray().length > 2) {
//                            var contConvergent = 0;
//                            for (i = 0; i < elementActivite.ports.asArray().length; i++) {
//                                if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnGateway") {
//                                    contConvergent++;
//                                }
//                            }
//                            if (contConvergent > 1) {
//                                elementActivite.gat_direction = "DIVERGING";
//                                PMDesigner.project.dirty = true;
//                            } else {
//                                itemDivergent.disable();
//                            }
//                        }
//                        if (elementActivite.ports.asArray().length == 2) {
//                            var cont = 0;
//                            for (i = 0; i < 2; i++) {
//                                if (elementActivite.ports.asArray()[i].connection.flo_element_origin_type == "bpmnActivity") {
//                                    cont++;
//                                }
//                            }
//                            if (cont == 2) {
//                                itemDivergent.disable();
//                            } else if (cont == 1) {
//                                itemDivergent.enable();
//                            } else if (cont == 0) {
//                                elementActivite.gat_direction = "DIVERGING";
//                                PMDesigner.project.dirty = true;
//                            }
//                        }
//                        if (elementActivite.ports.asArray().length == 1 && elementActivite.ports.asArray()[0].connection.flo_element_origin_type == "bpmnActivity") {
//                            itemDivergent.enable();
//                        }
//
//                        itemDivergent.setVisible(true);
//                        itemConvergent.setVisible(false);
//                    }
//                    PMDesigner.canvas.hideDragConnectHandlers();
//                    PMDesigner.canvas.hideAllFocusLabels();
//                    if (PMDesigner.canvas.currentConnection) {
//                        PMDesigner.canvas.currentConnection.hidePortsAndHandlers();
//                    }
                    }
                };
                break;
            case 'COMPLEX':
                menu = {
                    id: 'menuComplex',
                    items: [                        
                        typeMenu,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        },
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-properties-action",
                            onClick: function (menuOption) {
                                PMDesigner.complexRoutingRule(menuOption.getMenuTargetElement());
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'VERTICAL_LINE':
            case 'HORIZONTAL_LINE':
            case 'GROUP':
            case 'LANE':
                menu = {
                    id: 'menuLine',
                    items: [
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'DATAOBJECT':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        {
                            id: "dataType",
                            text: "Data Type".translate(),
                            items: [
                                {
                                    id:"dataobject",
                                    text: "Data Empty".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchDataType('DATAOBJECT');
                                    }
                                },
                                {
                                    id:"datainput",
                                    text: "Data Input".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchDataType('DATAINPUT');
                                    }
                                },
                                {
                                    id:"dataoutput",
                                    text: "Data Output".translate(),
                                    onClick: function (menuOption) {
                                        //alert("Working on this feature...".translate());
                                        //console.log(menuOption.getMenuTargetElement());
                                        menuOption.getMenuTargetElement().switchDataType('DATAOUTPUT');
                                    }
                                }
                            ]
                        },
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;

            case 'DATASTORE':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'TEXT_ANNOTATION':
            case 'V_LABEL':
            case 'H_LABEL':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
            case 'INTERMEDIATE':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        intermediateCatchMarker,
                        intermediateThrowMarker,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        },
                        {
                            text: "Properties".translate(),
                            icon: "mafe-menu-delete-action",
                            onClick: function (menuOption) {
                                var a = menuOption.getMenuTargetElement(),
                                    splitedID = menuOption.getMenuTargetElement().getID().split("-");
                                switch(a.getEventMarker()) {
                                    case "EMAIL":
                                        menuOption.parent.hide();
                                        if (splitedID
                                            && splitedID[0] === 'pmui') {
                                            PMDesigner.restApi.execute ({
                                                data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                                method: "update",
                                                url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                                success: function (data, textStatus, xhr) {
                                                    PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                                    PMDesigner.project.isSave = false;
                                                    //open property form
                                                    PMDesigner.emailEventProperties(menuOption.getMenuTargetElement());
                                                },
                                                error: function (xhr, textStatus, errorThrown) {
                                                    PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                                    PMDesigner.project.isSave = false;
                                                }
                                            });
                                        } else {
                                            PMDesigner.emailEventProperties(menuOption.getMenuTargetElement());
                                        }
                                    break;
                                    case "TIMER":
                                        menuOption.parent.hide();
                                        if (splitedID
                                            && splitedID[0] === 'pmui') {
                                            PMDesigner.restApi.execute ({
                                                data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                                method: "update",
                                                url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                                success: function (data, textStatus, xhr) {
                                                    PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                                    PMDesigner.project.isSave = false;
                                                    //open property form
                                                    PMDesigner.timerEventProperties(menuOption.getMenuTargetElement());
                                                },
                                                error: function (xhr, textStatus, errorThrown) {
                                                    PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                                    PMDesigner.project.isSave = false;
                                                }
                                            });
                                        } else {
                                            PMDesigner.timerEventProperties(menuOption.getMenuTargetElement());
                                        }
                                    break;
                                    default :  
                                        var messageEventDefinition,
                                        eventCurrent =menuOption.getMenuTargetElement();
                                        if(menuMessages[eventCurrent.evn_type][eventCurrent.evn_behavior][eventCurrent.evn_marker] !== undefined){
                                            var message_window = new PMUI.ui.MessageWindow({
                                                id: "cancelMessageTriggers",
                                                width : 490,
                                                title: 'Information'.translate(),
                                                windowMessageType : 'info',
                                                bodyHeight : 'auto',
                                                message: menuMessages[eventCurrent.evn_type][eventCurrent.evn_behavior][eventCurrent.evn_marker],
                                                footerItems : [
                                                    {
                                                        text:'Ok'.translate(),
                                                        handler :function() {
                                                            message_window.close();
                                                        },
        												buttonType : "success"
                                                    }
                                                ]
                                            });
                                            message_window.open();
                                            message_window.showFooter();
                                        }else{
                                            menuOption.parent.hide();
                                            if (splitedID
                                                && splitedID[0] === 'pmui') {
                                                PMDesigner.restApi.execute ({
                                                    data:  JSON.stringify(PMDesigner.project.getDirtyObject()),
                                                    method: "update",
                                                    url: HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE + "/project/" + PMDesigner.project.id,
                                                    success: function (data, textStatus, xhr) {
                                                        PMDesigner.project.listeners.success(PMDesigner.project, textStatus, data);
                                                        PMDesigner.project.isSave = false;
                                                        //open property form
                                                        messageEventDefinition = new MessageEventDefinition(eventCurrent);
                                                    },
                                                    error: function (xhr, textStatus, errorThrown) {
                                                        PMDesigner.project.listeners.failure(that, textStatus, xhr);
                                                        PMDesigner.project.isSave = false;
                                                    }
                                                });
                                            } else {
                                                messageEventDefinition = new MessageEventDefinition(eventCurrent);
                                            }
                                        }    
                                }

                            }
                        }
                    ],
                    onShow: function (menu) {
                        var targetElement = menu.getTargetElement();

                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();

                        if (targetElement.evn_behavior === 'CATCH') {
                            targetElement.menu.getItems()[0].setVisible(true);
                            targetElement.menu.getItems()[1].setVisible(false);
                        } else {
                            targetElement.menu.getItems()[0].setVisible(false);
                            targetElement.menu.getItems()[1].setVisible(true);
                        }

                        //Enable && Disabled - Properties
                        if ((targetElement.evn_type == "INTERMEDIATE" && targetElement.evn_marker == "MESSAGECATCH") ||  (targetElement.evn_type == "INTERMEDIATE" && targetElement.evn_marker == "MESSAGETHROW") ||  (targetElement.evn_type == "INTERMEDIATE" && targetElement.evn_marker == "EMAIL")) {
                            menu.getItems()[3].enable();
                        } else {
                            menu.getItems()[3].disable();
                        }
                    }
                };
                break;
            case 'BOUNDARY':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        boundaryCatchMarker,
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        var targetElement = menu.getTargetElement();

                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();

                    }
                };
                break;
            case 'PARTICIPANT':
            case 'POOL':
            case 'LANE':
                menu = {
                    id: 'menuDataObject',
                    items: [
                        {
                            text: "Edit Label".translate(),
                            icon: "mafe-menu-edit-label-action",
                            onClick: function (menuOption) {
                                menuOption.getMenuTargetElement().label.canvas.hideAllFocusLabels();
                                menuOption.getMenuTargetElement().label.getFocus();
                            }
                        },
                        {
                            text: 'Delete'.translate(),
                            icon: 'mafe-menu-delete-action',
                            onClick: function (menuOption) {
                                PMUI.getActiveCanvas().removeElements();
                            }
                        }
                    ],
                    onShow: function (menu) {
                        PMUI.getActiveCanvas().emptyCurrentSelection();
                        PMUI.getActiveCanvas().addToSelection(menu.getTargetElement());
                        if (PMUI.getActiveCanvas().currentConnection) {
                            PMUI.getActiveCanvas().currentConnection.hidePortsAndHandlers();
                        }
                        PMUI.getActiveCanvas().hideDragConnectHandlers();
                        PMUI.getActiveCanvas().hideAllFocusLabels();
                    }
                };
                break;
        }
        return menu;
    };
    
    function handlerMarkerType(menuOption){
        if(menuOption.getMenuTargetElement().act_loop_type == "PARALLEL")
        {
            var taskType = menuOption.getMenuTargetElement().act_task_type;
            var loopType = menuOption.id;
            var message_window = new PMUI.ui.MessageWindow({
                id: "handlerMarkerType",
                width : 490,
                title: 'Parallel Marker Type'.translate(),
                windowMessageType : 'warning',
                bodyHeight : 'auto',
                message: "The configuring of multiple instances will be lost".translate(),
                footerItems : [
                    {
                        text:'Cancel'.translate(),
                        handler :function() {
                            menuOption.getMenuTargetElement().switchLoopType('PARALLEL');
                            PMDesigner.project.updateElement([]);
                            menuOption.getMenuTargetElement().switchTaskType(taskType);
                            PMDesigner.project.updateElement([]);
                            message_window.close();
                            return;
                        },
						buttonType : "error"
                    },
                    {
                        text:'Continue'.translate(),
                        handler :function() {
                            try{
                                if(loopType == "loop" || loopType == "sequential" ) {
                                    menuOption.getMenuTargetElement().switchLoopType(loopType.toUpperCase());    
                                } else {
                                    menuOption.getMenuTargetElement().switchLoopType('EMPTY');
                                }
                                PMDesigner.project.updateElement([]);
                                message_window.close();
                            }catch(e){
                                message_window.close();
                            }
                            return;
                        },
						buttonType : "success"
                    }
                    
                ]
            });
            message_window.open();
            message_window.showFooter();
        }
    }
  
}());

(function () {
    PMDesigner.shapeFactory = function (type, options) {
        var customshape = null,
                menuShape,
                defaultOptions = null,
                canvasName,
                name,
                id,
                classEvent = "start",
                pmCanvas = this.canvas,
                corona,
                taskCorona,
                gatewayCorona,
                endCorona,
                settingActCorona,
                intermediateCorona,
                deleteCorona,
                settingSubCorona,
                wildcard;

        canvasName = new IncrementNameCanvas(pmCanvas);
        name = canvasName.get(type);

        if (typeof options === 'undefined') {
            options = {};
            if (type === 'START_MESSAGE') {
                type = 'START';
                classEvent = "message";
                options.evn_marker = 'MESSAGECATCH';
            }
            if (type === 'START_TIMER') {
                type = 'START';
                classEvent = "timer";
                options.evn_marker = 'TIMER';
            }

            if (type === 'END_MESSAGE') {
                type = 'END';
                classEvent = "message";
                options.evn_marker = 'MESSAGETHROW';
            }
            if (type === 'END_EMAIL') {
                type = 'END';
                classEvent = "email";
                options.evn_marker = 'EMAIL';
                options.evn_behavior = 'THROW';
            }
            if (type === 'INTERMEDIATE_SENDMESSAGE') {
                type = 'INTERMEDIATE';
                classEvent = "sendmessage";
                options.evn_marker = 'MESSAGETHROW';
                options.evn_behavior = 'THROW';
            }
            if (type === 'INTERMEDIATE_RECEIVEMESSAGE') {
                type = 'INTERMEDIATE';
                classEvent = "receivemessage";
                options.evn_marker = 'MESSAGECATCH';
                options.evn_behavior = 'CATCH';
            }
            if (type === 'INTERMEDIATE_EMAIL') {
                type = 'INTERMEDIATE';
                classEvent = "email";
                options.evn_marker = 'EMAIL';
                options.evn_behavior = 'THROW';
            }
            if (type === 'INTERMEDIATE_TIMER') {
                type = 'INTERMEDIATE';
                classEvent = "timer";
                options.evn_marker = 'TIMER';
            }
            if (type === 'BOUNDARY_EVENT') {
                type = 'BOUNDARY';
                classEvent = "receivemessage";
                //options.evn_marker = 'MESSAGECATCH';
                options.evn_marker = 'EMPTY';
                options.evn_behavior = 'CATCH';
            }

            switch (type) {
            case 'COMPLEX':
            case 'PARALLEL':
            case 'EXCLUSIVE':
            case 'EVENTBASED':
            case 'EXCLUSIVEEVENTBASED':
            case 'PARALLELEVENTBASED':
            case 'INCLUSIVE':
                options.gat_type = type;
                break;
            }
        }
        if (type === 'DATAOBJECT') {
            type = 'DATAOBJECT';
            options.dat_object_type  = 'dataobject';
        }
        if (type === 'DATAINPUT') {
            type = 'DATAOBJECT';
            options.dat_object_type  = 'datainput';
        }
        if (type === 'DATAOUTPUT') {
            type = 'DATAOBJECT';
            options.dat_object_type  = 'dataoutput';
        }
        taskCorona = {
            name: 'Task'.translate(),
            className: 'mafe-corona-task',
            onClick:  function (item) {
                item.parent.hide();
                //item.parent.parent.canvas.hideAllFocusedLabels();
            },
            onMouseDown: function (item) {
                item.canvas.canCreateShape = true;
                item.canvas.canCreateShapeType = 'TASK';
                item.canvas.canCreateShapeClass = 'mafe-toolbar-task';
                item.canvas.connectStartShape = item.parent.parent;
            },
            column: 0
        };
        gatewayCorona =  {
            name: 'Gateway'.translate(),
            className: 'mafe-corona-gateway-exclusive',
            onClick:  function (item) {
                item.parent.hide();
                //item.parent.parent.canvas.hideAllFocusedLabels();
            },
            onMouseDown: function (item) {
                item.canvas.canCreateShape = true;
                item.canvas.canCreateShapeType = 'EXCLUSIVE';
                item.canvas.canCreateShapeClass = 'mafe-toolbar-gateway-exclusive';
                item.canvas.connectStartShape = item.parent.parent;
            },
            column: 1
        };
        intermediateCorona =  {
            name: 'Intermediate'.translate(),
            className: 'mafe-corona-intermediate',
            onClick:  function (item) {
                item.parent.hide();
                //item.parent.parent.canvas.hideAllFocusedLabels();
            },
            onMouseDown: function (item) {
                item.canvas.canCreateShape = true;
                item.canvas.canCreateShapeType = 'INTERMEDIATE_SENDMESSAGE';
                item.canvas.canCreateShapeClass = 'mafe-toolbar-intermediate-send-mesage';
                item.canvas.connectStartShape = item.parent.parent;
            },
            column: 0
        };
        endCorona =  {
            name: 'End'.translate(),
            className: 'mafe-corona-end',
            onClick:  function (item) {
                item.parent.hide();
                //item.parent.parent.canvas.hideAllFocusedLabels();
            },
            onMouseDown: function (item) {
                item.canvas.canCreateShape = true;
                item.canvas.canCreateShapeType = 'END';
                item.canvas.canCreateShapeClass = 'mafe-toolbar-end';
                item.canvas.connectStartShape = item.parent.parent;
            },
            column: 0
        };
        settingActCorona = {
            name: 'Properties'.translate(),
            className: 'mafe-corona-settings',
            onClick: function (item) {
                PMDesigner.activityProperties(item.parent.parent);
            },
            column: 2
        };
        settingSubCorona = {
            name: 'Properties'.translate(),
            className: 'mafe-corona-settings',
            onClick: function (item) {
                PMDesigner.propertiesSubProcess(item.parent.parent);
            },
            column: 2
        };
        deleteCorona =  {
            name: 'Delete'.translate(),
            className: 'mafe-corona-delete',
            onClick:  function (item) {
                PMUI.getActiveCanvas().removeElements();
            },
            column: 2
        };

        corona = [
            {
                name: 'Connect'.translate(),
                className: 'mafe-corona-flow',
                onClick:  function (item) {
                    item.parent.hide();
                    item.parent.parent.canvas.hideAllFocusedLabels();
                },
                onMouseDown: function (item) {
                    item.canvas.canConnect = true;
                    item.canvas.connectStartShape = item.parent.parent;
                },
                column: 1
            }
        ];

        wildcard = [
            {
                name: 'wildcard'.translate(),
                className: 'mafe-wildcard',
                onClick: null,
                column: 2
            }
        ];

        switch (type) {
        case 'START':
            corona.push(taskCorona);
            corona.push(intermediateCorona);
            corona.push(gatewayCorona);
            corona.push(deleteCorona);

            break;
        case 'TASK':
            corona.push(taskCorona);
            corona.push(intermediateCorona);
            corona.push(endCorona);
            corona.push(gatewayCorona);
            corona.push(settingActCorona);
            corona.push(deleteCorona);
            break;
        case 'SUB_PROCESS':
            corona.push(taskCorona);
            corona.push(intermediateCorona);
            corona.push(endCorona);
            corona.push(gatewayCorona);
            corona.push(settingSubCorona);
            corona.push(deleteCorona);
            break;
        case 'EXCLUSIVE':
        case 'PARALLEL':
        case 'INCLUSIVE':
            corona.push(taskCorona);
            corona.push(gatewayCorona);
            corona.push(endCorona);
            corona.push(deleteCorona);
            break;
        case 'INTERMEDIATE':
            corona.push(taskCorona);
            corona.push(gatewayCorona);
            corona.push(endCorona);
            corona.push(deleteCorona);
            break;
        case 'END':
        case 'DATAOBJECT':
        case 'DATASTORE':
        case 'PARTICIPANT':
        case 'TEXT_ANNOTATION':
            corona[0].column = 0;
            corona.push(deleteCorona);
            corona[1].column = 1;
            corona.push(wildcard);
            corona[2].column = 2;
            break;
        case 'POOL':
            var auxWilcard = {};
            corona[0] = deleteCorona;
            corona[0].column = 0;
            corona.push(wildcard);
            corona[1].column = 1;
            auxWilcard = $.extend(true, auxWilcard, wildcard);
            corona.push(auxWilcard);
            corona[2].column = 2;
            break;
        }

        switch (type) {
        case 'TASK':
            defaultOptions = {
                canvas: pmCanvas,
                width: 150,
                height: 75,
                act_type: 'TASK',
                act_name: name,
                act_task_type: 'EMPTY',
                act_loop_type: 'EMPTY',
                minHeight: 30,
                minWidth: 150,
                maxHeight: 50,
                maxWidth: 170,
                container: "activity",
                labels: [
                    {
                        message: name,
                        width: 0,
                        height: 0,
                        position: {
                            location: 'center',
                            diffX: 0,
                            diffY: 0
                        },
                        attachEvents: false
                        //updateParent: false
                    }
                ],
                //style: {
                //    cssClasses: ['mafe-activity-task']
                //},
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-activity-task'
                            ]
                        }
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }

                ],
                connectAtMiddlePoints: true,
                //drag: 'customshapedrag',
                //drag: 'nodrag',
                resizeBehavior: 'activityResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection',
                "drop": {
                    type: "pmactivitydrop",
                    selectors: [
                        "#BOUNDARY_EVENT",
                        ".mafe-event-boundary",
                        ".dragConnectHandler"
                    ]
                },
                markers: [
                    {
                        markerType: 'USERTASK',
                        x: 10,
                        y: 10,
                        position: 0,
                        markerZoomClasses: [
                            //"mafe-user-marker-10 ",
                            //"mafe-user-marker-15 ",
                            //"mafe-user-marker-21 ",
                            //"mafe-user-marker-26 ",
                            //"mafe-user-marker-31 "
                        ]
                    },
                    {
                        markerType: 'EMPTY',
                        x: 10,
                        y: 10,
                        position: 4,
                        markerZoomClasses: [
                            //"mafe-user-marker-10 ",
                            //"mafe-user-marker-15 ",
                            //"mafe-user-marker-21 ",
                            //"mafe-user-marker-26 ",
                            //"mafe-user-marker-31 "
                        ]
                    }
                ],
                corona: corona,
                focusLabel: true
            };
            jQuery.extend(true, defaultOptions, options);
            defaultOptions.markers[0]
                    .markerZoomClasses = PMDesigner.updateMarkerLayerClasses(defaultOptions);
            defaultOptions.markers[1]
                    .markerZoomClasses = PMDesigner.updateLoopLayerClasses(defaultOptions);
            customshape = new PMActivity(defaultOptions);
            break;
        case 'SUB_PROCESS':
            defaultOptions = {
                canvas: pmCanvas,
                width: 150,
                height: 75,
                act_type: 'SUB_PROCESS',
                act_loop_type: 'EMPTY',
                act_name: name,
                act_task_type: 'COLLAPSED',
                minHeight: 30,
                minWidth: 150,
                maxHeight: 50,
                maxWidth: 170,
                container: "activity",
                labels: [
                    {
                        message: name,
                        position: {
                            location: 'center',
                            diffX: 0,
                            diffY: 0
                        },
                        attachEvents: false
                    }
                ],
                /*style: {
                 cssClasses: ['mafe-activity-subprocess']
                 },*/
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-activity-subprocess'
                            ]
                        }
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }

                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'activityResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection',
                "drop": {
                    type: "pmactivitydrop",
                    selectors: [
                        "#BOUNDARY_EVENT",
                        ".mafe-event-boundary",
                        ".dragConnectHandler"
                    ]
                },
                markers: [
                    {
                        markerType: 'COLLAPSED',
                        x: 10,
                        y: 10,
                        position: 4,
                        markerZoomClasses: [
                            "mafe-collapsed-marker-10",
                            "mafe-collapsed-marker-15",
                            "mafe-collapsed-marker-21",
                            "mafe-collapsed-marker-26",
                            "mafe-collapsed-marker-31"
                        ]
                    }
                ],
                corona: corona,
                focusLabel: true
            };
            jQuery.extend(true, defaultOptions, options);
            defaultOptions.markers[0]
                    .markerZoomClasses = PMDesigner.updateMarkerLayerClasses(defaultOptions);
            customshape = new PMActivity(defaultOptions);
            break;
        case 'START':
            defaultOptions = {
                canvas: pmCanvas,
                width: 33,
                height: 33,
                evn_type: 'start',
                evn_name: '',
                evn_marker: 'EMPTY',
                evn_behavior: 'catch',
                evn_message: 'LEAD',
                labels: [
                    {
                        message: '',
                        visible: true,
                        width: 100,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 13
                        }
                    }
                ],
                style: {
                    cssClasses: ['mafe-event-start']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-event-start-empty-16',
                            'mafe-event-start-empty-24',
                            'mafe-event-start-empty-33',
                            'mafe-event-start-empty-41',
                            'mafe-event-start-empty-49'
                        ]
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                corona: corona
            };

            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                    .zoomSprites = PMDesigner.updateLayerClasses(defaultOptions);
            customshape = new PMEvent(defaultOptions);
            break;
        case 'INTERMEDIATE':
            defaultOptions = {
                canvas: pmCanvas,
                width: 33,
                height: 33,
                evn_type: 'INTERMEDIATE',
                evn_name: '',
                evn_marker: 'EMPTY',
                evn_behavior: 'CATCH',
                labels: [
                    {
                        message: '',
                        visible: true,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 13
                        }
                    }
                ],
                style: {
                    cssClasses: ['mafe-event-intermediate']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-event-intermediate-16',
                            'mafe-event-intermediate-24',
                            'mafe-event-intermediate-33',
                            'mafe-event-intermediate-41',
                            'mafe-event-intermediate-49'
                        ]
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                corona: corona
            };

            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                    .zoomSprites = PMDesigner.updateLayerClasses(defaultOptions);
            customshape = new PMEvent(defaultOptions);
            break;
        case 'BOUNDARY':
            defaultOptions = {
                canvas: pmCanvas,
                width: 33,
                height: 33,
                evn_type: 'BOUNDARY',
                evn_name: '',
                evn_marker: 'EMPTY',
                evn_behavior: 'CATCH',
                labels: [
                    {
                        message: '',
                        visible: true,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 0
                        }
                    }
                ],
                style: {
                    cssClasses: ['mafe-event-boundary']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-event-intermediate-16',
                            'mafe-event-intermediate-24',
                            'mafe-event-intermediate-33',
                            'mafe-event-intermediate-41',
                            'mafe-event-intermediate-49'
                        ]
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                drag : 'nodrag'
            };

            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                    .zoomSprites = PMDesigner.updateLayerClasses(defaultOptions);
            customshape = new PMEvent(defaultOptions);
            break;

        case 'END':
            defaultOptions = {
                canvas: pmCanvas,
                width: 33,
                height: 33,
                evn_type: 'end',
                evn_name: '',
                evn_marker: 'EMPTY',
                evn_behavior: 'throw',
                labels: [
                    {
                        message: '',
                        visible: true,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 13
                        }
                    }
                ],
                style: {
                    cssClasses: ['mafe-event-end']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-event-end-empty-16',
                            'mafe-event-end-empty-24',
                            'mafe-event-end-empty-33',
                            'mafe-event-end-empty-41',
                            'mafe-event-end-empty-49'
                        ]
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                corona: corona
            };
            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                    .zoomSprites = PMDesigner.updateLayerClasses(defaultOptions);
            customshape = new PMEvent(defaultOptions);
            break;

        case 'COMPLEX':
        case 'PARALLEL':
        case 'EXCLUSIVE':
        case 'EVENTBASED':
        case 'EXCLUSIVEEVENTBASED':
        case 'PARALLELEVENTBASED':
        case 'INCLUSIVE':
            defaultOptions = {
                labels: [
                    {
                        message: '',
                        visible: true,
                        width: 100,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 13
                        }
                    }
                ],
                canvas: pmCanvas,
                width: 41,
                height: 41,
                gat_type: 'EXCLUSIVE',
                gat_name: '',
                //style: {
                //    cssClasses: ['mafe-gateway-exclusive']
                //},
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-gateway-exclusive-20',
                            'mafe-gateway-exclusive-30',
                            'mafe-gateway-exclusive-41',
                            'mafe-gateway-exclusive-51',
                            'mafe-gateway-exclusive-61'
                        ]
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                corona: corona
            };
            jQuery.extend(true, defaultOptions, options);
            defaultOptions.layers[0]
                    .zoomSprites = PMDesigner.updateGatewayLayerClasses(defaultOptions);
            customshape = new PMGateway(defaultOptions);
            break;
        case 'GROUP':
            defaultOptions = {
                art_name: name,
                art_type: 'GROUP',
                canvas: pmCanvas,
                width: 200,
                height: 100,
                style: {
                    cssClasses: ['mafe-artifact-group']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "background-layer",
                        priority: 1,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-artifact-group'
                            ]
                        }
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }/*,
                     {
                     tooltip: "Remove".translate(),
                     x: 5*pmCanvas.zoomFactor,
                     y: -5*pmCanvas.zoomFactor,
                     zOrder : 2,
                     width: 10,
                     height: 10,
                     layerName : "layer-close",
                     priority: 2,
                     visible: true,
                     resizable:false,
                     style: {
                     cssProperties: {
                     position: "relative"
                     },
                     cssClasses: [
                     'mafe-artifact-annotation-close'
                     ]
                     },
                     listeners: {
                     click: function (e, l, s) {
                     PMDesigner.canvas.emptyCurrentSelection();
                     PMDesigner.canvas.addToSelection(s);
                     PMUI.activeCanvas.removeElements();
                     }
                     }
                     }*/
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'annotationResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    }
                },
                labels: [
                    {
                        message: "",
                        width: 0,
                        height: 0,
                        //orientation: "vertical",
                        //minHeight:30,
                        position: {
                            location: 'top',
                            diffX: 2,
                            diffY: 0
                        },
                        attachEvents: false,
                        updateParent: true,
                        style: {
                            cssClasses: [
                                'mafe-label-annotation'
                            ]
                        }
                    }
                ],
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                corona : [
                    {
                        name: 'Delete'.translate(),
                        className: 'mafe-corona-delete',
                        onClick:  function (item) {
                            PMUI.getActiveCanvas().removeElements();
                        },
                        column: 0
                    }

                ],
                focusLabel: true
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMArtifact(defaultOptions);
            break;
        case 'TEXT_ANNOTATION':
            defaultOptions = {
                art_name: name,
                art_type: 'TEXT_ANNOTATION',
                canvas: pmCanvas,
                width: 100,
                height: 30,
                style: {
                    cssClasses: ['mafe-artifact-annotation']
                },
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "background-layer",
                        priority: 1,
                        visible: true,
                        style: {
                            cssClasses: [
                                'mafe-artifact-annotation'
                            ]
                        }
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }/*,
                     {
                     tooltip: "Remove".translate(),
                     x: 5*pmCanvas.zoomFactor,
                     y: -5*pmCanvas.zoomFactor,
                     zOrder : 2,
                     width: 10,
                     height: 10,
                     layerName : "layer-close",
                     priority: 2,
                     visible: true,
                     resizable:false,
                     style: {
                     cssProperties: {
                     position: "relative"
                     },
                     cssClasses: [
                     'mafe-artifact-annotation-close'
                     ]
                     },
                     listeners: {
                     click: function (e, l, s) {
                     PMDesigner.canvas.emptyCurrentSelection();
                     PMDesigner.canvas.addToSelection(s);
                     PMUI.activeCanvas.removeElements();
                     }
                     }
                     }*/
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'annotationResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    }
                },
                labels: [
                    {
                        message: name,
                        width: 0,
                        height: 0,
                        position: {
                            location: 'center',
                            diffX: 0,
                            diffY: 0
                        },
                        attachEvents: false,
                        updateParent: true
                    }
                ],
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                corona: corona,
                focusLabel: true
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMArtifact(defaultOptions);
            break;

        case 'DATAOBJECT':
            defaultOptions = {
                labels: [
                    {
                        message: '',
                        visible: true,
                        width: 100,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 0
                        }
                    }
                ],
                canvas: pmCanvas,
                width: 33,
                height: 41,
                dat_type: 'DATAOBJECT',
                dat_object_type : "dataobject",
                dat_name: '',
                //style: {
                //    cssClasses: ['mafe-gateway-exclusive']
                //},
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-dataobject-50',
                            'mafe-dataobject-75',
                            'mafe-dataobject-100',
                            'mafe-dataobject-125',
                            'mafe-dataobject-150'
                        ]
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection',
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                markers: [
                    {
                        markerType: 'USERTASK',
                        x: 10,
                        y: 10,
                        position: 0
                        //markerZoomClasses: [
                        //    "mafe-data-input-marker-10 ",
                        //    "mafe-data-input-marker-15 ",
                        //    "mafe-data-input-marker-21 ",
                        //    "mafe-data-input-marker-26 ",
                        //    "mafe-data-input-marker-31 "
                        //]
                    }
                ],
                corona: corona
            };
            jQuery.extend(true, defaultOptions, options);
            defaultOptions.markers[0]
                    .markerZoomClasses = PMDesigner.updateDataMarkerLayerClasses(defaultOptions);
            customshape = new PMData(defaultOptions);
            break;

        case 'DATASTORE':
            defaultOptions = {
                labels: [
                    {
                        message: '',
                        visible: true,
                        width: 100,
                        position: {
                            location: 'bottom',
                            diffX: 0,
                            diffY: 0
                        }
                    }
                ],
                canvas: pmCanvas,
                width: 41,
                height: 41,
                dat_type: 'DATASTORE',
                dat_name: '',
                //style: {
                //    cssClasses: ['mafe-gateway-exclusive']
                //},
                layers: [
                    {
                        x: 0,
                        y: 0,
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssClasses: []
                        },
                        zoomSprites: [
                            'mafe-datastore-20',
                            'mafe-datastore-30',
                            'mafe-datastore-41',
                            'mafe-datastore-51',
                            'mafe-datastore-61'
                        ]
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }
                ],
                connectAtMiddlePoints: true,
                resizeBehavior: 'NoResize',
                resizeHandlers: {
                    type: "Rectangle",
                    total: 4,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop : 'pmconnection'
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                corona: corona
            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMData(defaultOptions);
            break;
        case 'PARTICIPANT':
            defaultOptions = {
                width: 500,
                height: 130,
                "canvas": this,
                "connectAtMiddlePoints": false,
                //drag: 'bpmndrag',
                topLeft: true,
                connectionType: 'dotted',
                resizeBehavior: "participantResize",
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                "drop": {
                    type: "pmconnection",
                    selectors: ['.dragConnectHandler']
                },
                "style": {
                    cssClasses: ["mafe-pool"]
                    //                            cssProperties: {
                    ////                                border: "1px solid black",
                    ////                                "-webkit-box-shadow": "0px 0px 4px 0px black",
                    ////                                "box-shadow": "0px 0px 4px 0px black"
                    //                            }

                },
                layers: [
                    {
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssProperties: {
                                //backgroundColor: 'red'
                                //                                width:'1px',
                                //                                height:'auto'
                            }
                        }
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }
                    //                {
                    //                    layerName: "second-layer",
                    //                    priority: 3,
                    //                    visible: true
                    //                }
                ],
                labels: [
                    {
                        message: name,
                        width: 0,
                        height: 0,
                        orientation: 'vertical',
                        position: {
                            location: 'center-left',
                            diffX: 15,
                            diffY: 0
                        },
                        attachEvents: false
                    }
                ],
                par_name: name,
                corona: corona,
                focusLabel: true

            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMParticipant(defaultOptions);
            break;
        case 'POOL':
            if(options.lns_name){
                name = options.lns_name;
            }else if(options.par_name){
                name = options.par_name;
            }
            defaultOptions = {
                width: 700,
                height: 200,
                "canvas": pmCanvas,
                "connectAtMiddlePoints": false,
                //drag: 'bpmndrag',
                topLeft: false,
                connectionType: 'dotted',
                resizeBehavior: "poolResize",

                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop: {
                //    pmType: 'container',
                //    selectors: ['#START,#END']
                //},

                "drop": {
                    type: "pmcontainer",
                    selectors: [
                        "#TASK",
                        "#SUB_PROCESS",
                        "#START",
                        "#START_MESSAGE",
                        "#START_TIMER",
                        "#END",
                        "#END_MESSAGE",
                        "#END_EMAIL",
                        "#INTERMEDIATE_SENDMESSAGE",
                        "#INTERMEDIATE_RECEIVEMESSAGE",
                        "#INTERMEDIATE_EMAIL",
                        "#INTERMEDIATE_TIMER",
                        "#EXCLUSIVE",
                        "#PARALLEL",
                        "#INCLUSIVE",
                        "#DATAOBJECT",
                        "#DATASTORE",
                        "#TEXT_ANNOTATION",
                        "#LANE",
                        "#GROUP",
                        //".custom_shape",
                        ".mafe-event-start",
                        ".mafe-event-intermediate",
                        ".mafe-event-end",
                        ".pmui-pmactivity",
                        ".pmui-pmgateway",
                        ".pmui-pmdata",
                        ".mafe-artifact-annotation",
                        ".mafe-artifact-group",
                        ".port"
                    ]
                },
                container: "pool",
                "style": {
                    cssClasses: ["mafe-pool"]
                    //                            cssProperties: {
                    ////                                border: "1px solid black",
                    ////                                "-webkit-box-shadow": "0px 0px 4px 0px black",
                    ////                                "box-shadow": "0px 0px 4px 0px black"
                    //                            }

                },
                layers: [
                    {
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssProperties: {
                                //backgroundColor: 'red'
                                //                                width:'1px',
                                //                                height:'auto'
                            }
                        }
                    },
                    {
                        x: 0,
                        y: 0,
                        layerName: "second-layer",
                        priority: 2,
                        visible: false,
                        style: {
                            cssClasses: []
                        }
                    }
                    //                {
                    //                    layerName: "second-layer",
                    //                    priority: 3,
                    //                    visible: true
                    //                }
                ],
                labels: [
                    {
                        message: name,
                        width: 0,
                        height: 0,
                        orientation: 'vertical',
                        position: {
                            location: 'center-left',
                            diffX: 15,
                            diffY: 0
                        },
                        attachEvents: false
                    }
                ],
                lns_name: name,
                focusLabel: true,
                corona : corona

            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMPool(defaultOptions);
            break;
        case 'LANE':
            defaultOptions = {
                width: 500,
                height: 200,
                "canvas": pmCanvas,
                "connectAtMiddlePoints": false,
                //drag: 'bpmndrag',
                topLeft: true,
                connectionType: 'dotted',
                resizeBehavior: "laneResize",
                resizeHandlers: {
                    type: "Rectangle",
                    total: 8,
                    resizableStyle: {
                        cssProperties: {
                            'background-color': "rgb(0, 255, 0)",
                            'border': '1px solid black'
                        }
                    },
                    nonResizableStyle: {
                        cssProperties: {
                            'background-color': "white",
                            'border': '1px solid black'
                        }
                    }
                },
                //drop: {
                //    pmType: 'container',
                //    selectors: ['#START,#END']
                //},

                "drop": {
                    type: "pmcontainer",
                    selectors: [
                        "#TASK",
                        "#SUB_PROCESS",
                        "#START",
                        "#START_MESSAGE",
                        "#START_TIMER",
                        "#END",
                        "#END_MESSAGE",
                        "#END_EMAIL",
                        "#INTERMEDIATE_SENDMESSAGE",
                        "#INTERMEDIATE_RECEIVEMESSAGE",
                        "#INTERMEDIATE_EMAIL",
                        "#INTERMEDIATE_TIMER",
                        "#EXCLUSIVE",
                        "#PARALLEL",
                        "#INCLUSIVE",
                        "#DATAOBJECT",
                        "#DATASTORE",
                        "#GROUP",
                        "#TEXT_ANNOTATION",
                        ".mafe-event-start",
                        ".mafe-event-intermediate",
                        ".mafe-event-end",
                        ".pmui-pmactivity",
                        ".pmui-pmgateway",
                        ".pmui-pmdata",
                        ".mafe-artifact-annotation",
                        ".mafe-artifact-group"
                    ]
                },
                container: "lane",
                //"style": {
                //    cssClasses: ["mafe-lane"]
                //    //                            cssProperties: {
                //    ////                                border: "1px solid black",
                //    ////                                "-webkit-box-shadow": "0px 0px 4px 0px black",
                //    ////                                "box-shadow": "0px 0px 4px 0px black"
                //    //                            }
                //
                //},
                layers: [
                    {
                        layerName: "first-layer",
                        priority: 2,
                        visible: true,
                        style: {
                            cssProperties: {
                                //backgroundColor: 'red'
                                //                                width:'1px',
                                //                                height:'auto'
                            }
                        }
                    }
                    //                {
                    //                    layerName: "second-layer",
                    //                    priority: 3,
                    //                    visible: true
                    //                }
                ],
                labels: [
                    {
                        message: name,
                        //x : 10,
                        //y: 10,
                        width: 0,
                        height: 0,
                        orientation: 'vertical',
                        position: {
                            location: 'center-left',
                            diffX: 15,
                            diffY: 0
                        }
                        //updateParent: false
                    }
                ],
                lan_name: name,
                focusLabel: true

            };
            jQuery.extend(true, defaultOptions, options);
            customshape = new PMLane(defaultOptions);
            break;

        }
        if (customshape && !pmCanvas.readOnly) {
            customshape.attachListeners();
            customshape.extendedType = type;
            menuShape = PMDesigner.getMenuFactory(type);
            customshape.getHTML();
            customshape.setContextMenu(menuShape);

        }
        return customshape;
    };
    PMDesigner.updateLayerClasses = function (options) {
        return [
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-16',
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-24',
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-33',
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-41',
            'mafe-event-' + options.evn_type.toLowerCase() + '-' + options.evn_marker.toLowerCase() + '-49'
        ];
    };
    PMDesigner.updateGatewayLayerClasses = function (options) {
        return [
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-20',
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-30',
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-41',
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-51',
            'mafe-gateway-' + options.gat_type.toLowerCase() + '-61'
        ];
    };
    PMDesigner.updateMarkerLayerClasses = function (options) {
        if (options.act_task_type !== 'EMPTY') {
            return [
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-10",
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-15",
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-21",
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-26",
                "mafe-" + options.act_task_type.toLowerCase() + "-marker-31"
            ];
        }
    };
    PMDesigner.updateLoopLayerClasses = function (options) {
        if (options.act_loop_type !== 'EMPTY') {
            return [
                "mafe-" + options.act_loop_type.toLowerCase() + "-marker-10",
                "mafe-" + options.act_loop_type.toLowerCase() + "-marker-15",
                "mafe-" + options.act_loop_type.toLowerCase() + "-marker-21",
                "mafe-" + options.act_loop_type.toLowerCase() + "-marker-26",
                "mafe-" + options.act_loop_type.toLowerCase() + "-marker-31"
            ];
        }
    };
    PMDesigner.updateDataMarkerLayerClasses = function (options) {
        var type = options.dat_object_type.toLowerCase();
        if (type !== 'dataobject') {
            return [
                "mafe-" + type + "-marker-10",
                "mafe-" + type + "-marker-15",
                "mafe-" + type + "-marker-21",
                "mafe-" + type + "-marker-26",
                "mafe-" + type + "-marker-31"
            ];
        }
    };
}());
PMDesigner.sidebar = [];

PMDesigner.sidebar.push(
    new ToolbarPanel({
        buttons:[
            {
                selector: 'TASK',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-task'
                ],
                tooltip: "Task".translate()
            },
            {
                selector: 'SUB_PROCESS',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-subprocess'
                ],
                tooltip: "Sub Process".translate()
            }
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'EXCLUSIVE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-gateway-exclusive'
                ],
                tooltip: "Exclusive Gateway".translate()
            },
            {
                selector: 'PARALLEL',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-gateway-parallel'
                ],
                tooltip: "Parallel gateway".translate()
            },
            {
                selector: 'INCLUSIVE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-gateway-inclusive'
                ],
                tooltip: "Inclusive Gateway".translate()
            }
            //{
            //    selector: 'COMPLEX',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-gateway-inclusive'
            //    ],
            //    tooltip: "Complex".translate()
            //}
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'START',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-start'
                ],
                tooltip: "Start Event".translate()
            },
            //{
            //    selector: 'START_MESSAGE',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-start-message'
            //    ],
            //    tooltip: "Start message event".translate()
            //},
            {
                selector: 'START_TIMER',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-event-start-timer'
                ],
                tooltip: "Start Timer Event".translate()
            },
            /*{
                selector: 'START_TIMER',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-start-timer'
                ],
                tooltip: "Start timer event".translate()
            },*/
            //{
            //    selector: 'INTERMEDIATE_SENDMESSAGE',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-intermediate-send-mesage'
            //    ],
            //    tooltip: "Intermediate Send Message Event".translate()
            //},
            {
                selector: 'INTERMEDIATE_EMAIL',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-intermediate-send-mesage'
                ],
                tooltip: "Intermediate Email Event".translate()
            },
            //{
            //    selector: 'INTERMEDIATE_RECEIVEMESSAGE',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-intermediate-receive-mesage'
            //    ],
            //    tooltip: "Intermediate Receive Message Event".translate()
            //},
            {
                selector: 'INTERMEDIATE_TIMER',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-event-intermediate-timer'
                ],
                tooltip: "Intermediate Timer Event".translate()
            },

            /*{
                selector: 'BOUNDARY_EVENT',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-boundary'
                ],
                tooltip: "Boundary Event".translate()
            },*/
            {
                selector: 'END',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-end'
                ],
                tooltip: "End Event".translate()
            },
            //{
            //    selector: 'END_MESSAGE',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-end-message'
            //    ],
            //    tooltip: "End Message Event ".translate()
            //},
            {
                selector: 'END_EMAIL',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-end-message'
                ],
                tooltip: "End Email Event ".translate()
            }
        ]
    }),    
    


    new ToolbarPanel({
        buttons: [
            {
                selector: 'DATAOBJECT',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-data-object'
                ],
                tooltip: "Data Object".translate()
            },
            {
                selector: 'DATASTORE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-data-store'
                ],
                tooltip: "Data Store".translate()
            }
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'PARTICIPANT',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-blackbox'
                ],
                tooltip: " Black Box Pool".translate()
            },
            {
                selector: 'POOL',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-pool'
                ],
                tooltip: "Pool".translate()
            },
            {
                selector: 'LANE',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-lane'
                ],
                tooltip: "Lane".translate()
            }
            //{
            //    selector: 'VERTICAL_LINE',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-vertical-line'
            //    ],
            //    tooltip: "Vertical Line".translate()
            //},
            //{
            //    selector: 'HORIZONTAL_LINE',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-horizontal-line'
            //    ],
            //    tooltip: "Horizontal Line".translate()
            //}
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'GROUP',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-group'
                ],
                tooltip: "Group".translate()
            },
            {
                selector: 'TEXT_ANNOTATION',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-annotation'
                ],
                tooltip: "Text Annotation".translate()
            }
            //{
            //    selector: 'H_LABEL',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-horizontal-text'
            //    ],
            //    tooltip: "Horizontal Text".translate()
            //},
            //{
            //    selector: 'V_LABEL',
            //    className: [
            //        'mafe-designer-icon',
            //        'mafe-toolbar-vertical-text'
            //    ],
            //    tooltip: "Vertical Text".translate()
            //}
        ]
    }),
    new ToolbarPanel({
        buttons: [
            {
                selector: 'LASSO',
                className: [
                    'mafe-designer-icon',
                    'mafe-toolbar-lasso'
                ],
                tooltip: "Lasso".translate()
            }

        ]
    })
    //new ToolbarPanel({
    //    buttons: [
    //        {
    //            selector: 'VALIDATOR',
    //            className: [
    //                'mafe-designer-icon',
    //                'mafe-toolbar-validation'
    //            ],
    //            tooltip: "Validate Now".translate()
    //        }
    //
    //    ]
    //})

);
ListDynaform = function () {
    this.superTitle = 'Dynaforms'.translate();
    this.buttonCreate = null;
    this.onCreate = new Function();
    this.onShowId = new Function();
    this.onEdit = new Function();
    this.onDel = new Function();
    this.loaded = false;
	this.clickedClose = true;
    Mafe.Grid.call(this);
    ListDynaform.prototype.init.call(this);
};
ListDynaform.prototype = new Mafe.Grid();
ListDynaform.prototype.init = function () {
    var that = this;
    that.buttonCreate = new PMUI.ui.Button({
        id: 'dynaformButtonNew',
        text: 'Create'.translate(),
        height: '36px',
        width: 100,
        style: {cssClasses: ['mafe-button-create']},
        handler: function (event) {
            that.onCreate(event);
        }
    });
    that.buttonCreate.defineEvents();
    that.setID('idListDynaform');
    that.setColumns([{
            id: 'copyuid',
            title: 'Show ID'.translate(),
            dataType: 'button',
            buttonLabel: 'Show ID'.translate(),
            buttonStyle: {cssClasses: ['mafe-button-show']},
            onButtonClick: function (row, grid) {
                that.onShowId(row, grid);
            }
        }, {
            id: 'dynaformGridPanelTitle',
            title: 'Title'.translate(),
            dataType: 'string',
            width: '460px',
            alignmentCell: 'left',
            sortable: true,
            columnData: 'dyn_title'
        }, {
            id: 'dynaformGridPanelEdit',
            title: '',
            dataType: 'button',
            buttonStyle: {cssClasses: ['mafe-button-edit']},
            buttonLabel: function (row, data) {
                return 'Edit'.translate();
            },
            onButtonClick: function (row, grid) {
                that.onEdit(row, grid);
            }
        }, {
            id: 'dynaformGridPanelDelete',
            title: '',
            dataType: 'button',
            buttonStyle: {cssClasses: ['mafe-button-delete']},
            buttonLabel: function (row, data) {
                return 'Delete'.translate();
            },
            onButtonClick: function (row, grid) {
                that.onDel(row, grid);
            }
        }
    ]);
    //that.load();
};
ListDynaform.prototype.createHTML = function () {
    Mafe.Grid.prototype.createHTML.call(this);
    this.dom.toolbar.appendChild(this.buttonCreate.getHTML());
    return this.html;
};
ListDynaform.prototype.load = function () {
    var that = this;
    that.clearItems();
    (new PMRestClient({
        endpoint: 'dynaforms',
        typeRequest: 'get',
        functionSuccess: function (xhr, response) {
            that.setDataItems(response);
            that.sort('dyn_title', 'asc');
            that.loaded = true;
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);

            that.loaded = false;
        },
        messageError: 'There are problems getting the list of dynaforms, please try again.'.translate()
    })).executeRestClient();
};
ListDynaform.prototype.getSuperTitle = function () {
    return this.superTitle;
};

BlankDynaform = function () {
    this.superTitle = 'Create Blank Dynaform'.translate();
    this.onSave = new Function();
    this.onSaveOpen = new Function();
    this.onCancel = new Function();
    this.buttons = null;
    Mafe.Form.call(this);
    BlankDynaform.prototype.init.call(this);
};
BlankDynaform.prototype = new Mafe.Form();
BlankDynaform.prototype.init = function () {
    var that = this;
    that.setID('formDynaformInformation');
    that.setTitle('Dynaform Information'.translate());
    that.setItems([{
            id: 'formDynaformInformationTitle',
            pmType: 'text',
            label: 'Title'.translate(),
            value: '',
            maxLength: 255,
            placeholder: 'The Dynaform title'.translate(),
            name: 'dyn_title',
            required: true,
            controlsWidth: 303
        }, {
            id: 'formDynaformInformationDescription',
            pmType: 'textarea',
            rows: 200,
            name: 'dyn_description',
            width: 200,
            label: 'Description'.translate(),
            style: {cssClasses: ['mafe-textarea-resize']}
        }
    ]);
    that.buttons = [
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'error',
            handler: function () {
                that.onCancel();
            }
        }),
        new PMUI.ui.Button({
            id: 'windowDynaformInformationSaveOpen',
            text: 'Save & Open'.translate(),
            buttonType: 'success',
            handler: function () {
                that.onSaveOpen();
            }
        }),
        new PMUI.ui.Button({
            id: 'windowDynaformInformationSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            handler: function () {
                that.onSave();
            }
        })
    ];
};
BlankDynaform.prototype.getButtons = function () {
    return this.buttons;
};
BlankDynaform.prototype.getSuperTitle = function () {
    return this.superTitle;
};

Dynaform = function (settings) {
    this.listDynaform = null;
    this.blankDynaform = null;
    Mafe.Window.call(this, settings);
    Dynaform.prototype.init.call(this, settings);
};
Dynaform.prototype = new Mafe.Window();
Dynaform.prototype.init = function (settings) {
    var that = this;
    that.listDynaform = new ListDynaform();
	that.setOnBeforeCloseHandler(function(){
		this.clickedClose = true;
		if(!that.blankDynaform.isVisible()){
			that.close();
		}else{
			that.blankDynaform.onCancel();
		}
	});
    that.listDynaform.load();
    that.listDynaform.onShowId = function (row, grid) {
        showUID(row.getData().dyn_uid);
    };
    that.listDynaform.onCreate = function () {
        that.resetView();
        that.setTitle(that.blankDynaform.getSuperTitle());
        that.blankDynaform.setVisible(true);
        that.setButtons(that.blankDynaform.getButtons());
    };
    that.listDynaform.onEdit = function (row, grid) {
        that.edit(row, grid);
    };
    that.listDynaform.onDel = function (row, grid) {
        that.del(row, grid);
    };

    that.blankDynaform = new BlankDynaform();
    that.blankDynaform.onSave = function () {
        that.saveBlank(false);
    };
    that.blankDynaform.onSaveOpen = function () {
        that.saveBlank(true);
    };
    that.blankDynaform.onCancel = function () {
        $("input,select,textarea").blur();
        var title = "";
        that.blankDynaform.loseChanges(title);
    };
    that.blankDynaform.onYesConfirmCancellation = function () {
		if (that.clickedClose){
			that.close();
		}
        that.resetView();
        that.setTitle(that.listDynaform.getSuperTitle());
        that.listDynaform.setVisible(true);
    };

    that.addItem(that.listDynaform);
    that.addItem(that.blankDynaform);

    that.open();
    that.resetView();
    that.setTitle(that.listDynaform.getSuperTitle());
    that.listDynaform.setVisible(true);

    // hard coding dyn_title textfield because enter keypress reload the current page
    if (that.blankDynaform.getItems()[0]
        &&that.blankDynaform.getItems()[0].controls[0]
        && that.blankDynaform.getItems()[0].controls[0].html) {
        $(that.blankDynaform.getItems()[0].controls[0].html).keypress(function(e) {
            if(e.which == 13) {
                e.preventDefault();
            }
        });
    }
    // end hard coding

};
Dynaform.prototype.saveBlank = function (open) {
    var that = this;
    var flagAux;

    if (!that.blankDynaform.isValid()) {
        flagAux = that.blankDynaform.visible;
    } else {
        flagAux = that.blankDynaform.isValid();
    }

    if (flagAux) {
        if(getData2PMUI(that.blankDynaform.html).dyn_title == ""){
           return false;
        }
    }

    var data = getData2PMUI(that.blankDynaform.html);

    data['dyn_version'] = 2;
    data['dyn_type'] = 'xmlform';
    var restClient = new PMRestClient({
        endpoint: 'dynaform',
        typeRequest: 'post',
        data: data,
        functionSuccess: function (xhr, response) {
            if (open) {
                that.close();
                try {
                    PMUI.getActiveCanvas().emptyCurrentSelection();
                } catch (msg) {
                }
                PMDesigner.dynaformDesigner(response);
            } else {
                that.resetView();
                that.setTitle(that.listDynaform.getSuperTitle());
                that.listDynaform.setVisible(true);
                that.listDynaform.load();
            }
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },
        messageError: 'There are problems creating the dynaform, please try again.'.translate(),
        messageSuccess: 'Dynaform saved successfully'.translate(),
        flashContainer: that.listDynaform
    });
    restClient.executeRestClient();
};
Dynaform.prototype.edit = function (row, grid) {
    this.close();
    try {
        PMUI.getActiveCanvas().emptyCurrentSelection();
    } catch (msg) {
    }
    PMDesigner.dynaformDesigner(row.getData());
};
Dynaform.prototype.del = function (row, grid) {
    var that = this;
    var confirmDeletion = new Mafe.ConfirmDeletion();
    confirmDeletion.setMessage('Do you want to delete this DynaForm?'.translate());
	confirmDeletion.setTitle("Dynaform".translate());
    confirmDeletion.onDelete = function () {
        var restClient = new PMRestClient({
            endpoint: 'dynaform/' + row.getData().dyn_uid,
            typeRequest: 'remove',
            functionSuccess: function (xhr, response) {
                that.listDynaform.load();
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            },
            messageError: 'There are problems deleting the dynaform, please try again.'.translate(),
            messageSuccess: 'Dynaform deleted successfully'.translate(),
            flashContainer: that.listDynaform
        });
        restClient.executeRestClient();
    };
};

(function () {
    PMDesigner.dynaform = function () {
        var dynaform = new Dynaform();
    };
    PMDesigner.dynaform.create = function () {
        var dynaform = new Dynaform();
        dynaform.resetView();
        dynaform.setTitle(dynaform.blankDynaform.getSuperTitle());
        dynaform.blankDynaform.setVisible(true);
        dynaform.setButtons(dynaform.blankDynaform.getButtons());
    };
}());

/**
 * Input Document module
 * @param options
 * @constructor
 */
var InputDocument = function (options) {
    this.winMainInputDocument = null;
    this.externalType = false;
    this.inputDocumentOriginDataForUpdate = {};
    this.windowDialog = null;
    this.assignAccordion = null;
	this.clickedClose = true;
    InputDocument.prototype.init.call(this, options);
};
/**
 * constructor
 * @param options
 */
InputDocument.prototype.init = function (options) {

};

/**
 * Puts input document using rest proxy, to update data
 * @param inputDocumentUid
 * @param data
 */
InputDocument.prototype.inputDocumentPutRestProxy = function (inputDocumentUid, data) {
    var that = this,
        restProxy;

    restProxy = new PMRestClient({
        endpoint : "input-document/" + inputDocumentUid,
        typeRequest : 'update',
        data : data,
        functionSuccess : function (xhr, response) {
            if (!that.externalType){
                if (typeof flagInputDocument != 'undefined' && flagInputDocument) {
                    that.winMainInputDocument.close();
                    return;
                }
                that.inputDocumentsGetRestProxy();
                that.openGridPanelInMainWindow();
            }else{
                that.winMainInputDocument.close();
                var message = new PMUI.ui.FlashMessage({
                        message: 'Input Document edited correctly.'.translate(),
                        duration: 3000,
                        severity: 'success',
                        appendTo: that.windowDialog
                });
                message.show();

                if (that.assignAccordion != null) {
                    that.assignAccordion.load();
                }
            }
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },
        messageSuccess: 'Input Document updated successfully'.translate(),
        flashContainer: that.grdpnlInputDocument
    });
    restProxy.executeRestClient();
};
/**
 * Deletes an input document
 * @param inputDocumentUid
 */
InputDocument.prototype.inputDocumentDeleteRestProxy = function (inputDocumentUid) {
    var that = this,
        restProxy;
    var restProxy = new PMRestClient({
        endpoint : "input-document/" + inputDocumentUid,
        typeRequest : 'remove',
        functionSuccess : function (xhr, response) {
            //that.openGridPanelInMainWindow();
            that.inputDocumentsGetRestProxy();
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },
        messageSuccess: 'Input Document deleted successfully'.translate(),
        flashContainer: that.grdpnlInputDocument
    });
    restProxy.executeRestClient();
};
/**
 * Creates an input document using rest proxy
 * @param data
 */
InputDocument.prototype.inputDocumentPostRestProxy = function (data) {
    var that = this,
        restProxy;
    restProxy = new PMRestClient({
        endpoint : "input-document",
        typeRequest : 'post',
        data : data,
        functionSuccess : function (xhr, response) {
            that.inputDocumentsGetRestProxy();
            that.openGridPanelInMainWindow();
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },
        messageSuccess: 'Input Document saved successfully'.translate(),
        flashContainer: that.grdpnlInputDocument
    });
    restProxy.executeRestClient();
};
/**
 * Gets all input documents to populate the grid
 */
InputDocument.prototype.inputDocumentsGetRestProxy = function () {
    var that = this;
    var restProxy = new PMRestClient({
        endpoint : 'input-documents',
        typeRequest : 'get',
        functionSuccess : function (xhr, response) {
            that.grdpnlInputDocument.setDataItems(response);
            that.grdpnlInputDocument.sort('inp_doc_title', 'asc');
            if(PMVariables.prototype.isWindowActive()){
                PMVariables.prototype.setInputDocumentsFromIDModule(PMUI.getPMUIObject(inp_doc_uid),response);
            }
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });
    restProxy.executeRestClient();
};
/**
 * Gets an specific input document data to edit it
 * @param inputDocumentUid
 */
InputDocument.prototype.inputDocumentFormGetProxy = function (inputDocumentUid) {
    var that = this,
        restProxy;
    restProxy = new PMRestClient({
        endpoint : "input-document/" + inputDocumentUid,
        typeRequest : 'get',
        functionSuccess : function (xhr, response) {
            var data = response;
            that.method = "PUT";
            that.openFormForEditInMainWindow(data);
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });
    restProxy.executeRestClient();
};

/**
 * Open Edit form and sets to main windows
 * @param inputDocumentData
 */
InputDocument.prototype.openFormForEditInMainWindow = function (inputDocumentData) {
    var fields,
        that = this;

    that.inputDocumentOriginDataForUpdate = inputDocumentData;
    that.inputDocumentUid = inputDocumentData.inp_doc_uid;
    fields = that.frmInputDocument.getFields();
    fields[2].setValue("");
    that.winMainInputDocument.setTitle("Edit Input Document".translate());

    fields[0].setValue(inputDocumentData.inp_doc_title);
    fields[3].setValue(inputDocumentData.inp_doc_description);
    fields[1].setValue(inputDocumentData.inp_doc_form_needed);
    fields[2].setValue(inputDocumentData.inp_doc_original);

    if (inputDocumentData.inp_doc_form_needed != "VIRTUAL") {
        fields[2].setVisible(true);
    } else {
        fields[2].setVisible(false);
    }
    fields[4].setValue(parseInt(inputDocumentData.inp_doc_versioning + ""));
    fields[5].setValue(inputDocumentData.inp_doc_destination_path);
    fields[6].setValue(inputDocumentData.inp_doc_tags);
    fields[7].setValue(inputDocumentData.inp_doc_type_file);
    fields[8].setValue(inputDocumentData.inp_doc_max_filesize);
    fields[9].setValue(inputDocumentData.inp_doc_max_filesize_unit);


};
/**
 * Open the grid panel and sets to mai windows
 */
InputDocument.prototype.openGridPanelInMainWindow = function () {
    this.grdpnlInputDocument.setVisible(true);
    this.frmInputDocument.setVisible(false);
    this.winMainInputDocument.setTitle("Input Documents".translate());
    this.winMainInputDocument.hideFooter();
};
/**
 * Set the option external type of input Document
 */
InputDocument.prototype.setExternalType = function (value) {
    if(typeof value == "boolean"){
        this.externalType = value;
    }
    return this;
};
/**
 * Set the option window Dialog, a window that open this class
 */
InputDocument.prototype.setWindowDialog = function (value) {
    this.windowDialog = value;
    return this;
};

InputDocument.prototype.setAssignAccordion = function (obj)
{
    this.assignAccordion = obj;
};

/**
 * Open create form an sets to main windows
 */
InputDocument.prototype.openFormInMainWindow = function () {
    this.grdpnlInputDocument.setVisible(false);
    this.frmInputDocument.setVisible(true);
    this.winMainInputDocument.setTitle("Create Input Document".translate());
    this.winMainInputDocument.showFooter();
};

InputDocument.prototype.checkIfValuesAreEqual = function (initialData, finalData)
{
    if (!Object.keys(initialData).length && Object.keys(finalData).length) {
        if (finalData['inp_doc_title'] !='' || finalData['inp_doc_form_needed'] !='VIRTUAL' || finalData['inp_doc_description'] !='' || finalData['inp_doc_versioning'] !='0' || finalData['inp_doc_destination_path'] !='') {
            return false;
        }
    }

    for (var key1 in initialData) {
        for (var key2 in finalData) {
            if (typeof(initialData[key1]) != "undefined" &&
                typeof(finalData[key2])   != "undefined" &&
                key1 == key2 &&
                initialData[key1] != finalData[key2]
            ) {
                //Return
                return false;
            }
        }
    }

    //Return
    return true;
}

/**
 * Generate all ui components(window, form, grid, fields)
 */

InputDocument.prototype.isDirtyFormInput = function(){
    $("input,select,textarea").blur();
	var that = this;
	if (this.frmInputDocument.isVisible()){
		if (!this.externalType){
			if (!(this.checkIfValuesAreEqual(this.inputDocumentOriginDataForUpdate, getData2PMUI(this.frmInputDocument.html)))) {
				var message_window = new PMUI.ui.MessageWindow({
					id: "cancelMessageTriggers",
					width : 490,
					title: "Input Documents".translate(),
					windowMessageType : 'warning',
					bodyHeight : 'auto',
					message: 'Are you sure you want to discard your changes?'.translate(),
					footerItems : [
						{
							text : 'No'.translate(),
							handler :  function() {
								message_window.close();
							},
							buttonType : "error"
						},{
							text:'Yes'.translate(),
							handler :function() {
								message_window.close();
								if (typeof flagInputDocument != 'undefined' && flagInputDocument) {
									if (that.clickedClose){
										message_window.close();
										that.winMainInputDocument.close();
										return;
									}else{
										that.winMainInputDocument.close();
										flagInputDocument = false;
									}
									return;
								} else {
									if (that.clickedClose){
										message_window.close();
										that.winMainInputDocument.close();
										return;
									}else{
										inputDocumentOption = "";
										that.openGridPanelInMainWindow();
									}
								}
							},
							buttonType : "success"
						}
					]
				});
				message_window.open();
				message_window.showFooter();
				this.inputDocumentOriginDataForUpdate = {};
			} else {
				if (that.clickedClose) {
		                    this.winMainInputDocument.close();
				} else {
			            inputDocumentOption = "";
				    this.openGridPanelInMainWindow();
				}
			}
		}else{
			that.winMainInputDocument.close();
		}
	}else{
		that.winMainInputDocument.close();
	}
}
InputDocument.prototype.build = function () {
    var ID = this;
    var btnSave,
        btnCancel,
        winMainInputDocument,
        frmInputDocument,
        grdpnlInputDocument,
        btnNew,
        inp_doc_destination_path,
        inp_doc_tags,
        that = this;
    btnSave = new PMUI.ui.Button({
        id: "btnSave",
        text: "Save".translate(),
        handler: function () {
            var flagAux;

            if (!ID.frmInputDocument.isValid()) {
                flagAux = ID.frmInputDocument.visible;
            } else {
                flagAux = ID.frmInputDocument.isValid();
            }

            if (flagAux) {
                if(getData2PMUI(ID.frmInputDocument.html).inp_doc_title == ""){
                   return false;
                }
            }

            if (ID.frmInputDocument.getField("inp_doc_max_filesize").getValue() != "") {
                if (!/^\+?(0|[1-9]\d*)$/.test(ID.frmInputDocument.getField("inp_doc_max_filesize").getValue())) {
                    return false;
                }
            }

            //validation because getData method do not work in IE
            if (navigator.userAgent.indexOf("MSIE") !== -1 || navigator.userAgent.indexOf("Trident") !== -1) {
                var data = getData2PMUI(that.frmInputDocument.html);
            } else {
                var data = that.frmInputDocument.getData();
            }

            data["inp_doc_versioning"] = parseInt(data["inp_doc_versioning"]);

            switch (that.method) {
                case "POST":
                    that.inputDocumentPostRestProxy(data);
                    break;
                case "PUT":
                    that.inputDocumentPutRestProxy(that.inputDocumentUid, data);
                    break;
            }
        },
        buttonType : 'success'
    });

    btnCancel = new PMUI.ui.Button({
        id: "btnCancel",
        text: "Cancel".translate(),
        handler: function () {
			that.clickedClose = false;
            that.isDirtyFormInput();
        },
        buttonType : 'error'
    });
    btnNew = new PMUI.ui.Button({
        id: "btnNew",
        text: "Create".translate(),
        height: "36px",
        width : 100,
        style : {
            cssClasses: [
                'mafe-button-create'
            ]
        },
        handler: function() {
            that.openFormInMainWindow();
            that.method = "POST";
            that.frmInputDocument.reset();
        }
    });

    /* form panel*/
    this.frmInputDocument = new PMUI.form.Form({
        id : "frmInputDocument",
        width : 900,
        visibleHeader: false,
        items: [
            {
                pmType: "text",
                label: "Title".translate(),
                id: "inp_doc_title",
                name: "inp_doc_title",
                valueType: 'string',
                maxLength: 200,
                required: true,
                controlsWidth : 300
            },
            {
                pmType: "dropdown",
                name: "inp_doc_form_needed",
                id:"inp_doc_form_needed",
                label: "Document Type".translate(),
                value: "VIRTUAL",
                controlsWidth: 130,
                options: [
                    {
                        value: "VIRTUAL",
                        label: "Digital".translate()
                    },
                    {
                        value: "REAL",
                        label: "Printed".translate()
                    },
                    {
                        value: "VREAL",
                        label: "Digital/Printed".translate()
                    }
                ],
                onChange: function (newValue, prevValue) {
                    var fields = that.frmInputDocument.getFields();
                    if (newValue != "VIRTUAL") {
                        fields[2].setVisible(true);
                    } else {
                        fields[2].setVisible(false);
                    }
                }
            },
            {
                pmType: "dropdown",
                id: "inp_doc_original",
                name: "inp_doc_original",
                label: "Format".translate(),
                value: "ORIGINAL",
                controlsWidth: 105,
                visible: false,
                options: [
                    {
                        value: "ORIGINAL",
                        label: "Original".translate()
                    },
                    {
                        value: "COPYLEGAL",
                        label: "Legal Copy".translate()
                    },
                    {
                        value: "COPY",
                        label: "Copy".translate()
                    }
                ]
            },
            {
                pmType: "textarea",
                id: "inp_doc_description",
                name: "inp_doc_description",
                label: "Description".translate(),
                controlsWidth: 380,
                rows: 100,
                style: {cssClasses: ['mafe-textarea-resize']}
            },
            {
                pmType: "dropdown",
                id: "inp_doc_versioning",
                name: "inp_doc_versioning",
                label: "Enable Versioning".translate(),
                value: 0,
                controlsWidth : 75,
                options: [
                    {
                        value: 0,
                        label: "NO".translate(),
                        selected: true
                    },
                    {
                        value: 1,
                        label: "YES".translate()
                    }
                ]
            }
        ],
        buttonPanelPosition : 'top'
    });
    inp_doc_destination_path = new CriteriaField({
        id: "inp_doc_destination_path",
        name: "inp_doc_destination_path",
        valueType: "string",
        label: "Destination Path".translate(),
        maxLength: 200,
        controlsWidth: 380
    });

    inp_doc_tags = new CriteriaField({
        id: "inp_doc_tags",
        name: "inp_doc_tags",
        valueType: "string",
        label: "Tags".translate(),
        maxLength: 200,
        value: "INPUT",
        controlsWidth: 380
    });

    inp_doc_allowed = new PMUI.field.TextField({
        label: "Allowed file extensions (Use .* to allow any extension)".translate(),
        id: "inp_doc_type_file",
        name: "inp_doc_type_file",
        valueType: 'string',
        maxLength: 200,
        required: true,
        value: ".*",
        controlsWidth : 380

    });

    inp_doc_maximum = new PMUI.field.TextField({
        label: "Maximum file size (Use zero if unlimited)".translate(),
        id: "inp_doc_max_filesize",
        name: "inp_doc_max_filesize",
        valueType: 'string',
        maxLength: 200,
        required: true,
        value: "0",
        controlsWidth : 380,
        validators:[
            {
                pmType: "regexp",
                criteria: /^\d*$/,
                errorMessage: "Please enter a positive integer value".translate()
            }
        ]

    });

    inp_doc_maximum_unit = new PMUI.field.DropDownListField({
        id: "inp_doc_max_filesize_unit",
        name: "inp_doc_max_filesize_unit",
        label: "Unit".translate(),
        value: "ORIGINAL",
        controlsWidth: 105,
        visible: true,
        options: [
            {
                value: "KB",
                label: "KB".translate()
            },
            {
                value: "MB",
                label: "MB".translate()
            }
        ]
    });

    that.frmInputDocument.addItem(inp_doc_destination_path);
    that.frmInputDocument.addItem(inp_doc_tags);
    that.frmInputDocument.addItem(inp_doc_allowed);
    that.frmInputDocument.addItem(inp_doc_maximum);
    that.frmInputDocument.addItem(inp_doc_maximum_unit);

    /*grid panel*/

    this.grdpnlInputDocument = new PMUI.grid.GridPanel({
        id: "grdpnlInputDocument",
        pageSize: 10,
        width: "96%",
        style:{
            cssClasses:["mafe-gridPanel"]
        },
        filterPlaceholder: 'Search ...'.translate(),
        emptyMessage : 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
            return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
        },
        columns: [
            {
                id: 'grdpnlInputDocumentButtonShow',
                dataType: "button",
                title: "",
                buttonLabel: "Show ID".translate(),
                buttonStyle : {
                    cssClasses: [
                        'mafe-button-show'
                    ]
                },
                //width: "100px",
                onButtonClick: function (row, grid)
                {
                    var data = row.getData();
                    showUID(data.inp_doc_uid);
                }
            },
            {
                columnData: "inp_doc_title",
                title: "Title".translate(),
                width: "607px",
                alignment: "left",
                sortable: true,
                alignmentCell : 'left'
            },
            {
                id: 'grdpnlInputDocumentButtonEdit',
                dataType: "button",
                title: "",
                buttonLabel: "Edit".translate(),
                buttonStyle : {
                    cssClasses: [
                        'mafe-button-edit'
                    ]
                },
                // width: "80px",
                onButtonClick: function (row, grid)
                {
                    var data = row.getData();

                    that.inputDocumentOriginDataForUpdate = {};
                    that.openFormInMainWindow();
                    that.inputDocumentFormGetProxy(data.inp_doc_uid);

                }
            },
            {
                id: 'grdpnlInputDocumentButtonDelete',
                dataType: "button",
                title: "",
                buttonLabel: "Delete".translate(),
                buttonStyle : {
                    cssClasses: [
                        'mafe-button-delete'
                    ]
                },
                //width: "90px",
                onButtonClick: function (row, grid)
                {
                    var data = row.getData(),
                        confirmWindow;
                    confirmWindow = new PMUI.ui.MessageWindow({
                        id:"inputMessageWindowWarning",
                        windowMessageType : 'warning',
                        width :490,
                        bodyHeight :'auto',
                        title : "Input Documents".translate(),
                        message: "Do you want to delete this Input Document?".translate(),
                        footerItems: [
                            {
                                id: 'confirmWindowButtonNo',
                                text: "No".translate(),
                                visible: true,
                                handler: function() {
                                    confirmWindow.close();
                                },
								buttonType : "error"
                            },
							{
                                id: 'confirmWindowButtonYes',
                                text: "Yes".translate(),
                                visible: true,
                                handler: function() {
                                    that.inputDocumentDeleteRestProxy(data.inp_doc_uid);
                                    confirmWindow.close();
                                    confirmWindow.close();
                                },
								buttonType : "success"
                            }
                        ]
                    });
                    confirmWindow.open();
                    confirmWindow.dom.titleContainer.style.height="17px";
                    confirmWindow.showFooter();
                }
            }
        ],
        dataItems: null
    });
    /* main windows */
    this.winMainInputDocument = new PMUI.ui.Window({
        id      : "winMainInputDocument",
        title   : "Input Documents".translate(),
        height  : DEFAULT_WINDOW_HEIGHT,
        width   : DEFAULT_WINDOW_WIDTH,
        buttonPanelPosition: 'bottom',
        footerAlign: 'right',
        visibleFooter: true,
        footerItems: [
                      btnCancel,
                      btnSave
        ],
		onBeforeClose : function (){
			that.clickedClose = true;
			that.isDirtyFormInput();
		}
    });
    // add form and grid to windows
    this.winMainInputDocument.addItem(this.grdpnlInputDocument);
    this.winMainInputDocument.addItem(this.frmInputDocument);
    this.winMainInputDocument.open();
    //custom css
    this.frmInputDocument.getField("inp_doc_type_file").html.style.padding = "6px 0";
    this.frmInputDocument.getField("inp_doc_type_file").html.style.float="left";
    this.frmInputDocument.getField("inp_doc_max_filesize").html.style.padding = "6px 0";
    this.frmInputDocument.getField("inp_doc_max_filesize").html.style.float="left";
    this.frmInputDocument.getField("inp_doc_max_filesize_unit").html.style.padding = "6px 0";
    this.frmInputDocument.getField("inp_doc_max_filesize_unit").html.style.float="left";
    this.grdpnlInputDocument.setVisible(true);
    this.frmInputDocument.setVisible(false);
    this.winMainInputDocument.hideFooter();
    /* insert create button to grid*/
    this.grdpnlInputDocument.dom.toolbar.appendChild(btnNew.getHTML());
    btnNew.defineEvents();
    this.inputDocumentsGetRestProxy();
};

(function () {

    var loadValuesStartTimer, openForm, updateStatus;

    PMDesigner.startTimer = function (element) {

        var startTimer = element,
                restClient,
                loadServerData,
                listUsers,
                dataForm;

        loadValuesStartTimer = function ($flag) {
            listUsers = [];
            dataForm = [];
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'activity/' + startTimer.ports.get(0).connection.flo_element_dest + '/assignee/all',
                            method: 'GET'
                        },
                        {
                            url: 'case-scheduler/' + startTimer.evn_uid,
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    listUsers = response[0].response;
                    dataForm = response[1].response;
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: [null, 'There are problems loading the Start Timer, please try again.'.translate()]
            });
            restClient.executeRestClient();
            if ($flag) {
                return listUsers.length;
            }
            return true;
        };

        var updateCaseScheduler = function (data) {
            restProxy = new PMRestClient({
                endpoint: 'case-scheduler/' + startTimer.evn_uid,
                typeRequest: 'update',
                data: data,
                functionSuccess: function (xhr, response)
                {
                    formCreateCaseScheduler.reset();
                    schedulerListWindow.close();
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageSuccess: 'Start Timer updated successfully'.translate(),
                messageError: 'There are problems updating the Start Timer, please try again.'.translate(),
                flashContainer: document.body
            });
            restProxy.executeRestClient();
        };

        updateStatus = function () {
            var status = (typeof dataForm.sch_state !== 'undefined') ? ((dataForm.sch_state === 'ACTIVE') ? 'INACTIVE' : 'ACTIVE') : 'INACTIVE';
            dataForm.sch_state = status;
            updateCaseScheduler(dataForm);
        };

        //Items for the form Create and edit Case Scheduler
        var itemsDaly = [
            {
                pmType: 'panel',
                layout: 'hbox',
                items: [
                    {
                        id: 'startDate',
                        pmType: 'datetime',
                        label: 'Start date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: true,
                        dateFormat: 'yy mm dd',
                        dateTime: false,
                        name: 'startDate',
                        valueType: 'date',
                        labelWidth: '26%'
                    },
                    {
                        id: 'endDate',
                        pmType: 'datetime',
                        label: 'End date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: false,
                        dateFormat: 'yy mm dd',
                        dateTime: false,
                        name: 'endDate',
                        valueType: 'date'
                    }
                ]
            },
            {
                id: 'execttime',
                pmType: 'text',
                label: 'Execution time'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                valueType: 'string',
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'.translate()
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            }
        ];

        var itemsWeekly = [
            {
                pmType: 'panel',
                layout: 'hbox',
                items: [
                    {
                        id: 'startDate',
                        pmType: 'datetime',
                        label: 'Start date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: true,
                        dateFormat: 'yy mm dd',
                        dateTime: false,
                        name: 'startDate',
                        valueType: 'date',
                        labelWidth: '26%'
                    },
                    {
                        id: 'endDate',
                        pmType: 'datetime',
                        label: 'End date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: false,
                        dateFormat: 'yy mm dd',
                        dateTime: false,
                        name: 'endDate',
                        valueType: 'date'
                    }
                ]
            },
            {
                id: 'execttime',
                pmType: 'text',
                label: 'Execution time'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                valueType: 'string',
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'.translate()
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            },
            {
                id: 'daysoftheweek',
                pmType: 'checkbox',
                label: 'Select the day(s) of the week below'.translate(),
                value: '',
                name: 'daysoftheweek',
                required: false,
                controlPositioning: 'horizontal',
                maxDirectionOptions: 3,
                options: [
                    {
                        id: 'monday',
                        label: 'Monday'.translate(),
                        value: '1'
                    },
                    {
                        id: 'tuesday',
                        label: 'Tuesday'.translate(),
                        value: '2'
                    },
                    {
                        id: 'wednesday',
                        label: 'Wednesday'.translate(),
                        value: '3'
                    },
                    {
                        id: 'thursday',
                        label: 'Thursday'.translate(),
                        value: '4'
                    },
                    {
                        id: 'friday',
                        label: 'Friday'.translate(),
                        value: '5'
                    },
                    {
                        id: 'saturday',
                        label: 'Saturday'.translate(),
                        value: '6'
                    },
                    {
                        id: 'sunday',
                        label: 'Sunday'.translate(),
                        value: '7'
                    }
                ]
            }
        ];

        loadOptionsRadio = function (newVal) {
            var paneldaysofMonth = formCreateCaseScheduler.getItems()[1].getItems()[2].getItems()[1];
            paneldaysofMonth.setVisible(true);
            if (newVal === 'dayofmonth') {
                paneldaysofMonth.getItems()[0].setVisible(true);
                paneldaysofMonth.getItems()[1].setVisible(false);
            } else if (newVal === 'day') {
                paneldaysofMonth.getItems()[0].setVisible(false);
                paneldaysofMonth.getItems()[1].setVisible(true);
            }
        };

        var itemsMonthly = [
            {
                pmType: 'panel',
                layout: 'hbox',
                items: [
                    {
                        id: 'startDate',
                        pmType: 'datetime',
                        label: 'Start date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: true,
                        dateFormat: 'yy mm dd',
                        datetime: false,
                        name: 'startDate',
                        valueType: 'date',
                        labelWidth: '26%'
                    },
                    {
                        id: 'endDate',
                        pmType: 'datetime',
                        label: 'End date'.translate(),
                        value: '',
                        returnFormat: 'yy-mm-dd',
                        required: false,
                        dateFormat: 'yy mm dd',
                        datetime: false,
                        name: 'endDate',
                        valueType: 'date'
                    }
                ]
            },
            {
                id: 'execttime',
                pmType: 'text',
                label: 'Execution time'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                valueType: 'string',
                controlsWidth: 580,
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'.translate()
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            },
            {
                pmType: 'panel',
                id: 'panelDays',
                layout: 'hbox',
                items: [
                    {
                        id: 'options',
                        pmType: 'radio',
                        label: '',
                        value: '',
                        name: 'options',
                        required: false,
                        controlPositioning: 'vertical',
                        maxDirectionOptions: 4,
                        options: [
                            {
                                id: 'dayMonth',
                                label: 'Day of month'.translate(),
                                value: 'dayofmonth'
                            },
                            {
                                id: 'day',
                                label: 'The day'.translate(),
                                value: 'day'
                            }
                        ],
                        onChange: function (newVal, oldVal) {
                            loadOptionsRadio(newVal);
                        },
                        labelWidth: '46%'
                    },
                    {
                        pmType: 'panel',
                        id: 'paneldaysofMonth',
                        layout: 'vbox',
                        items: [
                            {
                                id: 'dayoftheMonth',
                                pmType: 'text',
                                label: '',
                                value: '',
                                placeholder: 'Day of the month (example: 1)'.translate(),
                                required: false,
                                name: 'dayMonth',
                                valueType: 'string'
                            },
                            {
                                pmType: 'panel',
                                id: 'panelmonth',
                                layout: 'hbox',
                                items: [
                                    {
                                        id: 'first',
                                        pmType: 'dropdown',
                                        label: '',
                                        value: '',
                                        required: false,
                                        name: 'first',
                                        valueType: 'string',
                                        options: [
                                            {
                                                label: 'First'.translate(),
                                                value: '1'
                                            },
                                            {
                                                label: 'Second'.translate(),
                                                value: '2'
                                            },
                                            {
                                                label: 'Third'.translate(),
                                                value: '3'
                                            },
                                            {
                                                label: 'Fourth'.translate(),
                                                value: '4'
                                            },
                                            {
                                                label: 'Last'.translate(),
                                                value: '5'
                                            }
                                        ],
                                        controlsWidth: 100
                                    },
                                    {
                                        id: 'day',
                                        pmType: 'dropdown',
                                        label: '',
                                        value: '',
                                        required: false,
                                        name: 'day',
                                        valueType: 'string',
                                        options: [
                                            {
                                                label: 'Monday'.translate(),
                                                value: '1'
                                            },
                                            {
                                                label: 'Tuesday'.translate(),
                                                value: '2'
                                            },
                                            {
                                                label: 'Wednesday'.translate(),
                                                value: '3'
                                            },
                                            {
                                                label: 'Thursday'.translate(),
                                                value: '4'
                                            },
                                            {
                                                label: 'Friday'.translate(),
                                                value: '5'
                                            },
                                            {
                                                label: 'Saturday'.translate(),
                                                value: '6'
                                            },
                                            {
                                                label: 'Sunday'.translate(),
                                                value: '7'
                                            }
                                        ],
                                        controlsWidth: 100
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                id: 'months',
                pmType: 'checkbox',
                label: 'Of the month(s)'.translate(),
                value: '',
                name: 'months',
                required: false,
                controlPositioning: 'horizontal',
                maxDirectionOptions: 4,
                options: [
                    {
                        id: 'jan',
                        label: 'Jan'.translate(),
                        value: '1'
                    },
                    {
                        id: 'feb',
                        label: 'Feb'.translate(),
                        value: '2'
                    },
                    {
                        id: 'mar',
                        label: 'Mar'.translate(),
                        value: '3'
                    },
                    {
                        id: 'apr',
                        label: 'Apr'.translate(),
                        value: '4'
                    },
                    {
                        id: 'may',
                        label: 'May'.translate(),
                        value: '5'
                    },
                    {
                        id: 'jun',
                        label: 'Jun'.translate(),
                        value: '6'
                    },
                    {
                        id: 'jul',
                        label: 'Jul'.translate(),
                        value: '7'
                    },
                    {
                        id: 'aug',
                        label: 'Aug'.translate(),
                        value: '8'
                    },
                    {
                        id: 'sep',
                        label: 'Sep'.translate(),
                        value: '9'
                    },
                    {
                        id: 'oct',
                        label: 'Oct'.translate(),
                        value: '10'
                    },
                    {
                        id: 'nov',
                        label: 'Nov'.translate(),
                        value: '11'
                    },
                    {
                        id: 'dec',
                        label: 'Dec'.translate(),
                        value: '12'
                    }
                ]
            }
        ];

        var itemsOneTime = [{
                id: 'execttime',
                pmType: 'text',
                label: 'Execution time'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                valueType: 'string',
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'.translate()
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            }];

        var itemsEvery = [{
                id: 'execttime',
                pmType: 'text',
                label: 'Execute every Hour(s)'.translate(),
                value: '',
                required: true,
                name: 'execttime',
                valueType: 'string',
                placeholder: '(HH:MM) Format 24 hrs.'.translate(),
                validators: [{
                        pmType: 'regexp',
                        criteria: /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/,
                        errorMessage: 'Please enter a valid hour.'.translate()
                    }
                ],
                helper: 'Example: 1:00, 14:30, 00:00'
            }];

        showProperties = function (newValue) {
            switch (newValue) {
                case 'daily':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsDaly);
                    break;
                case 'weekly':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsWeekly);
                    break;
                case 'monthly':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsMonthly);
                    var paneldaysofMonth = formCreateCaseScheduler.getItems()[1].getItems()[2].getItems()[1];
                    paneldaysofMonth.setVisible(false);
                    formCreateCaseScheduler.getItems()[1].getItems()[2].getItems()[0].hideColon();
                    paneldaysofMonth.getItems()[0].hideColon();
                    paneldaysofMonth.getItems()[1].getItems()[0].hideColon();
                    paneldaysofMonth.getItems()[1].getItems()[1].hideColon();
                    break;
                case 'oneTime':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsOneTime);
                    break;
                case 'every':
                    formCreateCaseScheduler.getItems()[1].clearItems();
                    formCreateCaseScheduler.getItems()[1].setVisible(true);
                    formCreateCaseScheduler.getItems()[1].setItems(itemsEvery);
                    validateKeysField(formCreateCaseScheduler.getField('execttime').getControls()[0].getHTML(), ['isnumber', 'iscolon']);
                    break;
            }
        };

        //Form to Edit and create the Case Scheduler
        var formCreateCaseScheduler = new PMUI.form.Form({
            id: 'formCreateCaseScheduler',
            border: false,
            visibleHeader: false,
            width: '925px',
            name: 'formcreate',
            title: '',
            items: [
                {
                    id: 'panelProperties',
                    pmType: 'panel',
                    layout: 'vbox',
                    fieldset: true,
                    height: '350px',
                    legend: 'Properties'.translate(),
                    items: [
                        {
                            id: 'state',
                            pmType: 'dropdown',
                            label: 'Status'.translate(),
                            name: 'state',
                            required: true,
                            value: '',
                            controlsWidth: 150,
                            options: [
                                {
                                    value: 'ACTIVE',
                                    label: 'Active'.translate()
                                },
                                {
                                    value: 'INACTIVE',
                                    label: 'Inactive'.translate()
                                }
                            ]
                        },
                        {
                            id: 'username',
                            pmType: 'dropdown',
                            label: 'User'.translate(),
                            name: 'username',
                            required: true,
                            controlsWidth: 300,
                            value: '',
                            options: [],
                            onChange: function (newValue, prevValue) {
                            }
                        },
                        {
                            id: 'name',
                            pmType: 'text',
                            label: 'Name'.translate(),
                            value: startTimer.evn_name,
                            required: true,
                            name: 'name',
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: 'performTask',
                            pmType: 'dropdown',
                            label: 'Perform this task'.translate(),
                            name: 'performTask',
                            required: true,
                            value: '',
                            controlsWidth: 300,
                            options: [
                                {
                                    label: '- Select -'.translate(),
                                    value: '',
                                    disabled: true,
                                    selected: true
                                },
                                {
                                    value: 'daily',
                                    label: 'Daily'.translate()
                                },
                                {
                                    value: 'weekly',
                                    label: 'Weekly'.translate()
                                },
                                {
                                    value: 'monthly',
                                    label: 'Monthly'.translate()
                                },
                                {
                                    value: 'oneTime',
                                    label: 'One Time Only'.translate()
                                },
                                {
                                    value: 'every',
                                    label: 'Every'.translate()
                                }
                            ],
                            onChange: function (newValue, prevValue) {
                                showProperties(newValue);
                            }
                        }
                    ]
                },
                {
                    id: 'panelSelectDate',
                    pmType: 'panel',
                    layout: 'vbox',
                    fieldset: true,
                    visible: false,
                    height: '350px',
                    legend: 'Select the date and time for case(s) to be initiated.'.translate(),
                    items: []
                }
            ]
        });

        var buttonCancel = new PMUI.ui.Button({
            id: 'cancelSchedulerButton',
            text: 'Cancel'.translate(),
            buttonType: 'error',
            handler: function (event) {
                if (formCreateCaseScheduler.isDirty()) {
                    var message_window = new PMUI.ui.MessageWindow({
                        windowMessageType: 'warning',
                        width: 490,
                        bodyHeight: 'auto',
                        id: 'cancelMessageStartTimer',
                        title: 'Start Timer Event'.translate(),
                        message: 'Are you sure you want to discard your changes?'.translate(),
                        footerItems: [
                            {
                                text: 'No'.translate(),
                                handler: function () {
                                    message_window.close();
                                },
								buttonType : "error"
                            },
							{
                                text: 'Yes'.translate(),
                                handler: function () {
                                    message_window.close();
                                    schedulerListWindow.close();
                                },
								buttonType : "success"
                            }
                        ]
                    });
                    message_window.open();
                    message_window.showFooter();
                } else {
                    formCreateCaseScheduler.reset();
                    schedulerListWindow.close();
                }
            }
        });

        //Window Buttons
        var buttonSave = new PMUI.ui.Button({
            id: 'saveSchedulerButton',
            text: 'Save'.translate(),
            height: 31,
            buttonType: 'success',
            handler: function (event) {
                if (formCreateCaseScheduler.isValid()) {
                    var dataFormCreate = formCreateCaseScheduler.getData();

                    var dataToSend = {
                        sch_del_user_name: dataFormCreate.username,
                        sch_name: startTimer.evn_name,
                        tas_uid: startTimer.ports.get(0).connection.flo_element_dest,
                        sch_start_time: '',
                        sch_start_date: '',
                        sch_week_days: '',
                        sch_start_day: '',
                        sch_start_day_opt_1: '',
                        sch_start_day_opt_2: '',
                        sch_months: '',
                        sch_end_date: '',
                        sch_repeat_every: '',
                        sch_state: (dataFormCreate.state !== '') ? dataFormCreate.state : 'ACTIVE',
                        sch_option: ''
                    };

                    var perform = dataFormCreate.performTask;
                    switch (perform) {
                        case 'daily':
                            dataToSend.sch_option = '1';
                            dataToSend.sch_start_time = dataFormCreate.execttime;
                            dataToSend.sch_start_date = dataFormCreate.startDate;
                            dataToSend.sch_end_date = dataFormCreate.endDate;
                            break;
                        case 'weekly':
                            var formdays = eval(dataFormCreate.daysoftheweek);
                            var days = '';
                            for (i = 0; i < formdays.length; i++) {
                                if (i !== (formdays.length - 1)) {
                                    days += formdays[i] + '|';
                                } else {
                                    days += formdays[i];
                                }
                            }

                            dataToSend.sch_option = '2';
                            dataToSend.sch_start_time = dataFormCreate.execttime;
                            dataToSend.sch_start_date = dataFormCreate.startDate;
                            dataToSend.sch_end_date = dataFormCreate.endDate;
                            dataToSend.sch_week_days = days;
                            break;
                        case 'monthly':
                            dataToSend.sch_option = '3';
                            dataToSend.sch_start_time = dataFormCreate.execttime;
                            dataToSend.sch_start_date = dataFormCreate.startDate;
                            dataToSend.sch_end_date = dataFormCreate.endDate;
                            if (dataFormCreate.options === 'dayofmonth') {
                                var formmonths = eval(dataFormCreate.months);
                                var months = '';
                                for (i = 0; i < formmonths.length; i++) {
                                    if (i !== (formmonths.length - 1)) {
                                        months += formmonths[i] + '|';
                                    } else {
                                        months += formmonths[i];
                                    }
                                }
                                dataToSend.sch_start_day = '1'; //Day of month
                                dataToSend.sch_start_day_opt_1 = dataFormCreate.dayMonth;//1 to 31 - day of the month
                            } else if (dataFormCreate.options === 'day') {
                                var opt2 = dataFormCreate.first + '|' + dataFormCreate.day;
                                var formmonths = eval(dataFormCreate.months);
                                var months = '';
                                for (i = 0; i < formmonths.length; i++) {
                                    if (i !== (formmonths.length - 1)) {
                                        months += formmonths[i] + '|';
                                    } else {
                                        months += formmonths[i];
                                    }
                                }
                                dataToSend.sch_start_day = '2'; //Day of month
                                dataToSend.sch_start_day_opt_2 = opt2;//1 to 31 - day of the month

                            }
                            dataToSend.sch_months = months;
                            break;
                        case 'oneTime':
                            dataToSend.sch_option = '4';
                            dataToSend.sch_start_time = dataFormCreate.execttime;
                            break;
                        case 'every':
                            dataToSend.sch_option = '5';
                            dataToSend.sch_repeat_every = timeToDecimal(dataFormCreate.execttime).toFixed(2);
                            break;
                    }
                    updateCaseScheduler(dataToSend);
                }
            }
        });

        //load users
        loadUsers = function () {
            var field = formCreateCaseScheduler.getField('username');
            field.clearOptions();
            for (var i = 0; i < listUsers.length; i++) {
                field.addOption({
                    value: listUsers[i].aas_username,
                    label: listUsers[i].aas_name + ' ' + listUsers[i].aas_lastname
                });
            }
        };

        loadDataForm = function () {
            loadTime = function (dataEdit, dataForm) {
                var starDate;
                var endDate;
                starDate = dataForm.sch_start_date ? dataForm.sch_start_date.split(' ') : [''];
                endDate = dataForm.sch_end_date ? dataForm.sch_end_date.split(' ') : [''];

                var startTime = dataForm.sch_start_time.split(' ');
                startTime = startTime[1].split(':');
                var finallyST = startTime[0] + ':' + startTime[1];
                dataEdit[4].setValue(starDate[0]);
                dataEdit[5].setValue(endDate[0]);
                dataEdit[6].setValue(finallyST);
            };
            var dataEdit = formCreateCaseScheduler.getFields();

            dataEdit[0].setValue(dataForm.sch_state);
            dataEdit[1].setValue(dataForm.sch_del_user_name);
            var option = 'daily';
            switch (dataForm.sch_option) {
                case '1':
                    option = 'daily';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    loadTime(dataEdit, dataForm);
                    break;
                case '2':
                    option = 'weekly';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    loadTime(dataEdit, dataForm);

                    var daysVal = "[\"";
                    var days = dataForm.sch_week_days.split('|');
                    for (i = 0; i < days.length; i++) {
                        if (i !== (days.length - 1)) {
                            daysVal += days[i] + "\",\"";
                        } else {
                            daysVal += days[i] + "\"]";
                        }
                    }
                    dataEdit[7].setValue(daysVal);
                    break;
                case '3':
                    option = 'monthly';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    loadTime(dataEdit, dataForm);
                    var days = [];
                    if (dataForm.sch_start_day !== '') {
                        days = dataForm.sch_start_day.split('|');
                    }

                    if (days[0] === '1') {
                        dataEdit[7].setValue('dayofmonth');
                        loadOptionsRadio('dayofmonth');
                        dataEdit[8].setValue(days[1]);
                    } else if (days[0] === '2') {
                        dataEdit[7].setValue('day');
                        loadOptionsRadio('day');
                        dataEdit[9].setValue(days[1]);
                        dataEdit[10].setValue(days[2]);
                    }
                    var monthsVal = "[\"";
                    var monthsop = dataForm.sch_months.split('|');
                    for (i = 0; i < monthsop.length; i++) {
                        if (i !== (monthsop.length - 1)) {
                            monthsVal += monthsop[i] + "\",\"";
                        } else {
                            monthsVal += monthsop[i] + "\"]";
                        }
                    }
                    dataEdit[11].setValue(monthsVal);
                    break;
                case '4':
                    option = 'oneTime';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    var startTime = dataForm.sch_start_time.split(' ');
                    startTime = startTime[1].split(':');
                    var finallyST = startTime[0] + ':' + startTime[1];
                    dataEdit[4].setValue(finallyST);
                    break;
                case '5':
                    option = 'every';
                    dataEdit[3].setValue(option);
                    showProperties(option);
                    dataEdit = formCreateCaseScheduler.getFields();
                    dataEdit[4].setValue(decimalToTime(parseFloat(dataForm.sch_repeat_every)));
                    break;
            }
        };

        //Main window Case Scheduler
        var schedulerListWindow = new PMUI.ui.Window({
            id: 'schedulerListWindow',
            title: 'Start Timer Event'.translate(),
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            buttonPanelPosition: 'top',
            buttons: [
                buttonSave,
                {pmType: 'label', text: 'or'},
                buttonCancel
            ]
        });

        openForm = function () {
            schedulerListWindow.addItem(formCreateCaseScheduler);
            schedulerListWindow.open();
            loadUsers();
            loadDataForm();
            applyStyleWindowForm(schedulerListWindow);
            schedulerListWindow.showFooter();
            schedulerListWindow.defineEvents();
        };
    };

    PMDesigner.startTimer.openForm = function (element) {
        openForm();
    };

    PMDesigner.startTimer.validate = function (element) {
        if (element.ports.isEmpty()) {
            PMDesigner.msgFlash('Must connect to a Task'.translate(), document.body, 'error', 3000, 5);
            return false;
        }
        PMDesigner.startTimer(element);
        if (loadValuesStartTimer(true) === 0) {
            PMDesigner.msgFlash('The task doesn\'t have assigned users'.translate(), document.body, 'info', 3000, 5);
            return false;
        }
        return true;
    };

}());
(
    function ()
    {

        var dataBaseConnectionOption,
            winFrmDataBaseConnectionShow,
			frmDataBaseConnection,
			closeClicked = true;

        PMDesigner.database = function (event)
        {
            var winGrdpnlDataBaseConnection,
            panelTest,
            grdpnlDataBaseConnection,
            flagError,
            titleOld,
            btnNew,
            btnTestConnection,
            btnCreate,
            btnCancel,
            dataBaseConnectionData;

            disableAllItems = function ()
            {
                winGrdpnlDataBaseConnection.getItems()[0].setVisible(false);
                winGrdpnlDataBaseConnection.getItems()[1].setVisible(false);
                winGrdpnlDataBaseConnection.getItems()[2].setVisible(false);

                txtUID.setVisible(false);
                btnTestConnection.setVisible(false);
                btnBack.setVisible(false);
                btnCreate.setVisible(false);
                btnCancel.setVisible(false);
                //winGrdpnlDataBaseConnection.hideFooter();
            }

            var testShow = function (testData)
            {
                var msg = "";
                flagError = 0;
                disableAllItems();
                titleOld = winGrdpnlDataBaseConnection.getTitle();
                winGrdpnlDataBaseConnection.setTitle("Testing Server Connection".translate());
                winGrdpnlDataBaseConnection.getItems()[2].setVisible(true);

                for (var i = 0; i <= testData.length - 1; i++) {
                    var flag = (typeof(testData[i].error) != "undefined")? 1 : 0;

                    if (flag != 1) {
                        msg =  msg + "<img src = \"/images/select-icon.png\" width=\"17\" height=\"17\" style=\"margin-right: 0.9em;\" />" + testData[i].test + "<br />";
                    } else {
                        msg =  msg + "<img src = \"/images/error.png\" width=\"21\" height=\"21\" style=\"margin-right: 0.6em;\" />" + testData[i].error + "<br />";
                    }

                    if (typeof(testData[i].error) != "undefined" && flagError == 0) {
                        flagError = 1;
                    }
                }
                if (flag == 0) {
                    btnCreate.setVisible(true);
                    btnBack.setVisible(true);
                } else {
                    btnBack.setVisible(true);
                }

                var titleSummary = "<div style=\"margin: 1em 1em 0.5em 1em; padding: 0 2em 0 2em; border: 2px solid #AFC5D0; background:#D7ECF1; font: bold 1em arial; text-align: center; width: "+ (DEFAULT_WINDOW_WIDTH - 22) +";\">Testing Database Server configuration</div>";

                var style = $('#panelTest').attr("style");
                titleSummary = titleSummary + "<div style=\"margin-left: 0.5em; padding: 0.5em; height: 235px;\">" + msg + "</div>";
                $('#panelTest').empty();
                style = style + ' background: #FFFFFF; font: normal 0.8em arial;';
                $('#panelTest').attr("style", style);
                $('#panelTest').append(titleSummary);
            };

			var isDirtyFrmDataBaseConnection = function (){
			    $("input,select,textarea").blur();
				if (frmDataBaseConnection.isVisible()){
					if (frmDataBaseConnection.isDirty()){
						var message_window = new PMUI.ui.MessageWindow({
							id: "cancelMessageTriggers",
							windowMessageType: 'warning',
							width: 490,
							title : "Database Connections".translate(),
							message : 'Are you sure you want to discard your changes?'.translate(),
							footerItems: [
								{
									text: "No".translate(),
									handler: function() {
										message_window.close();
									},
									buttonType : "error"
								},
								{
									text: "Yes".translate(),
									handler: function() {
										message_window.close();
										dataBaseConnectionOption = "";
										if(closeClicked){
											winGrdpnlDataBaseConnection.close();
										}
										refreshGridPanelInMainWindow(false);
									},
									buttonType : "success"
								}
							],
							title: 'Confirm'.translate()
						});
						message_window.open();
						message_window.showFooter();
					} else {
						if(closeClicked){
							winGrdpnlDataBaseConnection.close();
						}else{
							dataBaseConnectionOption = "";
							refreshGridPanelInMainWindow(false);
						}
					}
				}else{
					winGrdpnlDataBaseConnection.close();
				}
			};
            var showForm = function () {
                disableAllItems();
                //winGrdpnlDataBaseConnection.showFooter();
                winGrdpnlDataBaseConnection.setTitle(titleOld);
                winGrdpnlDataBaseConnection.getItems()[1].setVisible(true);
                btnTestConnection.setVisible(true);
                btnCancel.setVisible(true);
            }

            var refreshGridPanelInMainWindow = function (load)
            {
                disableAllItems();
                winGrdpnlDataBaseConnection.hideFooter();
                dataBaseConnectionOption = "";
                winGrdpnlDataBaseConnection.getItems()[0].setVisible(true);
                winGrdpnlDataBaseConnection.setTitle("Database Connections".translate());
                load = load != null ? load : true;
                if (load) {
                    dataBaseConnectionsGetRestProxy(grdpnlDataBaseConnection);
                }
            };

            var listDBConnection;
            var dataBaseConnectionsGetRestProxy = function (grdpnl)
            {
                var restProxy = new PMRestClient ({
                    endpoint: "database-connections",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        listDBConnection = response;
                        grdpnl.setDataItems(listDBConnection);
                        grdpnl.sort('dbs_database_name', 'asc');
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restProxy.executeRestClient();
            };

            var dataBaseConnectionPostTestRestProxy = function (data)
            {
                var restProxy = new PMRestClient ({
                    endpoint: "database-connection/test",
                    typeRequest: "post",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        testShow(response);
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restProxy.executeRestClient();
            };

            var dataBaseConnectionGetRestProxy = function (dataBaseConnectionUid)
            {
                var restProxy = new PMRestClient ({
                    endpoint: "database-connection/" + dataBaseConnectionUid,
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        dataBaseConnectionOption = "PUT";
                        winFrmDataBaseConnectionShow("PUT", data);
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restProxy.executeRestClient();
            };

            var dataBaseConnectionPutRestProxy = function (dataBaseConnectionUid, data)
            {
                var restProxy = new PMRestClient({
                    endpoint: "database-connection/" + dataBaseConnectionUid,
                    typeRequest: "update",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageSuccess: 'Database connection edited successfully'.translate(),
                    flashContainer: grdpnlDataBaseConnection
                });

                restProxy.executeRestClient();
            };

            var dataBaseConnectionDeleteRestProxy = function (dataBaseConnectionUid)
            {
                var restProxy = new PMRestClient({
                    endpoint: "database-connection/" + dataBaseConnectionUid,
                    typeRequest: "remove",
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageSuccess: 'Database connection deleted successfully'.translate(),
                    flashContainer: grdpnlDataBaseConnection
                });
                restProxy.executeRestClient();
            };

            var dataBaseConnectionPostRestProxy = function (data)
            {
                var restProxy = new PMRestClient ({
                    endpoint: "database-connection",
                    typeRequest: "post",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);

                        refreshGridPanelInMainWindow();
                    },
                    messageError : 'An unexpected error while deleting the DB Connection, please try again later.'.translate(),
                    messageSuccess: 'Database connection saved successfully'.translate(),
                    flashContainer: grdpnlDataBaseConnection
                });

                restProxy.executeRestClient();
            };

            var cboEngineSetOptionsRestProxy = function (cboEngine, cboEncode)
            {
                cboEngine.clearOptions();
                var restProxy = new PMRestClient ({
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        var arrayOptions = [];
                        for (var i = 0; i <= data.length - 1; i++)  {
                            arrayOptions.push(
                                {
                                    value: data[i].id,
                                    label: data[i].name
                                }
                            );
                        }
                        cboEngine.setOptions(arrayOptions);
                        cboEngine.setValue(arrayOptions[0].value);
                        cboEncodeSetOptionsRestProxy(cboEngine.getValue(), cboEncode);
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });

                restProxy.setBaseEndPoint("system/db-engines");
                restProxy.executeRestClient();
            };

            var hideEncoderOptions = function ()
            {
                cboEncode.setVisible(true);
                cboConnectionTypeOracle.setVisible(true);
            };

            var showEncoderOptions = function ()
            {
                cboEncode.setVisible(true);
                cboConnectionTypeOracle.setVisible(false);
            };
            var cboConnectionTypeOracleSetOptions = function (cboConnectionTypeOracle)
            {
                cboConnectionTypeOracle.clearOptions();

                var arrayEnconde = [];
                var arrayOptions = [];

                arrayEnconde = [
                    {"value": "NORMAL",     "text": "Normal"},
                    {"value": "TNS",  "text": "TNS"}
                ];

                for (var i = 0; i <= arrayEnconde.length - 1; i++)  {
                    arrayOptions.push(
                        {
                            value: arrayEnconde[i].value,
                            label: arrayEnconde[i].text
                        }
                    );
                }

                cboConnectionTypeOracle.setOptions(arrayOptions);
            };
            var cboEncodeSetOptionsRestProxy = function (selectedCboEngineValue, cboEncode)
            {
                cboEncode.clearOptions();

                var arrayEnconde = [];
                var encode = selectedCboEngineValue;

                arrayEnconde["mysql"] = [
                    {"value": "big5",     "text": "big5 - Big5 Traditional Chinese"},
                    {"value": "dec8",     "text": "dec8 - DEC West European"},
                    {"value": "cp850",    "text": "cp850 - DOS West European"},
                    {"value": "hp8",      "text": "hp8 - HP West European"},
                    {"value": "koi8r",    "text": "koi8r - KOI8-R Relcom Russian"},
                    {"value": "latin1",   "text": "latin1 - cp1252 West European"},
                    {"value": "latin2",   "text": "latin2 - ISO 8859-2 Central European"},
                    {"value": "swe7",     "text": "swe7 - 7bit Swedish"},
                    {"value": "ascii",    "text": "ascii - US ASCII"},
                    {"value": "ujis",     "text": "ujis - EUC-JP Japanese"},
                    {"value": "sjis",     "text": "sjis - Shift-JIS Japanese"},
                    {"value": "hebrew",   "text": "hebrew - ISO 8859-8 Hebrew"},
                    {"value": "tis620",   "text": "tis620 - TIS620 Thai"},
                    {"value": "euckr",    "text": "euckr - EUC-KR Korean"},
                    {"value": "koi8u",    "text": "koi8u - KOI8-U Ukrainian"},
                    {"value": "gb2312",   "text": "gb2312 - GB2312 Simplified Chinese"},
                    {"value": "greek",    "text": "greek - ISO 8859-7 Greek"},
                    {"value": "cp1250",   "text": "cp1250 - Windows Central European"},
                    {"value": "gbk",      "text": "gbk - GBK Simplified Chinese"},
                    {"value": "latin5",   "text": "latin5 - ISO 8859-9 Turkish"},
                    {"value": "armscii8", "text": "armscii8 - ARMSCII-8 Armenian"},
                    {"value": "utf8",     "text": "utf8 - UTF-8 Unicode"},
                    {"value": "ucs2",     "text": "ucs2 - UCS-2 Unicode"},
                    {"value": "cp866",    "text": "cp866 - DOS Russian"},
                    {"value": "keybcs2",  "text": "keybcs2 - DOS Kamenicky Czech-Slovak"},
                    {"value": "macce",    "text": "macce - Mac Central European"},
                    {"value": "macroman", "text": "macroman - Mac West European"},
                    {"value": "cp852",    "text": "cp852 - DOS Central European"},
                    {"value": "latin7",   "text": "atin7 - ISO 8859-13 Baltic"},
                    {"value": "cp1251",   "text": "cp1251 - Windows Cyrillic"},
                    {"value": "cp1256",   "text": "cp1256  - Windows Arabic"},
                    {"value": "cp1257",   "text": "cp1257  - Windows Baltic"},
                    {"value": "binary",   "text": "binary  - Binary pseudo charset"},
                    {"value": "geostd8",  "text": "geostd8 - GEOSTD8 Georgian"},
                    {"value": "cp932",    "text": "cp932] - SJIS for Windows Japanese"},
                    {"value": "eucjpms",  "text": "eucjpms - UJIS for Windows Japanese"}
                ];

                arrayEnconde["pgsql"] = [
                    {"value": "BIG5",       "text": "BIG5"},
                    {"value": "EUC_CN",     "text": "EUC_CN"},
                    {"value": "EUC_JP",     "text": "EUC_JP"},
                    {"value": "EUC_KR",     "text": "EUC_KR"},
                    {"value": "EUC_TW",     "text": "EUC_TW"},
                    {"value": "GB18030",    "text": "GB18030"},
                    {"value": "GBK",        "text": "GBK"},
                    {"value": "ISO_8859_5", "text": "ISO_8859_5"},
                    {"value": "ISO_8859_6", "text": "ISO_8859_6"},
                    {"value": "ISO_8859_7", "text": "ISO_8859_7"},
                    {"value": "ISO_8859_8", "text": "ISO_8859_8"},
                    {"value": "JOHAB",      "text": "JOHAB"},
                    {"value": "KOI8",       "text": "KOI8"},
                    {"value": "selected",   "text": "LATIN1"},
                    {"value": "LATIN2",     "text": "LATIN2"},
                    {"value": "LATIN3",     "text": "LATIN3"},
                    {"value": "LATIN4",     "text": "LATIN4"},
                    {"value": "LATIN5",     "text": "LATIN5"},
                    {"value": "LATIN6",     "text": "LATIN6"},
                    {"value": "LATIN7",     "text": "LATIN7"},
                    {"value": "LATIN8",     "text": "LATIN8"},
                    {"value": "LATIN9",     "text": "LATIN9"},
                    {"value": "LATIN10",    "text": "LATIN10"},
                    {"value": "SJIS",       "text": "SJIS"},
                    {"value": "SQL_ASCII",  "text": "SQL_ASCII"},
                    {"value": "UHC",        "text": "UHC"},
                    {"value": "UTF8",       "text": "UTF8"},
                    {"value": "WIN866",     "text": "WIN866"},
                    {"value": "WIN874",     "text": "WIN874"},
                    {"value": "WIN1250",    "text": "WIN1250"},
                    {"value": "WIN1251",    "text": "WIN1251"},
                    {"value": "WIN1252",    "text": "WIN1252"},
                    {"value": "WIN1256",    "text": "WIN1256"},
                    {"value": "WIN1258",    "text": "WIN1258"}
                ];

                arrayEnconde["mssql"] = [
                    {"value": "utf8", "text": "utf8 - UTF-8 Unicode"}
                ];

                arrayEnconde["oracle"] = [
                    {"value": "UTF8",      "text": "UTF8 - Unicode 3.0 UTF-8 Universal character set, CESU-8 compliant"},
                    {"value": "UTFE",      "text": "UTFE - EBCDIC form of Unicode 3.0 UTF-8 Universal character set"},
                    {"value": "AL16UTF16", "text": "AL16UTF16 - Unicode 3.1 UTF-16 Universal character set"},
                    {"value": "AL32UTF8",  "text": "AL32UTF8 - Unicode 3.1 UTF-8 Universal character set"}
                ];

                arrayEnconde["sqlsrv"] = [
                    {"value": "utf8", "text": "utf8 - UTF-8 Unicode"}
                ];

                var arrayNewEnconde = (typeof(arrayEnconde[encode]) != "undefined")? arrayEnconde[encode] : [];
                var arrayOptions = [];

                for (var i = 0; i <= arrayNewEnconde.length - 1; i++)  {
                    arrayOptions.push(
                        {
                            value: arrayNewEnconde[i].value,
                            label: arrayNewEnconde[i].text
                        }
                    );
                }

                cboEncode.setOptions(arrayOptions);
                cboEncode.setValue('utf8');

                var portsDefault = ["3306", "5432", "1433", "1521"];
                switch (encode){
                    case "mysql":
                            txtPort.setValue(portsDefault[0]);
                            showEncoderOptions();
                    break;
                    case "pgsql":
                            txtPort.setValue(portsDefault[1]);
                            showEncoderOptions();
                    break;
                    case "mssql":
                            txtPort.setValue(portsDefault[2]);
                            showEncoderOptions();
                    break;
                    case "oracle":
                            txtPort.setValue(portsDefault[3]);
                            hideEncoderOptions();
                    break;
                }
            };

            winFrmDataBaseConnectionShow = function (option, data)
            {
                disableAllItems();
                dataBaseConnectionData = data;
                frmDataBaseConnection.reset();
                cboEngineSetOptionsRestProxy(cboEngine, cboEncode);
                cboConnectionTypeOracleSetOptions(cboConnectionTypeOracle);
                winGrdpnlDataBaseConnection.getItems()[1].setVisible(true);
                btnTestConnection.setVisible(true);
                btnCancel.setVisible(true);
                winGrdpnlDataBaseConnection.showFooter();

                switch (option) {
                    case "POST":
                        winGrdpnlDataBaseConnection.setTitle("Create Database Connection".translate());
                        frmDataBaseConnection.setTitle("");
                        txtTns.setVisible(false);
                        txtTns.setRequired(false);
                        txtServer.setVisible(true);
                        txtServer.setRequired(true);
                        txtDataBaseName.setVisible(true);
                        txtDataBaseName.setRequired(true);
                        txtPort.setVisible(true);
                        txtPort.setRequired(true);
                        txtPort.setValue("3306");
                        break;
                    case "PUT":
                        winGrdpnlDataBaseConnection.setTitle("Edit Database Connection".translate());
                        frmDataBaseConnection.setTitle("");
                        txtUID.setVisible(true);
                        txtUID.setValue(dataBaseConnectionData.dbs_uid);
                        cboEngine.setValue(dataBaseConnectionData.dbs_type);
                        cboEncodeSetOptionsRestProxy(dataBaseConnectionData.dbs_type, cboEncode);
                        cboEncode.setValue(dataBaseConnectionData.dbs_encode);
                        txtServer.setValue(dataBaseConnectionData.dbs_server);
                        txtDataBaseName.setValue(dataBaseConnectionData.dbs_database_name);
                        txtUsername.setValue(dataBaseConnectionData.dbs_username);
                        txtPassword.setValue(dataBaseConnectionData.dbs_password);
                        txtPort.setValue(dataBaseConnectionData.dbs_port);
                        txtDescription.setValue(dataBaseConnectionData.dbs_description);

                        if (dataBaseConnectionData.dbs_type == "oracle") {
                            cboConnectionTypeOracle.setValue(dataBaseConnectionData.dbs_connection_type);
                            cboConnectionTypeOracle.setVisible(true);

                            if (dataBaseConnectionData.dbs_connection_type == "TNS" && dataBaseConnectionData.dbs_tns != "") {
                                txtTns.setValue(dataBaseConnectionData.dbs_tns);
                                txtTns.setVisible(true);
                                txtTns.setRequired(true);

                                txtServer.setValue("");
                                txtServer.setVisible(false);
                                txtServer.setRequired(false);

                                txtDataBaseName.setValue("");
                                txtDataBaseName.setVisible(false);
                                txtDataBaseName.setRequired(false);

                                txtPort.setValue("");
                                txtPort.setVisible(false);
                                txtPort.setRequired(false);
                            } else {
                                txtTns.setValue("");
                                txtTns.setVisible(false);
                                txtTns.setRequired(false);

                                txtServer.setVisible(true);
                                txtServer.setRequired(true);

                                txtDataBaseName.setVisible(true);
                                txtDataBaseName.setRequired(true);

                                txtPort.setVisible(true);
                                txtPort.setRequired(true);
                            }
                        } else {
                            txtTns.setValue("");
                            txtTns.setVisible(false);
                            txtTns.setRequired(false);

                            txtServer.setVisible(true);
                            txtServer.setRequired(true);

                            txtDataBaseName.setVisible(true);
                            txtDataBaseName.setRequired(true);

                            txtPort.setVisible(true);
                            txtPort.setRequired(true);
                        }
                        break;
                }
                frmDataBaseConnection.setFocus();
            };

            var txtUID = new PMUI.field.TextField({
                id: "txtUID",
                name: "txtUID",
                valueType: "string",
                controlsWidth: 300,
                label: "UID".translate(),
                maxLength: 200,
                readOnly: true,
                visible: false
            });

            var cboEngine = new PMUI.field.DropDownListField({
                id: "cboEngine",
                name: "cboEngine",
                label: "Engine".translate(),
                options: null,
                controlsWidth: 150,
                onChange: function (newValue, prevValue)
                {
                    if (cboEngine.getValue() == "oracle") {
                        cboConnectionTypeOracleSetOptions(cboConnectionTypeOracle);
                    } else {
                        txtTns.setVisible(false);
                        txtTns.setRequired(false);

                        txtServer.setVisible(true);
                        txtServer.setRequired(true);

                        txtDataBaseName.setVisible(true);
                        txtDataBaseName.setRequired(true);

                        txtPort.setVisible(true);
                        txtPort.setRequired(true);
                    }

                    cboEncodeSetOptionsRestProxy(cboEngine.getValue(), cboEncode);
                }
            });

            var cboEncode = new PMUI.field.DropDownListField({
                id: "cboEncode",
                name: "cboEncode",
                label: "Encode".translate(),
                options: null,
                controlsWidth: 300
            });

            var cboConnectionTypeOracle = new PMUI.field.DropDownListField({
                id: "cboConnectionTypeOracle",
                name: "cboConnectionTypeOracle",
                label: "Select Connection Type".translate(),
                options: null,
                controlsWidth: 300,

                onChange: function (newValue, prevValue)
                {
                    if (cboConnectionTypeOracle.getValue() != "NORMAL") {
                        txtTns.setVisible(true);
                        txtTns.setRequired(true);

                        txtServer.setVisible(false);
                        txtServer.setRequired(false);

                        txtDataBaseName.setVisible(false);
                        txtDataBaseName.setRequired(false);

                        txtPort.setVisible(false);
                        txtPort.setRequired(false);
                    } else {
                        txtTns.setVisible(false);
                        txtTns.setRequired(false);

                        txtServer.setVisible(true);
                        txtServer.setRequired(true);

                        txtDataBaseName.setVisible(true);
                        txtDataBaseName.setRequired(true);

                        txtPort.setValue("1521");
                        txtPort.setVisible(true);
                        txtPort.setRequired(true);
                    }
                }
            });

            var txtTns = new PMUI.field.TextField({
                id: "txtTns",
                name: "txtTns",
                valueType: "txtTns",
                controlsWidth: 300,
                label: "TNS".translate(),
                maxLength: 200,
                visible: false,
                required: true
            });

            var txtServer = new PMUI.field.TextField({
                id: "txtServer",
                name: "txtServer",
                valueType: "string",
                controlsWidth: 300,
                label: "Server".translate(),
                maxLength: 200,
                required: true
            });

            var txtDataBaseName = new PMUI.field.TextField({
                id: "txtDataBaseName",
                name: "txtDataBaseName",
                valueType: "string",
                controlsWidth: 300,
                label: "Database Name".translate(),
                maxLength: 200,
                required: true
            });

            var txtUsername = new PMUI.field.TextField({
                id: "txtUsername",
                name: "txtUsername",
                valueType: "string",
                controlsWidth: 300,
                label: "Username".translate(),
                maxLength: 200,
                required: true
            });

            var txtPassword = new PMUI.field.PasswordField ({
                id: "txtPassword",
                name: "txtPassword",
                valueType: "string",
                controlsWidth: 300,
                label: "Password".translate(),
                maxLength: 200
            });

            var txtPort = new PMUI.field.TextField({
                id: "txtPort",
                name: "txtPort",
                valueType: "string",
                controlsWidth: 300,
                label: "Port".translate(),
                value: "3306",
                controlsWidth: 300,
                maxLength: 200,
                required: true
            });

            var txtDescription = new PMUI.field.TextAreaField({
                id: "txtDescription",
                name: "txtDescription",
                valueType: "string",
                controlsWidth: 500,
                label: "Description".translate(),
                height: "200px",
                style: {cssClasses: ['mafe-textarea-resize']}
            });

            btnTestConnection = new PMUI.ui.Button({
                id: "btnTestConnection",
                text: "Test Connection".translate(),
                buttonType: 'success',
                handler: function ()
                {
                    if (frmDataBaseConnection.isValid()) {
                        if (cboEngine.getValue()=="oracle") {
                            var data = {
                                dbs_type: cboEngine.getValue(),
                                dbs_encode: cboEncode.getValue(),
                                dbs_connection_type: cboConnectionTypeOracle.getValue(),
                                dbs_tns: txtTns.getValue(),
                                dbs_server: txtServer.getValue(),
                                dbs_database_name: txtDataBaseName.getValue(),
                                dbs_username: txtUsername.getValue(),
                                dbs_password: getData2PMUI(frmDataBaseConnection.html).txtPassword,
                                dbs_port: parseInt(getData2PMUI(frmDataBaseConnection.html).txtPort),
                                dbs_description: txtDescription.getValue()
                            };
                        }else{
                            var data = {
                                dbs_type: cboEngine.getValue(),
                                dbs_encode: cboEncode.getValue(),
                                dbs_server: txtServer.getValue(),
                                dbs_database_name: txtDataBaseName.getValue(),
                                dbs_username: txtUsername.getValue(),
                                dbs_password: getData2PMUI(frmDataBaseConnection.html).txtPassword,
                                dbs_port: parseInt(getData2PMUI(frmDataBaseConnection.html).txtPort),
                                dbs_description: txtDescription.getValue()
                            };
                        }
                        dataBaseConnectionPostTestRestProxy(data);
                    }
                }
            });

            btnCreate = new PMUI.ui.Button({
                id: "btnCreate",
                text: "Save".translate(),
                buttonType  : "success",
                handler: function ()
                {
                    if (cboEngine.getValue()=="oracle") {
                        var data = {
                            dbs_type: cboEngine.getValue(),
                            dbs_encode: cboEncode.getValue(),
                            dbs_connection_type: cboConnectionTypeOracle.getValue(),
                            dbs_tns: txtTns.getValue(),
                            dbs_server: txtServer.getValue(),
                            dbs_database_name: txtDataBaseName.getValue(),
                            dbs_username: txtUsername.getValue(),
                            dbs_password: getData2PMUI(frmDataBaseConnection.html).txtPassword,
                            dbs_port: parseInt(getData2PMUI(frmDataBaseConnection.html).txtPort),
                            dbs_description: txtDescription.getValue()
                        };
                    }else{
                        var data = {
                            dbs_type: cboEngine.getValue(),
                            dbs_encode: cboEncode.getValue(),
                            dbs_server: txtServer.getValue(),
                            dbs_database_name: txtDataBaseName.getValue(),
                            dbs_username: txtUsername.getValue(),
                            dbs_password: txtPassword.getValue(),
                            dbs_port: parseInt(txtPort.getValue()),
                            dbs_description: txtDescription.getValue()
                        };
                    }

                    switch (dataBaseConnectionOption) {
                        case "POST":
                            if (frmDataBaseConnection.isValid()) {
                                dataBaseConnectionPostRestProxy(data);
                            } else {
                                return;
                            }
                            break;
                        case "PUT":
                            if (frmDataBaseConnection.isValid()) {
                                dataBaseConnectionPutRestProxy(dataBaseConnectionData.dbs_uid, data);
                            } else {
                                return;
                            }
                            break;
                    }
                }
            });

            btnCancel = new PMUI.ui.Button({
                id: "btnCancel",
                text: "Cancel".translate(),
                buttonType: 'error',
                handler: function(){
					closeClicked = false;
					isDirtyFrmDataBaseConnection();
				}
            });

            btnBack = new PMUI.ui.Button({
                id: "btnBack",
                text: "Back".translate(),
                handler: function ()
                {
                    //document.getElementById("lblOr").style.display = "inline";
                    showForm();
                }
            });

            frmDataBaseConnection = new PMUI.form.Form({
                id: "frmDataBaseConnection",
                width: DEFAULT_WINDOW_WIDTH-70,

                items: [
                    txtUID,
                    cboEngine,
                    cboEncode,
                    cboConnectionTypeOracle,
                    txtTns,
                    txtServer,
                    txtDataBaseName,
                    txtUsername,
                    txtPassword,
                    txtPort,
                    txtDescription
                ]
            });

            txtPort.controls[0].onKeyUp = function(){
                var txtPortfinalValue;
                var txtPortValue = getData2PMUI(frmDataBaseConnection.html).txtPort;
                if(/\D/.test(txtPortValue)) {
                    if(isNaN(parseInt(txtPortValue))) {
                        txtPortfinalValue = "";
                    } else {
                        txtPortfinalValue = parseInt(txtPortValue);
                    }
                    txtPort.setValue(txtPortfinalValue);
                }
            };

            btnNew = new PMUI.ui.Button({
                id: "btnNew",
                text: "Create".translate(),
                height:"36px",
                width : 100,
                style : {
                    cssClasses: [
                        'mafe-button-create'
                    ]
                },
                handler: function ()
                {
                    dataBaseConnectionOption = "POST";
                    winFrmDataBaseConnectionShow("POST", {});
                }
                //buttonType : 'success'
            });

            grdpnlDataBaseConnection = new PMUI.grid.GridPanel({
                id: "grdpnlDataBaseConnection",
                filterable: true,
                pageSize: 10,
                width: "96%",
                style:{
                     cssClasses:["mafe-gridPanel"]
                },
                //height: DEFAULT_WINDOW_HEIGHT - 60,
                filterPlaceholder: 'Search ...'.translate(),
                emptyMessage : 'No records found'.translate(),
                nextLabel: 'Next'.translate(),
                previousLabel: 'Previous'.translate(),
                customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                    return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
                },
                columns: [
                    {
                        id: 'grdpnlDataBaseConnectionButtonShow',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Show ID".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-show'
                            ]
                        },
                        width: "100px",
                        onButtonClick: function (row, grid) {
                            showUID(row.getData().dbs_uid);
                        }
                    },
                    {
                        columnData: "dbs_type",
                        title: "Type".translate(),
                        width: "100px",
                        sortable: true,
                        alignmentCell: 'left'
                    },
                    {
                        columnData: "dbs_server",
                        title: "Server".translate(),
                        width: "155px",
                        alignmentCell: 'left'
                    },
                    {
                        columnData: "dbs_database_name",
                        title: "Database Name".translate(),
                        width: "160px",
                        sortable: true,
                        alignmentCell: 'left'
                    },
                    {
                        columnData: "dbs_description",
                        title: "Description".translate(),
                        width: "200px",
                        alignmentCell: 'left'
                    },
                    {
                        id: 'grdpnlDataBaseConnectionButtonEdit',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Edit".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-edit'
                            ]
                        },
                        //width: "74px",
                        onButtonClick: function(row, grid)
                        {
                            dataBaseConnectionGetRestProxy(row.getData().dbs_uid);
                        }
                    },
                    {
                        id: 'grdpnlDataBaseConnectionButtonDelete',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Delete".translate(),
                        buttonStyle : {
                            cssClasses: [
                                'mafe-button-delete'
                            ]
                        },
                        //width: "100px",
                        onButtonClick: function(row, grid)
                        {
                            var data = row.getData();
                            var msgWarning = new PMUI.ui.MessageWindow({
                                id: "msgWarning",
                                title: 'Database Connections'.translate(),
                                windowMessageType: 'warning',
                                width: 490,
                                message: "Do you want to delete this DB Connection?".translate(),
                                buttons: [
                                    {
                                        text: "No".translate(),
                                        handler: function() {
                                            msgWarning.close();
                                        },
										buttonType : "error"
                                    },
									{
                                        text: "Yes".translate(),
                                        handler: function() {
                                            dataBaseConnectionDeleteRestProxy(data.dbs_uid);
                                            msgWarning.close();
                                        },
										buttonType : "success"
                                    }
                                ]
                            });
                            msgWarning.open();
                            msgWarning.showFooter();
                        }
                    }
                ],
                dataItems: null
            });

            panelTest = new PMUI.core.Panel({
                id : 'panelTest',
                height : DEFAULT_WINDOW_HEIGHT - 71,
                display : 'inline-block'
            });

            winGrdpnlDataBaseConnection = new PMUI.ui.Window({
                id: "winGrdpnlDataBaseConnection",
                title: "Database Connections".translate(),
                width: DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT,
                buttonPanelPosition : "bottom",
                buttons: [ btnCancel, btnBack, btnTestConnection, btnCreate],
				onBeforeClose : function(){
					closeClicked = true;
					isDirtyFrmDataBaseConnection();
				}
            });

            winGrdpnlDataBaseConnection.addItem(grdpnlDataBaseConnection);
            winGrdpnlDataBaseConnection.addItem(frmDataBaseConnection);
            winGrdpnlDataBaseConnection.addItem(panelTest);

            refreshGridPanelInMainWindow();
            if (typeof listDBConnection !== "undefined") {
                winGrdpnlDataBaseConnection.open();
                frmDataBaseConnection.panel.html.style.padding = "10px";
                $('#grdpnlDataBaseConnection .pmui-textcontrol').css({'margin-top':'5px', width:'250px'});
                winGrdpnlDataBaseConnection.defineEvents();
                applyStyleWindowForm(winGrdpnlDataBaseConnection);
                winGrdpnlDataBaseConnection.footer.html.style.textAlign = 'right';
                $(btnNew.getHTML()).css({float:"right"})
                grdpnlDataBaseConnection.dom.toolbar.appendChild(btnNew.getHTML());
                btnNew.defineEvents();

                disableAllItems();
                winGrdpnlDataBaseConnection.getItems()[0].setVisible(true);
            }
        };

        PMDesigner.database.create = function () {
            PMDesigner.database();
            dataBaseConnectionOption = "POST";
            winFrmDataBaseConnectionShow("POST", {});
        };
    }()
);

(function () {
    var openTinyInMainWindow,
            dataOutPutDocument,
            openFormInMainWindow,
    		messageRequired;

    PMDesigner.output = function (event) {
        var winMainOutputDocument;

        var formOutput, rowData, updateOutPut, restClient, isDirtyFormOutput, clickedClose = true;
		var that = this;
        setDataRow = function (row) {
            dataOutPutDocument = row.getData();
            rowData = row;
        };

        clearDataRow = function () {
            dataOutPutDocument = '';
            rowData = '';
        };

        var listOutputDocs;

		isDirtyFormOutput = function(){
		    $("input,select,textarea").blur();
			if (formOutput.isVisible()){
				if (formOutput.isDirty()) {
					var message_window = new PMUI.ui.MessageWindow({
						id: "cancelMessageTriggers",
						width: 490,
						title: "Output Documents".translate(),
						windowMessageType: "warning",
						bodyHeight: 'auto',
						message: 'Are you sure you want to discard your changes?'.translate(),
						footerItems: [
							{
								text: "No".translate(),
								handler: function () {
									message_window.close();
								},
								buttonType : "error"
							},
							{
								text: "Yes".translate(),
								handler: function () {
									clearDataRow();
									message_window.close();
									if (clickedClose){
                                        tinymce.EditorManager.execCommand('mceRemoveControl',true, 'tinyeditor');
										winMainOutputDocument.close();
									}else{
										clearDataRow();
										openGridPanelInMainWindow();
									}

								},
								buttonType : "success"
							}
						]
					});
					message_window.open();
					message_window.showFooter();
				} else {
					clearDataRow();
					if (clickedClose){
                        tinymce.EditorManager.execCommand('mceRemoveControl',true, 'tinyeditor');
						winMainOutputDocument.close()
					}else{
						openGridPanelInMainWindow();
					}
				}
			}else{
				winMainOutputDocument.close();
			}
		};
        getGridOutput = function () {
            var restClientGet = new PMRestClient({
                endpoint: 'output-documents',
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    listOutputDocs = response;
                    gridOutput.setDataItems(listOutputDocs);
                    gridOutput.sort('out_doc_title', 'asc');
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: "There are problems getting the output documents, please try again.".translate()
            });
            restClientGet.executeRestClient();
        };

        disableAllItems = function () {
            winMainOutputDocument.hideFooter();
            formOutput.reset();

            winMainOutputDocument.getItems()[0].setVisible(false);
            winMainOutputDocument.getItems()[1].setVisible(false);
            for (var i = 0; i <= winMainOutputDocument.getItems()[1].getItems().length - 1; i++) {
                winMainOutputDocument.getItems()[1].getItems()[i].setVisible(false);
            }
            btnSaveWindowOutputDoc.setVisible(false);
            btnCloseWindowOutputDoc.setVisible(false);
            btnSaveTiny.setVisible(false);
            btnCancelTiny.setVisible(false);

            winMainOutputDocument.footer.getItems()[2].setVisible(false);
        }

        var refreshGridPanelInMainWindow = function ()
        {
            disableAllItems();
            winMainOutputDocument.getItems()[0].setVisible(true);
            winMainOutputDocument.setTitle("Output Documents".translate());
            getGridOutput();
        };

        var openGridPanelInMainWindow = function ()
        {
            disableAllItems();
            winMainOutputDocument.getItems()[0].setVisible(true);
            winMainOutputDocument.setTitle("Output Documents".translate());
            $(winMainOutputDocument.body).removeClass("pmui-background");
        };

        openFormInMainWindow = function ()
        {
            disableAllItems();
            winMainOutputDocument.showFooter();
            winMainOutputDocument.getItems()[1].setVisible(true);
            for (var i = 0; i < winMainOutputDocument.getItems()[1].getItems().length; i++) {
                if (winMainOutputDocument.getItems()[1].getItems()[i].type !== "PMTinyField"){
                    winMainOutputDocument.getItems()[1].getItems()[i].setVisible(true);
                }
            }
            btnSaveWindowOutputDoc.setVisible(true);
            btnCloseWindowOutputDoc.setVisible(true);
            winMainOutputDocument.footer.getItems()[2].setVisible(true);
            password.setVisible(false);
            winMainOutputDocument.setTitle("Create Output Document".translate());
            winMainOutputDocument.setHeight(520);
            formOutput.panel.style.addProperties({padding: '20px 10px'});
            formOutput.setFocus();

        };

        var openFormForEditInMainWindow = function (outputDocumentData)
        {
            disableAllItems();
            winMainOutputDocument.showFooter();
            btnSaveWindowOutputDoc.setVisible(true);
            btnCloseWindowOutputDoc.setVisible(true);
            winMainOutputDocument.footer.getItems()[1].setVisible(false);
            formOutput.setWidth(700);
            winMainOutputDocument.getItems()[1].setVisible(true);
            winMainOutputDocument.setTitle("Edit Output Document".translate());
            $(winMainOutputDocument.body).addClass("pmui-background");
            for (var i = 0; i < winMainOutputDocument.getItems()[1].getItems().length; i++) {
                if (winMainOutputDocument.getItems()[1].getItems()[i].type !== "PMTinyField"){
                    winMainOutputDocument.getItems()[1].getItems()[i].setVisible(true);
                }
            }

            password.setVisible(false);
            if (dataOutPutDocument != '' && dataOutPutDocument != undefined) {
                var dataEdit = formOutput.getFields( );
                dataEdit[0].setValue(dataOutPutDocument['out_doc_title']);
                dataEdit[1].setValue(dataOutPutDocument['out_doc_filename']);
                dataEdit[2].setValue(dataOutPutDocument['out_doc_description']);
                dataEdit[3].setValue(dataOutPutDocument['out_doc_report_generator']);
                dataEdit[4].setValue(dataOutPutDocument['out_doc_media']);
                dataEdit[5].setValue(dataOutPutDocument['out_doc_landscape']);
                dataEdit[6].setValue(dataOutPutDocument['out_doc_left_margin']);
                dataEdit[7].setValue(dataOutPutDocument['out_doc_right_margin']);
                dataEdit[8].setValue(dataOutPutDocument['out_doc_top_margin']);
                dataEdit[9].setValue(dataOutPutDocument['out_doc_bottom_margin']);
                dataEdit[10].setValue(dataOutPutDocument['out_doc_generate']);

                if (dataOutPutDocument["out_doc_generate"] != "DOC") {
                    dataEdit[11].setVisible(true);
                } else {
                    dataEdit[11].setVisible(false);
                }

                dataEdit[11].setValue(dataOutPutDocument['out_doc_pdf_security_enabled']);
                if (dataOutPutDocument['out_doc_pdf_security_enabled'] != 0) {
                    password.setVisible(true);
                }
                dataEdit[12].setValue(dataOutPutDocument['out_doc_pdf_security_open_password']);
                dataEdit[13].setValue(dataOutPutDocument['out_doc_pdf_security_owner_password']);

                dataOutPutDocument['out_doc_pdf_security_permissions'] = dataOutPutDocument['out_doc_pdf_security_permissions'].split("|");
                dataEdit[14].setValue(JSON.stringify(dataOutPutDocument['out_doc_pdf_security_permissions']));

                dataEdit[15].setValue(dataOutPutDocument['out_doc_versioning']);
                dataEdit[16].setValue(dataOutPutDocument['out_doc_destination_path']);
                dataEdit[17].setValue(dataOutPutDocument['out_doc_tags']);
                dataEdit[18].setValue(dataOutPutDocument["out_doc_open_type"]);
            }
            winMainOutputDocument.setHeight(520);
            formOutput.panel.style.addProperties({padding: '20px 10px'});
            formOutput.setFocus();
        };

        openTinyInMainWindow = function (outputDocumentData)
        {
            //Fix for IE11
            var isIe11 = /Trident\/7\.0;.*rv\s*\:?\s*11/.test(navigator.userAgent);

            if (isIe11) {
                tinyMCE.isGecko = false;
            }

            //Set TinyMCE
            disableAllItems();
            winMainOutputDocument.showFooter();
            tinyEditorField = 13;
            winMainOutputDocument.getItems()[1].setVisible(true);
            winMainOutputDocument.getItems()[1].getItems()[tinyEditorField].setVisible(true);
            formOutput.setWidth(890);
            btnSaveTiny.setVisible(true);
            btnCancelTiny.setVisible(true);
            if (!editorTiny.isInitialized) {
                editorTiny.createHTML();
                editorTiny.setParameterTiny();
                editorTiny.isInitialized = true;
            } else {
                tinyMCE.execCommand('mceFocus', false, 'tinyeditor');
            }
            var dataEdit = formOutput.getFields( );
            winMainOutputDocument.setTitle("Edit Output Document".translate());
            if (dataOutPutDocument != '' && dataOutPutDocument != undefined) {
                dataOutPutDocument['out_doc_template'] = (dataOutPutDocument['out_doc_template'] != null) ? dataOutPutDocument['out_doc_template'] : ' ';
                dataEdit[19].setValue(dataOutPutDocument['out_doc_template']);
                dataEdit[19].setValueTiny(dataOutPutDocument['out_doc_template']);
                dataEdit[19].setHeight(425);

                dataEdit[18].setVisible(false);
                dataEdit[19].setVisible(true);
            }
            formOutput.panel.style.addProperties({padding: '0px 10px'});
            winMainOutputDocument.setHeight(520);
            if (!editorTiny.isInitialized)
                tinymce.execCommand('mceFocus', false, 'tinyeditor');
        };

        deleteDataRow = function () {
            confirmWindow = new PMUI.ui.MessageWindow({
                id: "outputMessageWindowWarning",
                windowMessageType: 'warning',
                bodyHeight: 'auto',
                width: 490,
                title : "Output Documents".translate(),
                message: "Do you want to delete this Output Document?".translate(),
                footerItems: [
                    {
                        id: 'confirmWindowButtonNo',
                        text: "No".translate(),
                        visible: true,
                        handler: function () {
                            confirmWindow.close();
                        },
						buttonType : "error"
                    },{
                        id: 'confirmWindowButtonYes',
                        text: "Yes".translate(),
                        visible: true,
                        handler: function () {
                            confirmWindow.close();
                            restClient = new PMRestClient({
                                endpoint: "output-document/" + dataOutPutDocument.out_doc_uid,
                                typeRequest: 'remove',
                                functionSuccess: function (xhr, response) {
                                    refreshGridPanelInMainWindow();
                                },
                                functionFailure: function (xhr, response)
                                {
                                    PMDesigner.msgWinError(response.error.message);
                                },
                                messageError: "There are problems deleting the OutputDocument, please try again.".translate(),
                                messageSuccess: 'Output Document deleted successfully'.translate(),
                                flashContainer: gridOutput
                            });
                            restClient.executeRestClient();
                        },
						buttonType : "success"
                    },
                ]
            });
            confirmWindow.open();
            confirmWindow.dom.titleContainer.style.height = "17px";
            confirmWindow.showFooter();
        };

        updateOutput = function (data) {
            dataOutPutDocument = '';
            var restClientUpdate = new PMRestClient({
                endpoint: "output-document/" + data.out_doc_uid,
                typeRequest: 'update',
                data: data,
                functionSuccess: function (xhr, response) {
                    dataOutPutDocument = data;
                    refreshGridPanelInMainWindow();
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: "There are problems updating the OutputDocument, please try again.".translate(),
                messageSuccess: 'Output Document edited successfully'.translate(),
                flashContainer: gridOutput
            });
            restClientUpdate.executeRestClient();
        };

        editorTiny = new PMTinyField({
            id: 'outputEditorTiny',
            theme: "advanced",
            plugins: "advhr,advimage,advlink,advlist,autolink,autoresize,contextmenu,directionality,emotions,example,example_dependency,fullpage,fullscreen,iespell,inlinepopups,insertdatetime,layer,legacyoutput,lists,media,nonbreaking,noneditable,pagebreak,paste,preview,print,save,searchreplace,style,tabfocus,table,template,visualblocks,visualchars,wordcount,xhtmlxtras,pmSimpleUploader,pmVariablePicker,style",
            mode: "specific_textareas",
            editorSelector: "tmceEditor",
            widthTiny: DEFAULT_WINDOW_WIDTH - 58,
            heightTiny: DEFAULT_WINDOW_HEIGHT - 100,
            directionality: 'ltr',
            verifyHtml: false,
            themeAdvancedButtons1: "pmSimpleUploader,|,pmVariablePicker,|,bold,italic,underline,|,justifyleft,justifycenter,justifyright,justifyfull,|,fontselect,fontsizeselect,|,cut,copy,paste,|,bullist,numlist,|,outdent,indent,blockquote",
            themeAdvancedButtons2: "tablecontrols,|,undo,redo,|,link,unlink,image,|,forecolor,backcolor,styleprops,|,hr,removeformat,visualaid,|,sub,sup,|,ltr,rtl,|,code",
            popupCss: "/js/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/dialog.css",
            skin: "o2k7",
            skin_variant: "silver"
        });

        var docMargin = new PMUI.form.FormPanel({
            fieldset: true,
            layout: 'hbox',
            legend: "Margin".translate(),
            items: [
                {
                    pmType: 'panel',
                    proportion: 0.7
                },
                {
                    pmType: "panel",
                    layout: 'vbox',
                    items: [
                        {
                            id: 'outputFormDocLeftMargin',
                            pmType: "text",
                            label: "Left".translate(),
                            required: true,
                            value: 20,
                            name: "out_doc_left_margin",
                            controlsWidth: 50,
                            labelWidth: '35%'
                        }, {
                            id: 'outputFormDocRightMargin',
                            pmType: "text",
                            label: "Right".translate(),
                            required: true,
                            value: 20,
                            name: "out_doc_right_margin",
                            controlsWidth: 50,
                            labelWidth: '35%'
                        }
                    ]
                },
                {
                    pmType: "panel",
                    layout: 'vbox',
                    proportion: 1.5,
                    items: [
                        {
                            id: 'outputFormDocTopMargin',
                            pmType: "text",
                            label: "Top".translate(),
                            required: true,
                            value: 20,
                            name: "out_doc_top_margin",
                            controlsWidth: 50,
                            labelWidth: '27%'
                        }, {
                            id: 'outputFormDocBottomMargin',
                            pmType: "text",
                            label: "Bottom".translate(),
                            required: true,
                            value: 20,
                            name: "out_doc_bottom_margin",
                            controlsWidth: 50,
                            labelWidth: '27%'
                        }
                    ]
                }
            ]
        });

        //Field "Open Password - Owner Password"
        var outputFormDocPdfSecurityOpen = new PMUI.field.PasswordField({
            id: "outputFormDocPdfSecurityOpen",
            name: "out_doc_pdf_security_open_password",
            value: "",
            label: "Open Password ".translate(),
            required: true,
            controlsWidth: 300
        });

        var outputFormDocPdfSecurityOwner = new PMUI.field.PasswordField({
            id: "outputFormDocPdfSecurityOwner",
            name: "out_doc_pdf_security_owner_password",
            value: "",
            label: "Owner Password ".translate(),
            required: true,
            controlsWidth: 300

        });

        var password = new PMUI.form.FormPanel({
            width: 500,
            height: 130,
            fieldset: true,
            visible: false,
            legend: "",
            items: [
                {
                    pmType: "panel",
                    layout: 'vbox',
                    items: [
                        outputFormDocPdfSecurityOpen,
                        outputFormDocPdfSecurityOwner
                    ]
                },
                {
                    pmType: "panel",
                    layout: 'vbox',
                    items: [
                        {
                            id: 'outputFormDocPdfSecurityPermissions',
                            pmType: 'checkbox',
                            label: "Allowed Permissions".translate(),
                            value: '',
                            name: 'out_doc_pdf_security_permissions',
                            required: false,
                            controlPositioning: 'horizontal',
                            separator: "|",
                            maxDirectionOptions: 4,
                            options: [
                                {
                                    id: 'monday',
                                    label: "print".translate(),
                                    value: 'print'
                                },
                                {
                                    id: 'monday',
                                    label: "modify".translate(),
                                    value: 'modify'
                                },
                                {
                                    id: 'monday',
                                    label: "copy".translate(),
                                    value: 'copy'
                                },
                                {
                                    id: 'monday',
                                    label: "forms".translate(),
                                    value: 'forms'
                                }

                            ]
                        }
                    ]
                }
            ],
            layout: "vbox"
        });

        //Field "PDF security"
        var outputFormDocPdfSecurityEnabled = new PMUI.field.DropDownListField({
            id: "outputFormDocPdfSecurityEnabled",
            name: "out_doc_pdf_security_enabled",
            label: "PDF security".translate(),
            labelWidth: "27%",
            valueType: "number",
            visible: false,

            options:
            [
                {
                    value: 0,
                    label: "Disabled".translate(),
                    selected: true
                },
                {
                    value: 1,
                    label: "Enabled".translate()

                }
            ],

            controlsWidth: 100,

            onChange: function (newValue, prevValue)
            {
                var visible = true;

                if (newValue == 0) {
                    visible = false;

                    outputFormDocPdfSecurityOpen.setValue("");
                    outputFormDocPdfSecurityOwner.setValue("");
                }

                password.setVisible(visible);
            }
        });

        //the form is 700px width, but with the tiny grows to 890
        formOutput = new PMUI.form.Form({
            id: 'outputForm',
            name: 'outputForm',
            fieldset: true,
            title: "",
            visibleHeader: false,
            width: DEFAULT_WINDOW_WIDTH - 43,
            items: [
                {
                    id: 'outputFormDocTitle',
                    pmType: "text",
                    name: 'out_doc_title',
                    label: "Title".translate(),
                    labelWidth: '27%',
                    controlsWidth: 300,
                    required: true
                },
                new CriteriaField({
                    id: 'outputFormDocFilename',
                    pmType: "text",
                    name: 'out_doc_filename',
                    label: "Filename generated".translate(),
                    labelWidth: '27%',
                    controlsWidth: 300,
                    required: true
                }),
                {
                    id: 'outputFormDocDescription',
                    pmType: "textarea",
                    name: 'out_doc_description',
                    label: "Description".translate(),
                    labelWidth: '27%',
                    controlsWidth: 500,
                    rows: 100,
                    style: {cssClasses: ['mafe-textarea-resize']}
                },
                {
                    id: 'outputFormDocReportGenerator',
                    pmType: "dropdown",
                    name: 'out_doc_report_generator',
                    label: "Report Generator".translate(),
                    labelWidth: '27%',
                    require: true,
                    controlsWidth: 165,
                    options: [
                        {
                            label: "TCPDF".translate(),
                            value: "TCPDF"
                        },
                        {
                            label: "HTML2PDF (Old Version)".translate(),
                            value: "HTML2PDF"
                        }
                    ],
                    value: "TCPDF"
                },
                {
                    id: 'outputFormDocMedia',
                    pmType: "dropdown",
                    name: 'out_doc_media',
                    label: "Media".translate(),
                    labelWidth: '27%',
                    controlsWidth: 165,
                    options: [
                        {label: "Letter".translate(), value: "Letter"},
                        {label: "Legal".translate(), value: "Legal"},
                        {label: "Executive".translate(), value: "Executive"},
                        {label: "B5".translate(), value: "B5"},
                        {label: "Folio".translate(), value: "Folio"},
                        {label: "A0Oversize".translate(), value: "A0Oversize"},
                        {label: "A0".translate(), value: "A0"},
                        {label: "A1".translate(), value: "A1"},
                        {label: "A2".translate(), value: "A2"},
                        {label: "A3".translate(), value: "A3"},
                        {label: "A4".translate(), value: "A4"},
                        {label: "A5".translate(), value: "A5"},
                        {label: "A6".translate(), value: "A6"},
                        {label: "A7".translate(), value: "A7"},
                        {label: "A8".translate(), value: "A8"},
                        {label: "A9".translate(), value: "A9"},
                        {label: "A10", value: "A10"},
                        {label: "Screenshot640".translate(), value: "SH640"},
                        {label: "Screenshot800".translate(), value: "SH800"},
                        {label: "Screenshot1024".translate(), value: "SH1024"}
                    ]
                },
                {
                    id: 'outputFormDocLandscape',
                    pmType: "dropdown",
                    name: 'out_doc_landscape',
                    labelWidth: '27%',
                    label: "Orientation".translate(),
                    controlsWidth: 165,
                    options: [
                        {
                            label: "Portrait".translate(),
                            selected: true,
                            value: 0
                        },
                        {
                            label: "Landscape".translate(),
                            value: 1
                        }
                    ],
                    valueType: 'number'
                },
                docMargin,
                {
                    id: 'outputFormDocGenerate',
                    pmType: "dropdown",
                    name: 'out_doc_generate',
                    controlsWidth: 70,
                    labelWidth: '27%',
                    label: "Output Document to Generate".translate(),
                    options: [
                        {
                            label: "Both".translate(),
                            value: "BOTH"
                        },
                        {
                            label: "Doc".translate(),
                            value: "DOC"
                        },
                        {
                            label: "Pdf".translate(),
                            value: "PDF"
                        }
                    ],
                    value: "BOTH",
                    onChange: function (newValue, prevValue) {
                        if (newValue == "DOC") {
                            formOutput.getFields()[11].setVisible(false);
                            outputFormDocPdfSecurityEnabled.setVisible(false);
                            outputFormDocPdfSecurityEnabled.setValue(0);
                            password.setVisible(false);
                            outputFormDocPdfSecurityOpen.setValue("");
                            outputFormDocPdfSecurityOwner.setValue("");
                        } else {
                            formOutput.getFields()[11].setVisible(true);
                        }
                    }
                },
                outputFormDocPdfSecurityEnabled,
                password,
                {
                    id: 'outputFormDocVersioning',
                    pmType: "dropdown",
                    name: "out_doc_versioning",
                    controlsWidth: 70,
                    labelWidth: '27%',
                    label: 'Enable versioning'.translate(),
                    options: [
                        {
                            label: "Yes".translate(),
                            value: 1
                        },
                        {
                            label: "No".translate(),
                            selected: true,
                            value: 0
                        }
                    ],
                    valueType: 'number'
                },
                new CriteriaField({
                    id: 'outputFormDocDestinationPath',
                    pmType: "text",
                    name: "out_doc_destination_path",
                    labelWidth: '27%',
                    label: "Destination Path".translate(),
                    controlsWidth: 340
                }),
                new CriteriaField({
                    id: 'outputFormDocTags',
                    pmType: "text",
                    name: "out_doc_tags",
                    labelWidth: '27%',
                    label: "Tags".translate(),
                    controlsWidth: 340
                }),
                {
                    id: "cboByGeneratedFile",
                    name: "cboByGeneratedFile",
                    pmType: "dropdown",
                    controlsWidth: 155,
                    labelWidth: "27%",
                    label: "By clicking on the generated file link".translate(),

                    options: [
                        {
                            value: 0,
                            label: "Open the file".translate()
                        },
                        {
                            label: "Download the file".translate(),
                            value: 1,
                            selected: true
                        }
                    ],

                    valueType: "number"
                }
            ],
            style: {
                cssProperties: {
                    marginLeft: '20px'
                }
            }
        });

        formOutput.style.addProperties({marginLeft: '20px'});
        gridOutput = new PMUI.grid.GridPanel({
            id: 'gridOutput',
            pageSize: 10,
            width: "96%",
            style: {
                cssClasses: ["mafe-gridPanel"]
            },
            filterPlaceholder: 'Search ...'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            columns: [
                {
                    id: 'gridOutputButtonShow',
                    title: '',
                    dataType: 'button',
                    buttonLabel: 'Show ID'.translate(),
                    columnData: "out_doc_uid",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-show'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        var data = row.getData();
                        showUID(data.out_doc_uid);
                    }
                },
                {
                    title: 'Title'.translate(),
                    dataType: 'string',
                    width: '392px',
                    alignment: "left",
                    columnData: "out_doc_title",
                    sortable: true,
                    alignmentCell: 'left'
                },
                {
                    title: 'Type'.translate(),
                    dataType: 'string',
                    width: '100px',
                    alignmentCell: 'left',
                    columnData: "out_doc_type",
                    sortable: true
                },
                {
                    id: 'gridOutputButtonEdit',
                    title: '',
                    dataType: 'button',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit'
                        ]
                    },
                    buttonLabel: 'Edit'.translate(),
                    onButtonClick: function (row, grid) {
                    	messageRequired.hide();
                        setDataRow(row);
                        openFormForEditInMainWindow();
                    }
                },
                {
                    id: 'gridOutputButtonProperties',
                    title: '',
                    dataType: 'button',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-properties'
                        ]
                    },
                    buttonLabel: 'Open Editor'.translate(),
                    onButtonClick: function (row, grid) {
                        setDataRow(row);
                        openTinyInMainWindow(row);
                    }
                },
                {
                    id: 'gridOutputButtonDelete',
                    title: '',
                    dataType: 'button',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    buttonLabel: 'Delete'.translate(),
                    onButtonClick: function (row, grid) {
                        setDataRow(row);
                        deleteDataRow();
                    }
                }
            ]
        });

        btnSaveWindowOutputDoc = new PMUI.ui.Button({
            id: 'btnSaveWindowOutputDoc',
            text: "Save".translate(),
            handler: function () {
                var dataAux = getData2PMUI(formOutput.html);

                if (dataAux.out_doc_title != "" && dataAux.out_doc_filename != "") {
                    if ( (navigator.userAgent.indexOf("MSIE")!=-1) || (navigator.userAgent.indexOf("Trident")!=-1) ){
                        itemOutPut = getData2PMUI(formOutput.html);
                    } else {
                        itemOutPut = formOutput.getData();
                    }

                    itemOutPut['out_doc_type'] = "HTML";

                    var items = jQuery.parseJSON(itemOutPut['out_doc_pdf_security_permissions']);
                    itemOutPut['out_doc_pdf_security_permissions'] = '';
                    for (var i = 0; i < items.length; i++) {
                        itemOutPut['out_doc_pdf_security_permissions'] += (i == 0) ? items[i] : '|' + items[i];
                    }

                    itemOutPut["out_doc_landscape"] = parseInt(itemOutPut["out_doc_landscape"]);
                    itemOutPut["out_doc_pdf_security_enabled"] = parseInt(itemOutPut["out_doc_pdf_security_enabled"]);
                    itemOutPut["out_doc_versioning"] = parseInt(itemOutPut["out_doc_versioning"]);
                    itemOutPut["out_doc_open_type"] = parseInt(getData2PMUI(formOutput.html).cboByGeneratedFile);

                    if (dataOutPutDocument != '' && dataOutPutDocument != undefined) {
                        itemOutPut['out_doc_uid'] = dataOutPutDocument.out_doc_uid;
                        restClient = new PMRestClient({
                            endpoint: "output-document/" + dataOutPutDocument.out_doc_uid,
                            typeRequest: 'update',
                            data: itemOutPut,
                            functionSuccess: function (xhr, response) {
                                dataOutPutDocument = itemOutPut;
                                refreshGridPanelInMainWindow();
                            },
                            functionFailure: function (xhr, response)
                            {
                                PMDesigner.msgWinError(response.error.message);
                            },
                            messageError: "There are problems updating the OutputDocument, please try again.".translate(),
                            messageSuccess: 'Output Document edited successfully'.translate(),
                            flashContainer: gridOutput
                        });
                        restClient.executeRestClient();
                    } else {
                        if(1 === parseInt(dataAux.out_doc_pdf_security_enabled) && (dataAux.out_doc_pdf_security_open_password.trim() === "" || dataAux.out_doc_pdf_security_owner_password.trim() === "")){
                            password.getItems()[0].getItems()[0].isValid();
                            password.getItems()[0].getItems()[1].isValid();
                            return false;
                        }
                        itemOutPut['out_doc_uid'] = '';
                        restClient = new PMRestClient({
                            endpoint: "output-document",
                            typeRequest: 'post',
                            data: itemOutPut,
                            functionSuccess: function (xhr, response) {
                                dataOutPutDocument = itemOutPut;
                                refreshGridPanelInMainWindow();
                            },
                            functionFailure: function (xhr, response)
                            {
                                PMDesigner.msgWinError(response.error.message);
                            },
                            messageError: "There are problems saved the OutputDocument, please try again.".translate(),
                            messageSuccess: 'Output Document saved successfully'.translate(),
                            flashContainer: gridOutput
                        });
                        restClient.executeRestClient();
                    }
                    clearDataRow();
                } else {
                    formOutput.getField("out_doc_title").isValid();
                    formOutput.getField("out_doc_filename").isValid();
                }
            },
            buttonType: 'success'
        });

        btnCloseWindowOutputDoc = new PMUI.ui.Button({
            id: 'btnCloseWindowOutputDoc',
            text: "Cancel".translate(),
            handler: function () {
				clickedClose = false;
				isDirtyFormOutput();
            },
            buttonType: 'error'
        });

        newButtonOutput = new PMUI.ui.Button({
            id: 'outputButtonNew',
            text: 'Create'.translate(),
            height: "36px",
            width: 100,
            style: {
                cssClasses: [
                    'mafe-button-create'
                ]
            },
            handler: function () {
                clearDataRow();
                openFormInMainWindow();
            }
        });

        btnCancelTiny = new PMUI.ui.Button({
            id: 'btnCloseTiny',
            text: 'Cancel'.translate(),
            handler: function () {
                /*if (typeof dataOutPutDocument['externalType'] != 'undefined' && dataOutPutDocument['externalType']) {
                    winMainOutputDocument.close();
                    return;
                }*/
                PMDesigner.hideAllTinyEditorControls();
				clickedClose = false;
				isDirtyFormOutput();
            },
            buttonType: 'error'
        });

        btnSaveTiny = new PMUI.ui.Button({
            id: 'btnSaveTiny',
            text: 'Save'.translate(),
            handler: function () {
                PMDesigner.hideAllTinyEditorControls();
                dataOutPutDocument['out_doc_template'] = tinyMCE.activeEditor.getContent();
                updateOutput(dataOutPutDocument);
                if (typeof dataOutPutDocument['externalType'] != 'undefined' && dataOutPutDocument['externalType']) {
                    winMainOutputDocument.close();
                    return;
                }
                clearDataRow();
                refreshGridPanelInMainWindow();
            },
            buttonType: 'success'
        });

        var winMainOutputDocument = new PMUI.ui.Window({
            id: "winMainOutputDocument",
            title: "Output Documents".translate(),
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            buttonPanelPosition: "bottom",
			onBeforeClose : function (){
                PMDesigner.hideAllTinyEditorControls();
				clickedClose = true;
				isDirtyFormOutput();
			},
            footerItems: [
                    btnCancelTiny,
                    btnSaveTiny,
                    btnCloseWindowOutputDoc,
                    btnSaveWindowOutputDoc]
        });

        formOutput.addItem(editorTiny);
        formOutput.footer.setVisible(false);

        winMainOutputDocument.addItem(gridOutput);
        winMainOutputDocument.addItem(formOutput);

        refreshGridPanelInMainWindow();

        validateKeysField(docMargin.getField('out_doc_left_margin').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);
        validateKeysField(docMargin.getField('out_doc_right_margin').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);
        validateKeysField(docMargin.getField('out_doc_top_margin').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);
        validateKeysField(docMargin.getField('out_doc_bottom_margin').getControls()[0].getHTML(), ['isbackspace', 'isnumber']);

        if (typeof listOutputDocs !== "undefined") {
            winMainOutputDocument.open();
            $('#gridOutput .pmui-textcontrol').css({'margin-top': '5px', width: '250px'});
            messageRequired = $(document.getElementById("requiredMessage"));
            applyStyleWindowForm(winMainOutputDocument);

            editorTiny.isInitialized = false;
            winMainOutputDocument.footer.html.style.textAlign = 'right';

            gridOutput.dom.toolbar.appendChild(newButtonOutput.getHTML());
            newButtonOutput.defineEvents();
            winMainOutputDocument.defineEvents();
            disableAllItems();
            winMainOutputDocument.getItems()[0].setVisible(true);
        }
    };

    PMDesigner.output.showTiny = function (uid) {
        getItemdOutput = function () {
            var restClientGet = new PMRestClient({
                endpoint: 'output-document/' + uid,
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    dataOutPutDocument = response;
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: "There are problems getting the output documents, please try again.".translate()
            });
            restClientGet.executeRestClient();
        };
        getItemdOutput();
        dataOutPutDocument['externalType'] = true;
        openTinyInMainWindow(dataOutPutDocument);
    };

    PMDesigner.output.create = function () {
        openFormInMainWindow();
    };
}());

(
    function() {
        var iframeRT,
            reportWindow,
            pathSrc;

        PMDesigner.reporttable = function (event) {
            reportWindow = new PMUI.ui.Window({
                id : 'reportTableWindow',
                title: "Report Tables".translate(),
                width: DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT
            });

            pathSrc = window.parent.location;

            iframeRT = new PMIframe ({
                id : 'reporTableIframe',
                src: window.location.href.split("/")[0]+"//"+pathSrc.host+"/sys"+WORKSPACE+"/"+LANG+"/"+SKIN+"/pmTables?PRO_UID="+PMDesigner.project.id+"&flagProcessmap=1",
                width:  DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT-36,
                scrolling: 'no',
                frameborder: '0'
            });

            reportWindow.addItem(iframeRT);
            reportWindow.open();
            reportWindow.setBodyPadding(0);
        };

        PMDesigner.reporttable.create = function () {
            pathSrc = window.parent.location;
            reportWindow.clearItems( );
            iframeRT = new PMIframe ({
                id : 'reporTableIframe',
                src: window.location.href.split("/")[0]+"//"+pathSrc.host+"/sys"+WORKSPACE+"/"+LANG+"/"+SKIN+"/pmTables/edit?PRO_UID="+PMDesigner.project.id+"&tableType=report&flagProcessmap=1",
                width:  DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT-36,
                scrolling: 'no',
                frameborder: '0'
            });
            reportWindow.addItem(iframeRT);
            reportWindow.open();
            reportWindow.setBodyPadding(0);
        }

    }()
);
(function () {
    $ctrlSpaceMessage = $("<p class='ctrlSpaceMessage'>" + "Press".translate() + " <strong>ctrl+space</strong> " + "to get the function list".translate() + ".</p>");
    var btnCopyImport, openFormCustom, formEditTriggerCustom;
    var triggerOriginDataForUpdate = {};
    var requiredMessage;
    PMDesigner.trigger = function (event) {

        var message_ErrorWindow = new PMUI.ui.MessageWindow({
            id: "errorMessage",
            width: 490,
            windowMessageType: 'error',
            title:  "Triggers".translate(),
            message: "This is an error message.".translate(),
            footerItems: [
                {
                    text: 'OK'.translate(),
                    handler: function () {
                        message_ErrorWindow.close();
                    },
					buttonType : "success"
                }
            ]
        });

        var listTriggers, clickedClose = true;
        var flagChanges;

		var isDirtyFormTrigger = function(){
		    $("input,select,textarea").blur();
			$("div.pmui-window-body.pmui-background").css('overflow','');
			var formcustom = triggerWindow.getItems()[1];
			var formwizard = triggerWindow.getItems()[2];
			var formcopy = triggerWindow.getItems()[3];
			var formeditcode = triggerWindow.getItems()[4];
			var accordionnewtrigger = triggerWindow.getItems()[5];
			var flag = false;

			var finalData = {
				tri_uid: getData2PMUI(formEditTriggerCustom.html).uid,
				tri_title: getData2PMUI(formEditTriggerCustom.html).title,
				tri_description: getData2PMUI(formEditTriggerCustom.html).description,
				tri_webbot: getData2PMUI(formEditTriggerCustom.html).code
			};

			if (formcustom.isVisible() == true) {
				flag = (checkIfValuesAreEqual(triggerOriginDataForUpdate, finalData))? false : true;
			} else if (formwizard.isVisible() == true) {
				flag = formEditTriggerWizard.isDirty();
			} else if (formcopy.isVisible() == true) {
				flag = formCopyTrigger.isDirty();
                if(!flag){
                    $('.ctrlSpaceMessage').remove();
                }
			} else if (formeditcode.isVisible() == true) {
				flag = formeditcode.isDirty();
                var flagFormCustom = (checkIfValuesAreEqual(triggerOriginDataForUpdate, finalData))? false : true;
                if (!flag && formeditcode.getItems()[0].controls[0].value != "" || flagFormCustom) {
                    flag = true;
                }
			}

			if (flag == true) {
				var message_window = new PMUI.ui.MessageWindow({
					id: "cancelMessageTriggers",
					title:  "Triggers".translate(),
					windowMessageType: 'warning',
					width: 490,
					message: 'Are you sure you want to discard your changes?'.translate(),
					footerItems: [
						{
							text: "No".translate(),
							handler: function () {
								message_window.close();
							},
							buttonType : "error"
						},{
							text: "Yes".translate(),
							handler: function () {
                                triggerOriginDataForUpdate = {};
								var formcustom = triggerWindow.getItems()[1];
								var formwizard = triggerWindow.getItems()[2];
								var formcopy = triggerWindow.getItems()[3];
								var formeditcode = triggerWindow.getItems()[4];
								requiredMessage.hide();
								if (formcustom.isVisible() == true) {
									var uidInForm = formEditTriggerCustom.getFields()[0].getValue();
									formEditTriggerCustom.reset();
									openListTriggers();
								} else if (formwizard.isVisible() == true) {
									var uidInForm = formEditTriggerWizard.getFields()[0].getValue();
									formEditTriggerWizard.reset();
									openListTriggers();
								} else if (formcopy.isVisible() == true) {
                                    $('.ctrlSpaceMessage').remove();
									formCopyTrigger.reset();
									openListTriggers();
								} else if (formeditcode.isVisible() == true) {
									formeditcode.reset();
									openFormCustom("Edit".translate());
								}
								message_window.close();
								if(clickedClose){
									triggerWindow.close();
								}
							},
							buttonType : "success"
						}
					]
				});
				message_window.open();
				message_window.showFooter();
			} else {
				var formcustom = triggerWindow.getItems()[1];
				var formwizard = triggerWindow.getItems()[2];
				var formcopy = triggerWindow.getItems()[3];
				var formeditcode = triggerWindow.getItems()[4];
				var accordionnewtrigger = triggerWindow.getItems()[5];

				if (formcustom.isVisible() == true) {
					var uidInForm = formEditTriggerCustom.getFields()[0].getValue();
					formEditTriggerCustom.reset();
					openListTriggers();
					requiredMessage.hide();
				} else if (formwizard.isVisible() == true) {
					var uidInForm = formEditTriggerWizard.getFields()[0].getValue();
					formEditTriggerWizard.reset();
					openListTriggers();
				} else if (formcopy.isVisible() == true) {
					formCopyTrigger.reset();
					openListTriggers();
				} else if (formeditcode.isVisible() == true) {
					formeditcode.reset();
					openFormCustom("Edit".translate());
				} else if (accordionnewtrigger.isVisible() == true) {
					openListTriggers();
				}
				if (clickedClose){
					triggerWindow.close();
				}
			}

		};
        //GRID List Case Scheduler
        var gridListTrigger = new PMUI.grid.GridPanel({
            id: "listTriggers",
            pageSize: 10,
            width: "96%",
            style: {
                cssClasses: ["mafe-gridPanel"]
            },
            filterPlaceholder: 'Search ...'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            columns: [
                {
                    id: 'listTriggersButtonShow',
                    title: '',
                    dataType: 'button',
                    searchable: false,
                    buttonLabel: 'Show ID'.translate(),
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-show'
                        ]
                    },
                    id : 'copyuid',
					onButtonClick: function (row, grid) {
                        var dataRow = row.getData();
                        messageWindow = new PMUI.ui.MessageWindow({
							id: 'dynaformMessageWindowUID',
                            windowMessageType: 'info',
                            width: 490,
                            title:  "Triggers".translate(),
                            message: dataRow.tri_uid,
                            footerItems: [
                                {
                                    text: 'OK'.translate(),
                                    handler: function () {
                                        messageWindow.close();
                                    },
									buttonType : "success"
                                }
                            ]
                        });
                        messageWindow.setTitle("ID".translate());
                        messageWindow.open();
                        messageWindow.showFooter();
                        $(messageWindow.dom.icon).removeClass();
                    }
                },
                {
                    title: 'Title'.translate(),
                    id: "title",
                    dataType: 'string',
                    width: "407px",
                    visible: true,
                    columnData: "tri_title",
                    searcheable: true,
                    sortable: true,
                    alignmentCell: 'left'
                },
                {
                    title: 'Type'.translate(),
                    id: "type",
                    dataType: 'string',
                    width: "225px",
                    visible: true,
                    alignmentCell: 'left',
                    columnData: function (data) {
                        if (typeof(data.tri_param) == "object" && typeof(data.tri_param.params) == "object") {
                            var wizardData = data.tri_param.params;

                            return wizardData.LIBRARY_NAME;
                        } else {
                            return "Custom";
                        }
                    },
                    searcheable: true,
                    sortable: true
                },
                {
                    id: "editButton",
                    title: '',
                    dataType: 'button',
                    messageTooltip: "Edit".translate(),
                    buttonLabel: "Edit".translate(),
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        triggerOriginDataForUpdate = {};
						requiredMessage.show();
                        var data = row.getData();
                        triggerOriginDataForUpdate = data;
                        var fields;
                        if (data.tri_param == "") {

                            openFormCustom("Edit".translate());
                            formEditTriggerCustom.showFooter();

                            var codeMirrorControl, cmControlCopyTrigger;
                            codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;

                            if (codeMirrorControl != undefined) {
                                codeMirrorControl.setSize(580, 160);
                            }
                            formEditTriggerCustom.getItems()[1].setHeight(170);
                            fields = formEditTriggerCustom.getItems()[0];
                            fields.getItems()[0].setValue(data.tri_uid);
                            fields.getItems()[1].setValue(data.tri_title);
                            fields.getItems()[2].setValue(data.tri_description);
                            formEditTriggerCustom.getItems()[1].setValue(data.tri_webbot);

                            codeMirrorControl.setValue(data.tri_webbot);

                        } else {
                            openFormWizardEditMode();

                            var wizardData = data.tri_param.params;

                            var lib = wizardData.LIBRARY_CLASS;
                            lib = lib.split('.');
                            lib = lib[1];
                            fields = formEditTriggerWizard.getFields();
                            fields[0].setValue(data.tri_uid);
                            fields[1].setValue(lib);
                            fields[2].setValue(wizardData.PMFUNTION_NAME);
                            fields[3].setValue(wizardData.LIBRARY_NAME + " (" + wizardData.PMFUNTION_LABEL + ")");
                            fields[4].setValue(data.tri_title);
                            fields[5].setValue(data.tri_description);
                            fields[6].setValue(data.tri_webbot);

                            var inputItems = [];
                            var outputItems = [];

                            restClient = new PMRestClient({
                                endpoint: "trigger-wizard/" + lib + "/" + wizardData.PMFUNTION_NAME,
                                typeRequest: 'get',
                                functionSuccess: function (xhr, response) {
                                    if (response.fn_params.input != undefined) {
                                        for (j = 0; j < response.fn_params.input.length; j++) {
                                            var nameInput = response.fn_params.input[j].name;

                                            var inp = new CriteriaField({
                                                id: nameInput,
                                                pmType: "text",
                                                name: nameInput,
                                                label: response.fn_params.input[j].label,
                                                value: wizardData[nameInput].toString(),
                                                controlsWidth: 400,
                                                labelWidth: '27%',
                                                helper: response.fn_params.input[j].description,
                                                required: response.fn_params.input[j].name === "unpauseDate" ? true : response.fn_params.input[j].required,
                                                height: 45
                                            });

                                            inputItems.push(inp);
                                        }
                                    }
                                    if (response.fn_params.output != undefined) {
                                        for (k = 0; k < response.fn_params.output.length; k++) {
                                            var nameOutput = response.fn_params.output[k].name;

                                            var out = new CriteriaField({
                                                id: nameOutput,
                                                pmType: "text",
                                                name: nameOutput,
                                                label: response.fn_params.output[k].label,
                                                value: wizardData.TRI_ANSWER.toString(),
                                                controlsWidth: 400,
                                                labelWidth: '27%',
                                                helper: response.fn_params.output[k].description,
                                                required: response.fn_params.output[k].required,
                                                height: 45
                                            });

                                            outputItems.push(out);
                                        }
                                    }
                                    triggerWindow.setTitle("Edit".translate()+" "+wizardData.LIBRARY_NAME);
                                    if (inputItems.length > 0) {
                                        formEditTriggerWizard.getItems()[1].setVisible(true);
                                        formEditTriggerWizard.getItems()[2].setVisible(true);
                                        formEditTriggerWizard.getItems()[3].setVisible(true);
                                        formEditTriggerWizard.getItems()[3].clearItems();
                                        formEditTriggerWizard.getItems()[3].setItems(inputItems);
                                    } else {
                                        formEditTriggerWizard.getItems()[1].setVisible(false);
                                        formEditTriggerWizard.getItems()[2].setVisible(false);
                                        formEditTriggerWizard.getItems()[3].setVisible(false);
                                        formEditTriggerWizard.getItems()[3].clearItems();
                                    }
                                    if (outputItems.length > 0) {
                                        formEditTriggerWizard.getItems()[4].setVisible(true);
                                        formEditTriggerWizard.getItems()[5].setVisible(true);
                                        formEditTriggerWizard.getItems()[6].setVisible(true);
                                        formEditTriggerWizard.getItems()[6].clearItems();
                                        formEditTriggerWizard.getItems()[6].setItems(outputItems);
                                    } else {
                                        formEditTriggerWizard.getItems()[4].setVisible(false);
                                        formEditTriggerWizard.getItems()[5].setVisible(false);
                                        formEditTriggerWizard.getItems()[6].setVisible(false);
                                        formEditTriggerWizard.getItems()[6].clearItems();
                                    }
                                    labelInputs.dom.labelTextContainer.style.display = "none";
                                    labelOutputs.dom.labelTextContainer.style.display = "none";
                                },
                                functionFailure: function (xhr, response)
                                {
                                    PMDesigner.msgWinError(response.error.message);
                                },
                                messageError: "There are problems getting the triggers wizard list, please try again.".translate()
                            });
                            restClient.executeRestClient();
                        }
                    }
                },
                {
                    id: "deleteButton",
                    title: '',
                    dataType: 'button',
                    messageTooltip: "Delete".translate(),
                    buttonLabel: "Delete".translate(),
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        var questionWindow, dataRow = row.getData();

                        questionWindow = new PMUI.ui.MessageWindow({
                            id: "questionDeleteWindow",
                            title:  "Triggers".translate(),
                            windowMessageType: 'warning',
                            width: 490,
                            message: "Do you want to delete this Trigger?".translate(),
                            footerItems: [
                                {
                                    id: 'questionDeleteWindowButtonNo',
                                    text: "No".translate(),
                                    visible: true,
                                    handler: function () {
                                        questionWindow.close();
                                    },
									buttonType : "error"
                                },{
                                    id: 'questionDeleteWindowButtonYes',
                                    text: "Yes".translate(),
                                    visible: true,
                                    handler: function () {
                                        questionWindow.close();
                                        restClient = new PMRestClient({
                                            endpoint: "trigger/" + dataRow.tri_uid,
                                            typeRequest: 'remove',
                                            functionSuccess: function (xhr, response) {
                                                grid.removeItem(row);
                                            },
                                            functionFailure: function (xhr, response)
                                            {
                                                PMDesigner.msgWinError(response.error.message);
                                            },
                                            messageSuccess: "Trigger deleted successfully".translate(),
                                            flashContainer: gridListTrigger
                                        });
                                        restClient.executeRestClient();
                                    },
									buttonType : "success"
                                },
                            ]
                        });

                        questionWindow.open();
                        questionWindow.dom.titleContainer.style.height = "17px";
                        questionWindow.showFooter();
                    }
                }
            ],
            dataItems: listTriggers,
            onRowClick: function (row, data) {

            }
        });

        getListTrigger = function () {
            var restClient = new PMRestClient({
                endpoint: 'triggers',
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    listTriggers = response;
                    gridListTrigger.setDataItems(listTriggers);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: "There are problems getting the Triggers list, please try again.".translate()
            });
            restClient.executeRestClient();
        };

        addNumberTriggerWizard = function (value, position) {
            coutTriggers = document.createElement("span");
            coutTriggers.textContent = value;
            headerAccordion=triggerWindow.getItems()[5].getItems()[position].header.html;
            headerAccordion.appendChild(coutTriggers);
            coutTriggers.style.float = "right";
            coutTriggers.style.color = "white";
            coutTriggers.style.fontSize = "13px";
            coutTriggers.style.marginRight="6px";
            coutTriggers.style.marginTop="3px";
        };

        newTriggerOptions = function () {

            var acItemCustom = accordionNewTrigger.getItems()[0];
            requiredMessage.hide();
            var acItemCopy = accordionNewTrigger.getItems()[1];
            acItemCustom.setIconClosed('pmcustomtrigger');
            acItemCustom.setIconExpanded('pmcustomtrigger');
            acItemCopy.setIconClosed('pmcopytrigger');
            acItemCopy.setIconExpanded('pmcopytrigger');

            var itemCustom = jQuery("#custom > .pmui-accordion-item-header > span")[1];
            itemCustom.style.width = "0px";
            var itemCopy = jQuery("#copy > .pmui-accordion-item-header > span")[1];
            itemCopy.style.width = "0px";

            var numOfItems = accordionNewTrigger.getItems();

            var lengthLibFunctions=[];
            if (numOfItems.length <= 2) {
                restClient = new PMRestClient({
                    endpoint: "trigger-wizards",
                    typeRequest: 'get',
                    functionSuccess: function (xhr, response) {
                        for (i = 0; i < response.length; i++) {
                            var functTree = response[i].lib_functions;
                            lengthLibFunctions[i]=functTree.length;
                            var newTreeItems = [];
                            for (h = 0; h < functTree.length; h++) {
                                newTreeItems.push({
                                    label: functTree[h].fn_label,
                                    id: functTree[h].fn_name,
                                    onClick: function () {
                                    	requiredMessage.show();
                                        for (s = 0; s < response.length; s++) {
                                            for (p = 0; p < response[s].lib_functions.length; p++) {
                                                if (response[s].lib_functions[p].fn_name == this.id) {
                                                    var fn = response[s].lib_functions[p].fn_params;
                                                    var fnLabel = response[s].lib_functions[p].fn_label;
                                                    var fnName = response[s].lib_functions[p].fn_name;
                                                    var libName = response[s].lib_name;
                                                    var libTitle = response[s].lib_title;
                                                    p = response[s].lib_functions.length;
                                                    s = response.length - 1;
                                                }
                                            }
                                        }
                                        var inputItems = [];
                                        if (fn.input != undefined) {
                                            for (j = 0; j < fn.input.length; j++) {
                                                var val = "";
                                                if (fn.input[j].type == "array") {
                                                    val = "array('')";
                                                }
                                                var inp = new CriteriaField({
                                                    id: fn.input[j].name,
                                                    pmType: "text",
                                                    name: fn.input[j].name,
                                                    label: fn.input[j].label,
                                                    controlsWidth: 400,
                                                    labelWidth: '27%',
                                                    value: val,
                                                    helper: fn.input[j].description,
                                                    required : fn.input[j].name === "unpauseDate" ? true : fn.input[j].required,
                                                    height: 45
                                                });

                                                inputItems.push(inp);
                                            }
                                        }

                                        var outputItems = [];
                                        if (fn.output != undefined) {
                                            for (k = 0; k < fn.output.length; k++) {
                                                var out = new CriteriaField({
                                                    id: fn.output[k].name,
                                                    pmType: "text",
                                                    name: fn.output[k].name,
                                                    label: fn.output[k].label,
                                                    controlsWidth: 400,
                                                    labelWidth: '27%',
                                                    helper: fn.output[k].description,
                                                    required: fn.output[k].required,
                                                    height: 45
                                                });

                                                outputItems.push(out);
                                            }
                                        }
                                        formEditTriggerWizard.reset();
                                        formEditTriggerWizard.setTitle(fnLabel + ' (' + fnName + ')');
                                        formEditTriggerWizard.getItems()[0].getItems()[1].setValue(libName);
                                        formEditTriggerWizard.getItems()[0].getItems()[2].setValue(fnName);
                                        formEditTriggerWizard.getItems()[0].getItems()[3].setValue(libTitle + ' (' + fnLabel + ')');

                                        if (inputItems.length > 0) {
                                            formEditTriggerWizard.getItems()[1].setVisible(true);
                                            formEditTriggerWizard.getItems()[2].setVisible(true);
                                            formEditTriggerWizard.getItems()[3].setVisible(true);
                                            formEditTriggerWizard.getItems()[3].clearItems();
                                            formEditTriggerWizard.getItems()[3].setItems(inputItems);
                                        } else {
                                            formEditTriggerWizard.getItems()[1].setVisible(false);
                                            formEditTriggerWizard.getItems()[2].setVisible(false);
                                            formEditTriggerWizard.getItems()[3].setVisible(false);
                                            formEditTriggerWizard.getItems()[3].clearItems();
                                        }
                                        if (outputItems.length > 0) {
                                            formEditTriggerWizard.getItems()[4].setVisible(true);
                                            formEditTriggerWizard.getItems()[5].setVisible(true);
                                            formEditTriggerWizard.getItems()[6].setVisible(true);
                                            formEditTriggerWizard.getItems()[6].clearItems();
                                            formEditTriggerWizard.getItems()[6].setItems(outputItems);
                                        } else {
                                            formEditTriggerWizard.getItems()[4].setVisible(false);
                                            formEditTriggerWizard.getItems()[5].setVisible(false);
                                            formEditTriggerWizard.getItems()[6].setVisible(false);
                                            formEditTriggerWizard.getItems()[6].clearItems();
                                        }
                                        openFormWizard();
                                        $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                                        triggerWindow.setTitle("Create".translate()+" "+libTitle);
                                    }
                                });
                            }
                            labelInputs.dom.labelTextContainer.style.display = "none";
                            labelOutputs.dom.labelTextContainer.style.display = "none";
                            allTreesItems[i] = newTreeItems;

                            var arrayTriggerWizards = [
                                "pmFunctions",
                                "pmSugar",
                                "pmTalend",
                                "pmTrAlfresco",
                                "pmTrSharepoint",
                                "pmZimbra"
                            ];

                            if (arrayTriggerWizards.indexOf(response[i].lib_name) == -1) {
                                $("head").append("<style type=\"text/css\">." + response[i].lib_name + " {background: url(" + response[i].lib_icon + ") no-repeat 50% 50%;}</style>");
                            }

                            //Accordion
                            var newAccordionItem = [];
                            newAccordionItem = {
                                iconClass: response[i].lib_name,
                                id: response[i].lib_name,
                                title: response[i].lib_title,
                                height: 'auto'
                            };
                            accordionNewTrigger.addItem(newAccordionItem);
                        }
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageError: "There are problems getting the triggers wizard list, please try again.".translate()
                });
                restClient.executeRestClient();
            }

            openNewTriggerOptions();
            var accordion = triggerWindow.getItems()[5].getItems();
            accordion[0].setVisible(false);
            accordion[1].setVisible(false);
            for (i = 0; i < accordion.length; i++) {
                accordion[i].header.html.style.backgroundColor = "#FFFFFF";
                if (i>1) {
                    addNumberTriggerWizard(lengthLibFunctions[i-2],(i));
                }
            }
        };

        var allTreesItems = [];
        getListTrigger();

        //Button NEW Trigger
        buttonNew = new PMUI.ui.Button({
            id: 'newTriggerButton',
            text: "Create".translate(),
            height: "36px",
            width: 100,
            handler: function (event) {
                requiredMessage[0].style['marginTop']='30px';
                openFormCustom("Create".translate());
                formEditTriggerCustom.getField("code").dom.labelTextContainer.style.width = "23.8%";
                $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                formEditTriggerCustom.showFooter();

                var codeMirrorControl, cmControlCopyTrigger;
                codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;
                formEditTriggerCustom.getItems()[1].html.style.padding = "10px";
                if (codeMirrorControl != undefined) {
                    codeMirrorControl.setSize(580, 150); //CodeMirror Size
                }
                formEditTriggerCustom.getItems()[1].setHeight(170);

                formEditTriggerCustom.reset();

                fields = formEditTriggerCustom.getItems()[0];
                fields.getItems()[0].setValue("");
                fields.getItems()[1].setValue("");
                fields.getItems()[2].setValue("");
                formEditTriggerCustom.getItems()[1].setValue("");
                formEditTriggerCustom.getItems()[1].controls[0].cm.setValue("");
            },
            style: {
                cssClasses: [
                    'mafe-button-create'
                ]
            }
        });

        //Button COPY Trigger
        buttonCopy = new PMUI.ui.Button({
            id: 'copyTriggerButton',
            text: "Copy".translate(),
            height: "36px",
            width: 100,
            handler: function (event) {
                getListProjects();
                openFormCopy();
                formCopyTrigger.getFields()[1].clearOptions();
                requiredMessage.hide();
                $($('#Code .CodeMirror.cm-s-default.CodeMirror-wrap')[1]).css({'border': '1px solid #c0c0c0'});
                formCopyTrigger.getItems()[4].setHeight(160);

                var cmControlCopyTrigger = formCopyTrigger.getFields()[4].controls[0].cm;
                cmControlCopyTrigger.setValue("");
                if (cmControlCopyTrigger != undefined) {
                    cmControlCopyTrigger.setSize(650, 140); //CodeMirror in formCopyTrigger Size
                }
            },
            style: {
                cssClasses: [
                    'mafe-button-create'
                ]
            }
        });

        //Button WIZARD Trigger
        buttonWizard = new PMUI.ui.Button({
            id: 'wizardTriggerButton',
            text: "Wizard".translate(),
            height: "36px",
            width: 100,
            handler: function (event) {
                newTriggerOptions();
                requiredMessage.hide();
            },
            style: {
                cssClasses: [
                    'mafe-button-create'
                ]
            }
        });

        var openListTriggers = function ()
        {
			requiredMessage.hide();
            triggerWindow.getItems()[0].setVisible(true);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.setTitle("Triggers".translate());
            triggerWindow.hideFooter();
            $(triggerWindow.body).removeClass("pmui-background");
        };

        openFormCustom = function (typeTitle)
        {
        	requiredMessage.show();
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(true);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.footer.getItems()[0].setVisible(true); //button Cancel
            triggerWindow.footer.getItems()[1].setVisible(true); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //Edit Source Code
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(false); //button Copy/import

            triggerWindow.setTitle(typeTitle+" Custom Trigger".translate());
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");
            formEditTriggerCustom.setFocus();

            $('.CodeMirror.cm-s-default')[0].style.border = "1px solid #c0c0c0";
            if (formEditTriggerCustom.getItems()[0].getItems()[1].visible == false) {
                var fields = formEditTriggerCustom.getItems()[0];
                fields.getItems()[1].setVisible(true);
                fields.getItems()[2].setVisible(true);
                formEditTriggerCustom.footer.getItems()[1].setVisible(true);
            }
            formEditTriggerCustom.getFields()[4].dom.labelTextContainer.style.marginLeft = "10px";
            formEditTriggerCustom.setAlignmentButtons('left');

            $("#code").after($ctrlSpaceMessage.css({"margin":"5px 0 0 0","text-align":"center","width":"655px","padding":""}));
        };

        var openFormWizard = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(true);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.footer.getItems()[0].setVisible(true); //button Cancel
            triggerWindow.footer.getItems()[1].setVisible(true); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //Edit Source Code
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(false); //button Copy/import
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");
            formEditTriggerWizard.setFocus();
        };

        var openFormWizardEditMode = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(true);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.footer.getItems()[0].setVisible(true); //button Cancel
            triggerWindow.footer.getItems()[1].setVisible(true); //button Save
            triggerWindow.footer.getItems()[2].setVisible(true); //Edit Source Code
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(false); //button Copy/import
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");
            formEditTriggerWizard.setFocus();
        };

        var openFormCopy = function ()
        {
        	requiredMessage.show();
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(true);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(false);
			triggerWindow.getItems()[3].getFields()[5].html.style.marginTop = "10px";
            triggerWindow.setTitle("Copy Trigger".translate());
            triggerWindow.footer.getItems()[0].setVisible(true); //button Cancel
            triggerWindow.footer.getItems()[1].setVisible(false); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //Edit Source Code
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(true); //button Copy/import
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");
            formCopyTrigger.setFocus();

            $(".pmui-field").css("float","left");
            $('#Code .pmui.pmui-pmcodemirrorcontrol').append($ctrlSpaceMessage.css({"margin-top":"10px","text-align":"","width":"655px","padding":""}));
        };

        var openFormEditCode = function ()
        {
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(true);
            triggerWindow.getItems()[5].setVisible(false);
            triggerWindow.setTitle("Editor".translate());
            triggerWindow.footer.getItems()[0].setVisible(true); //button Cancel
            triggerWindow.footer.getItems()[1].setVisible(false); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //Edit Source Code
            triggerWindow.footer.getItems()[3].setVisible(true); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(false); //button Copy/import
            triggerWindow.showFooter();
            $(triggerWindow.body).addClass("pmui-background");

            $($('#codeEditor .CodeMirror.cm-s-default.CodeMirror-wrap')[0]).after($ctrlSpaceMessage.css({"padding":"5px 0 0 10px","text-align":""}));

        };

        var openNewTriggerOptions = function ()
        {
        	requiredMessage.show();
            triggerWindow.getItems()[0].setVisible(false);
            triggerWindow.getItems()[1].setVisible(false);
            triggerWindow.getItems()[2].setVisible(false);
            triggerWindow.getItems()[3].setVisible(false);
            triggerWindow.getItems()[4].setVisible(false);
            triggerWindow.getItems()[5].setVisible(true);
            triggerWindow.setTitle("Create Predefined Trigger".translate());
            triggerWindow.footer.getItems()[0].setVisible(true); //button Cancel
            triggerWindow.footer.getItems()[1].setVisible(false); //button Save
            triggerWindow.footer.getItems()[2].setVisible(false); //Edit Source Code
            triggerWindow.footer.getItems()[3].setVisible(false); //button Aply
            triggerWindow.footer.getItems()[4].setVisible(false); //button Copy/import
            triggerWindow.showFooter();
            $(triggerWindow.body).removeClass("pmui-background");
        };

        //obtaning the list of process to show it on the copy/import of a trigger dropdown
        var listProjects = [];
        getListProjects = function () {
            restClient = new PMRestClient({
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    listProjects = [];
                    formCopyTrigger.getFields()[0].clearOptions();
                    listProjects[0] = {
                        label: "- Select a process -".translate(),
                        value: "",
                        disabled: true,
                        selected: true
                    };
                    for (i = 0; i < response.length; i++) {
                        listProjects.push({
                            label: response[i].prj_name,
                            value: response[i].prj_uid
                        });
                    }
                    formCopyTrigger.getFields()[0].setOptions(listProjects);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: "There are problems getting the list of projects.".translate()
            });
            restClient.setBaseEndPoint('projects');
            restClient.executeRestClient();
        };

        //form Copy/Import Trigger
        var triggerSelectedData;
        var formCopyTrigger = new PMUI.form.Form({
            id: "formCopyTriggers",
            border: true,
            width: '890px',
            height: 'auto',
            title: "",
            visibleHeader: false,
            items: [
                {
                    pmType: 'dropdown',
                    id: "processField",
                    label: 'Process'.translate(),
                    name: 'prj_uid',
                    required: true,
                    controlsWidth: 300,
                    value: "",
                    options: listProjects,
                    onChange: function (newValue, prevValue) {
                        var formFields = formCopyTrigger.getFields();
                        formFields[2].setValue("");
                        formFields[3].setValue("");
                        formFields[4].controls[0].cm.setValue("");

                        var uidProj = newValue, myForm = this.form;

                        //obtaning the Trigger list of the process SELECTED
                        restClient = new PMRestClient({
                            typeRequest: 'get',
                            functionSuccess: function (xhr, response) {
                                triggerSelectedData = response;
                                var listTriggersCopy = [];
                                listTriggersCopy[0] = {
                                    label: "- Select a trigger -".translate(),
                                    value: "",
                                    disabled: true,
                                    selected: true
                                };

                                for (i = 0; i < response.length; i++) {
                                    listTriggersCopy.push({
                                        label: response[i].tri_title,
                                        value: response[i].tri_uid
                                    });
                                }
                                formFields[1].setOptions(listTriggersCopy);
                            },
                            functionFailure: function (xhr, response)
                            {
                                PMDesigner.msgWinError(response.error.message);
                            },
                            messageError: "There are problems getting the list of triggers.".translate()
                        });
                        restClient.setBaseEndPoint("project/" + uidProj + "/triggers");
                        restClient.executeRestClient();
                    }
                },
                {
                    pmType: 'dropdown',
                    id: "triggerField",
                    label: 'Trigger'.translate(),
                    name: 'tri_uid',
                    required: true,
                    controlsWidth: 300,
                    value: "",
                    options: [],
                    onChange: function (newValue, prevValue) {
                        var formFields = formCopyTrigger.getFields();
                        formFields[2].setValue("");
                        formFields[3].setValue("");
                        formFields[4].controls[0].cm.setValue("");

                        var uidTri = newValue;

                        for (i = 0; i < triggerSelectedData.length; i++) {
                            if (triggerSelectedData[i].tri_uid == uidTri) {
                                formFields[2].setValue(triggerSelectedData[i].tri_title);
                                formFields[3].setValue(triggerSelectedData[i].tri_description);
                                formFields[4].controls[0].cm.setValue(triggerSelectedData[i].tri_webbot);
                            }
                        }
                    }
                },
                {
                    pmType: "text",
                    id: "triTitle",
                    label: "Title of the new trigger".translate(),
                    placeholder: "Insert the title of the new trigger".translate(),
                    name: "tri_title",
                    required: true,
                    valueType: 'string',
                    controlsWidth: 300,
                    style: {
                        cssProperties :{
                            'float':'left'
                        }
                    }
                },
                {
                    pmType: "textarea",
                    id: "triDescription",
                    rows: 80,
                    name: 'tri_description',
                    label: "Description of the new trigger".translate(),
                    valueType: 'string',
                    controlsWidth: 652,
                    style: {
                        cssClasses: ['mafe-textarea-resize'],
                        cssProperties :{'float':'left'}
                    }
                }
            ]
        });
        var codMirr = new PMCodeMirrorField();
        codMirr.setLabel("Code".translate());
        codMirr.setID("Code");
        codMirr.setName('tri_webbot');
        CodeMirror.commands.autocomplete = function(cm) {
            CodeMirror.showHint(cm, CodeMirror.phpHint);
        }
        formCopyTrigger.addItem(codMirr);

        //Form to Edit the trigger with the WIZARD (we used a Form because we need buttons to save the changes)
        var formEditTriggerWizard = new PMUI.form.Form({
            id: "formEditTriggerWizard",
            border: true,
            visibleHeader: false,
            name: "formwizard",
            width: 926,
            title: "New Trigger".translate(),
            items: [
                {
                    id: "panelDetailsWizard",
                    pmType: "panel",
                    layout: 'vbox',
                    fieldset: false,
                    height: 'auto',
                    legend: "DETAILS".translate(),
                    items: [
                        {
                            id: "uid",
                            pmType: "text",
                            label: "ID".translate(),
                            value: "",
                            name: "uid",
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: "libName",
                            pmType: "text",
                            label: "",
                            value: "",
                            name: "libName",
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: "fnName",
                            pmType: "text",
                            label: "",
                            value: "",
                            name: "fnName",
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: "type",
                            pmType: "text",
                            label: "Type".translate(),
                            value: "WIZARD",
                            controlsWidth: 450,
                            labelWidth: '27%',
                            readOnly: true,
                            name: "type",
                            valueType: 'string'
                        },
                        {
                            id: "titleDetailsWiz",
                            pmType: "text",
                            label: "Title".translate(),
                            value: "",
                            controlsWidth: 450,
                            labelWidth: '27%',
                            name: "titleDetails",
                            valueType: 'string',
                            required: true
                        },
                        {
                            id: "descriptionDetailsWiz",
                            pmType: "textarea",
                            label: "Description".translate(),
                            value: "",
                            rows: 90,
                            width: '300px',
                            controlsWidth: 450,
                            labelWidth: '27%',
                            name: "descriptionDetails",
                            valueType: 'string',
                            style: {cssClasses: ['mafe-textarea-resize']}
                        },
                        {
                            id: "webbot",
                            pmType: "text",
                            label: "Webbot".translate(),
                            value: "",
                            name: "webbot",
                            controlsWidth: 300,
                            labelWidth: '27%',
                            visible: false,
                            valueType: 'string'
                        }
                    ]
                }
            ]
        });

        //adding a separator Inputs line
        var sepInputs = new PMSeparatorLineField({
            controlHeight: '1px',
            controlColor: "#CDCDCD",
            controlsWidth: "890px",
            marginLeft: '0%'
        });
        formEditTriggerWizard.addItem(sepInputs);

        //adding a label Inputs
        var labelInputs = new PMLabelField({
            text: "PARAMETERS".translate(),
            textMode: "plain",
            style: {
                cssProperties: {
                    color: "#AEAEAE",
                    'font-weight': 'bold'
                }
            },
            controlsWidth: 885
        });
        formEditTriggerWizard.addItem(labelInputs);

        //adding the Inputs Items (PARAMETERS) Panel
        var paramPanel = new PMUI.form.FormPanel({
            id: "panelParametersWizard",
            layout: 'vbox',
            fieldset: false,
            height: 'auto',
            visible: false,
            legend: "__PARAMETERS__".translate(),
            items: []
        });
        formEditTriggerWizard.addItem(paramPanel);

        //adding a separator Outputs line
        var sepOutputs = new PMSeparatorLineField({
            controlHeight: 1,
            controlColor: "#CDCDCD",
            controlsWidth: "890px",
            marginLeft: '0%'
        });
        formEditTriggerWizard.addItem(sepOutputs);

        //adding a label Outputs
        var labelOutputs = new PMLabelField({
            text: "RETURN VALUE".translate(),
            textMode: "plain",
            style: {
                cssProperties: {
                    color: "#AEAEAE",
                    'font-weight': 'bold'
                }
            },
            controlsWidth: 885
        });

        formEditTriggerWizard.addItem(labelOutputs);

        //adding the Output Items (Returns) Panel
        var returnPanel = new PMUI.form.FormPanel({
            id: "panelReturnValWizard",
            layout: 'vbox',
            fieldset: false,
            height: 'auto',
            visible: false,
            legend: "RETURN VALUE".translate(),
            items: []
        });
        formEditTriggerWizard.addItem(returnPanel);

        var parameterItems, returnItems;

        //treePanel New Trigger PMF
        var treeNewTrigger = new PMUI.panel.TreePanel({
            id: "treeNewTrigger",
            width: 'auto',
            height: 'auto',
            style: {
                cssClasses: ['pmtrigger'],
                cssProperties: {
                    'margin-top': '5px',
                    'margin-bottom': '4px'
                }
            },
            items: []
        });

        //Acordion Panel New Triggers Options
        var accordionNewTrigger = new PMUI.panel.AccordionPanel({
            id: "accordionNewTrigger",
            width: 885,
            height: 'auto',
            borderWidth: "0px",
            hiddenTitle: true,
            style: {
                cssProperties: {
                    'margin-left': '30px'
                }
            },
            items: [
                {
                    iconClass: "",
                    id: 'custom',
                    title: "Custom Trigger".translate(),
                    height: '26px',
                    body: "",
                    style: {
                        cssProperties: {
                            "background-color": "#FDFDFD"
                        }
                    }
                },
                {
                    iconClass: "",
                    id: 'copy',
                    title: "Copy Trigger".translate(),
                    height: '26px',
                    body: "",
                    style: {
                        cssProperties: {
                            "background-color": "#FDFDFD"
                        }
                    }
                }
            ],
            listeners: {
                select: function (obj, event) {

                    if (obj.id == "custom") {
                        openFormCustom("Create".translate());
                        $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                        formEditTriggerCustom.showFooter();

                        var codeMirrorControl, cmControlCopyTrigger;
                        codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;

                        if (codeMirrorControl != undefined) {
                            codeMirrorControl.setSize(580, 150); //CodeMirror Size
                        }
                        formEditTriggerCustom.getItems()[1].setHeight(170);

                        formEditTriggerCustom.reset();

                        fields = formEditTriggerCustom.getItems()[0];
                        fields.getItems()[0].setValue("");
                        fields.getItems()[1].setValue("");
                        fields.getItems()[2].setValue("");
                        formEditTriggerCustom.getItems()[1].setValue("");
                        formEditTriggerCustom.getItems()[1].controls[0].cm.setValue("");

                    } else if (obj.id == "copy") {

                        getListProjects();
                        openFormCopy();
                        $($('#Code .CodeMirror.cm-s-default.CodeMirror-wrap')[1]).css({'border': '1px solid #c0c0c0'});
                        $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                        formCopyTrigger.getItems()[4].setHeight(160);

                        var cmControlCopyTrigger = formCopyTrigger.getFields()[4].controls[0].cm;
                        if (cmControlCopyTrigger != undefined) {
                            cmControlCopyTrigger.setSize(650, 140); //CodeMirror in formCopyTrigger Size
                        }
                    } else {
                        if (treeNewTrigger.getItems() == "" || treeNewTrigger.id != obj.id)
                        {
                            var acItems = accordionNewTrigger.getItems();
                            var accordionActualItem = accordionNewTrigger.getItem(obj.id);

                            for (i = 0; i < acItems.length; i++) {
                                if (acItems[i].id == accordionActualItem.id) {
                                    var positionActualAcItem = i - 2;
                                }
                            }

                            treeNewTrigger.setItems(allTreesItems[positionActualAcItem]);
                            treeNewTrigger.setID(obj.id);

                            accordionActualItem.setBody(treeNewTrigger);
                            treeNewTrigger.defineEvents();
                            applyStyleTreePanel(treeNewTrigger, false);
                        }
                    }
                }
            }
        });

        var updateCustom = function (dataToSend, triggerUid) {
            var restClient = new PMRestClient({
                endpoint: "trigger/" + triggerUid,
                typeRequest: 'update',
                data: dataToSend,
                functionSuccess: function (xhr, response) {
					requiredMessage.hide();
                    formEditTriggerCustom.setDirty(false);
                    getListTrigger();
                    openListTriggers();
                    $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                },
                functionFailure: function (xhr, response)
                {
                    var msg = response.error.message;
                    var arrayMatch = [];

                    if ((arrayMatch = /^[\w\s]+\:\s*(.*)$/i.exec(msg))) {
                        msg = arrayMatch[1];
                    }

                    PMDesigner.msgWinError(msg);
                },
                messageSuccess: "Trigger updated successfully".translate(),
                flashContainer: gridListTrigger
            });
            restClient.executeRestClient();
        };

        var checkIfValuesAreEqual = function (initialData, finalData)
        {
            if (typeof(initialData['tri_uid']) == "undefined" && finalData['tri_uid']=='') {
                if (finalData['tri_description'] !='' || finalData['tri_title'] !='' || finalData['tri_webbot'] !='') {
                    return false;
                }
            }
            for (var key1 in initialData) {
                for (var key2 in finalData) {
                    if (typeof(initialData[key1]) != "undefined" &&
                        typeof(finalData[key2])   != "undefined" &&
                        key1 == key2 &&
                        initialData[key1] != finalData[key2]
                    ) {
                        return false;
                    }
                }
            }
            return true;
        }

        //Buttons Save and Cancel for the 'formEditTriggerCustom' and 'formEditTriggerWizard'
        var buttonSave = new PMUI.ui.Button({
            id: 'saveTriggerButton',
            text: "Save".translate(),
            handler: function (event) {
                triggerOriginDataForUpdate = {};
                var formcustom = triggerWindow.getItems()[1];
                var formwizard = triggerWindow.getItems()[2];
                var flagEdit;
                if (formcustom.isVisible() == true) {
                    valuesCustom=formcustom.getItems()[0];
                    if(valuesCustom.getItems()[1].value==''){
                        requiredMessage[0].style['marginTop']='54px';
                    }
                    if (!formEditTriggerCustom.isValid( )) {
                        flagEdit = formEditTriggerCustom.visible;
                    }else{
                        flagEdit = formEditTriggerCustom.isValid( );
                    }
                    if (flagEdit) {
                        if ( (navigator.userAgent.indexOf("MSIE")!=-1) || (navigator.userAgent.indexOf("Trident")!=-1) ){
                            var formTriggerData = getData2PMUI(formEditTriggerCustom.html);
                        }else {
                            var formTriggerData = formEditTriggerCustom.getData();
                        }
                        if(formTriggerData.title.trim()===""){
                            return false;
                        }
                        var dataToSend = {
                            tri_title: formTriggerData.title,
                            tri_description: formTriggerData.description,
                            tri_webbot: formTriggerData.code,
                            tri_param: ""
                        };

                        if (formTriggerData.uid === "") {
                            var restClient = new PMRestClient({
                                endpoint: 'trigger',
                                typeRequest: 'post',
                                data: dataToSend,
                                functionSuccess: function (xhr, response) {
									requiredMessage.hide();
                                    formEditTriggerCustom.setDirty(false);
                                    getListTrigger();
                                    formEditTriggerCustom.getItems()[0].getItems()[0].setValue(response.tri_uid);
                                    openListTriggers();
                                    $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                                },
                                functionFailure: function (xhr, response)
                                {
                                    var msg = response.error.message;
                                    var arrayMatch = [];

                                    if ((arrayMatch = /^[\w\s]+\:\s*(.*)$/i.exec(msg))) {
                                        msg = arrayMatch[1];
                                    }

                                    PMDesigner.msgWinError(msg);
                                },
                                messageSuccess: "New Trigger saved successfully".translate(),
                                flashContainer: gridListTrigger
                            });
                            restClient.executeRestClient();
                        } else {
                            if (formTriggerData.wizzard != "") {
                                if (formEditTriggerCustom.isDirty()) {
                                    var message_window = new PMUI.ui.MessageWindow({
                                        id: "wizzardToCustomTriggerWin",
                                        windowMessageType: 'warning',
                                        title: 'Triggers'.translate(),
                                        width: 490,
                                        message: 'Do you want to save the changes? This Trigger will be saved like a custom Trigger.'.translate(),
                                        footerItems: [
											{
                                                text: "No".translate(),
                                                handler: function () {
                                                    message_window.close();
                                                    openFormWizardEditMode();
                                                    $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                                                    formEditTriggerCustom.reset();
                                                },
												buttonType : "error"
                                            },
											{
                                                text: "Yes".translate(),
                                                handler: function () {
                                                    message_window.close();
                                                    updateCustom(dataToSend, formTriggerData.uid);
                                                },
												buttonType : "success"
                                            }
                                        ]

                                    });
                                    message_window.open();
                                    message_window.showFooter();
                                } else {
                                    openListTriggers();
                                    $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
                                }
                            } else {
                                updateCustom(dataToSend, formTriggerData.uid);
                            }
                        }
                    }
                } else if (formwizard.isVisible() == true) {
                	if (formEditTriggerWizard.isValid( ) || ((navigator.userAgent.indexOf("MSIE")!=-1) || (navigator.userAgent.indexOf("Trident")!=-1)) ) {
                        if ( (navigator.userAgent.indexOf("MSIE")!=-1) || (navigator.userAgent.indexOf("Trident")!=-1) ){
                            var formTriggerData = getData2PMUI(formEditTriggerWizard.html);
                        } else {
                            var formTriggerData = formEditTriggerWizard.getData();
                        }

                        var inputV = {};
                        var inputFields = formEditTriggerWizard.getItems()[3];
                        for (i = 0; i < inputFields.getItems().length; i++) {
                            inputV[inputFields.getItems()[i].name] = formTriggerData[inputFields.getItems()[i].name];
                        }

                        var outputV = {};
                        var outputFields = formEditTriggerWizard.getItems()[6];
                        for (j = 0; j < outputFields.getItems().length; j++) {
                            outputV[outputFields.getItems()[j].name] = formTriggerData[outputFields.getItems()[j].name];
                        }

                        var dataToSend = {
                            tri_title: formTriggerData.titleDetails,
                            tri_description: formTriggerData.descriptionDetails,
                            tri_type: "SCRIPT",
                            tri_params: {
                                input: inputV,
                                output: outputV
                            }
                        };

                        if (formTriggerData.uid === "") {
                            var restClient = new PMRestClient({
                                endpoint: 'trigger-wizard/' + formTriggerData.libName + '/' + formTriggerData.fnName,
                                typeRequest: 'post',
                                data: dataToSend,
                                functionSuccess: function (xhr, response) {
                                    formEditTriggerWizard.setDirty(false);
                                    getListTrigger();
                                    formEditTriggerWizard.getFields()[0].setValue(response.tri_uid);
                                    openListTriggers();
                                },
                                functionFailure: function (xhr, response)
                                {
                                    PMDesigner.msgWinError(response.error.message);
                                },
                                messageSuccess: "New Trigger saved successfully".translate(),
                                flashContainer: gridListTrigger
                            });
                            restClient.executeRestClient();
                        } else {
                            var restClient = new PMRestClient({
                                endpoint: 'trigger-wizard/' + formTriggerData.libName + '/' + formTriggerData.fnName + '/' + formTriggerData.uid,
                                typeRequest: 'update',
                                data: dataToSend,
                                functionSuccess: function (xhr, response) {
                                    formEditTriggerWizard.setDirty(false);
                                    getListTrigger();
                                    openListTriggers();
                                },
                                functionFailure: function (xhr, response)
                                {
                                    PMDesigner.msgWinError(response.error.message);
                                },
                                messageSuccess: "Trigger updated successfully".translate(),
                                flashContainer: gridListTrigger
                            });
                            restClient.executeRestClient();
                        }
                    }
                }
            },
            buttonType: 'success'
        });

        //Buttons Save and Cancel for the 'formEditTriggerCustom' and 'formEditTriggerWizard'
        var copyButton = new PMUI.ui.Button({
            id: 'copyAndSaveButton',
            text: "Copy Trigger".translate(),
            buttonType: 'success',
            handler: function (event) {
                if (formCopyTrigger.isValid( )) {
                    formCopyTrigger.setDirty(false);

                    var data = formCopyTrigger.getData();

                    var dataToSend = {
                        tri_title: getData2PMUI(formCopyTrigger.html).tri_title.trim(),
                        tri_description: data.tri_description,
                        tri_webbot: data.tri_webbot,
                        tri_param: ""
                    };

                    var restClient = new PMRestClient({
                        endpoint: 'trigger',
                        typeRequest: 'post',
                        data: dataToSend,
                        functionSuccess: function (xhr, response) {
                            getListTrigger();
                            formCopyTrigger.reset();
                            openListTriggers();
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        },
                        messageSuccess: "New Trigger saved successfully".translate(),
                        flashContainer: gridListTrigger
                    });
                    restClient.executeRestClient();
                }
            }
        });

        //Buttons Apply for the Code Editor
        var applyButton = new PMUI.ui.Button({
            id: 'applyButton',
            text: "Apply".translate(),
            buttonType: 'success',
            handler: function (event) {
                $("div.pmui-window-body.pmui-background").css('overflow','');
                if (formEditCode.isValid( )) {
                    var typeTitle = "Edit".translate();
                    if(triggerWindow.getItems()[1].getData().uid == "") {
                        typeTitle = "Create".translate();
                    }
                    openFormCustom(typeTitle);
                    formEditCode.setDirty(false);

                    var editCode = formEditCode.getItems()[0].controls[0].cm;
                    editCodeValue = editCode.getValue();

                    var codeMirrorCustom = formEditTriggerCustom.getItems()[1].controls[0].cm;

                    if (codeMirrorCustom != undefined) {
                        codeMirrorCustom.setSize(580, 150); //CodeMirror Size
                    }
                    codeMirrorCustom.setValue(editCodeValue);
                    formEditTriggerCustom.getItems()[1].setValue(editCodeValue);

                    editCode.setValue("");
                    editCodeValue = "";

                    formEditCode.getItems()[0].setValue("");
                }
            }
        });

        //Button Edit Source Code (this is showed just when the Trigger Wizzard is opened in edition mode)
        var btnEditSourceCode = new PMUI.ui.Button({
            id: 'btnEditSourceCode',
            text: "Edit Source Code".translate(),
            buttonType: 'success',
            handler: function (event) {

                var data = formEditTriggerWizard.getData();
                var fields;
                openFormCustom("Edit".translate());
				requiredMessage.hide();
                formEditTriggerCustom.showFooter();

                var codeMirrorControl;
                codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;

                if (codeMirrorControl != undefined) {
                    codeMirrorControl.setSize(650, 300); //CodeMirror Size
                }
                formEditTriggerCustom.getItems()[1].setHeight(170);

                fields = formEditTriggerCustom.getItems()[0];
                fields.getItems()[0].setValue(data.uid);
                fields.getItems()[1].setValue(data.titleDetails);
                fields.getItems()[2].setValue(data.descriptionDetails);
                fields.getItems()[3].setValue(data.webbot);
				fields.getItems()[3].setVisible(false);
                formEditTriggerCustom.getItems()[1].setValue(data.webbot);

                codeMirrorControl.setValue(data.webbot);

                formEditTriggerCustom.getItems()[1].setHeight(300);
                fields.getItems()[1].setVisible(false);
                fields.getItems()[2].setVisible(false);
                formEditTriggerCustom.footer.getItems()[1].setVisible(false);
                formEditTriggerCustom.footer.getItems()[0].style.addProperties({'margin-right': "10px"});
                formEditTriggerCustom.footer.style.addProperties({width: '880px'});
            }
        });

        var buttonCancel = new PMUI.ui.Button({
            id: 'cancelTriggerButton',
            text: "Cancel".translate(),
            buttonType: 'error',
            handler: function (event) {
				clickedClose = false;
				isDirtyFormTrigger();
            }
        });

        var editCode;

        //Form to Edit the Custom trigger (we used a Form because we need buttons to save the changes)
        formEditTriggerCustom = new PMUI.form.Form({
            id: "formEditTriggerCustom",
            border: true,
            visibleHeader: false,
            width: '900px',
            height: "365px",
            name: "formcustom",
            title: "Custom Trigger".translate(),
            items: [
                {
                    id: "panelDetailsCustom",
                    pmType: "panel",
                    layout: 'vbox',
                    fieldset: false,
                    height: '380px',
                    legend: "DETAILS".translate(),
                    items: [
                        {
                            id: "uid",
                            pmType: "text",
                            label: "ID".translate(),
                            value: "",
                            name: "uid",
                            readOnly: true,
                            visible: false,
                            valueType: 'string'
                        },
                        {
                            id: "title",
                            pmType: "text",
                            label: "Title".translate(),
                            value: "",
                            required: true,
                            name: "title",
                            valueType: 'string'
                        },
                        {
                            id: "description",
                            pmType: "textarea",
                            rows: 70,
                            name: 'description',
                            label: "Description".translate(),
                            valueType: 'string',
                            style: {cssClasses: ['mafe-textarea-resize']}
                        },
                        {
                            id: "wizzard",
                            pmType: "text",
                            label: "Wizzard".translate(),
                            value: "",
                            name: "wizzard",
                            readOnly: true,
                            visible: false,
                            valueType: 'string'
                        }
                    ]
                }
            ],
            buttons: [
                {
                    text: "@@",
                    id: "selectPickerButton",
                    handler: function () {
                        var picker = new VariablePicker();
                        picker.open({
                            success: function (variable) {
                                var codeMirror = formEditTriggerCustom.getItems()[1].controls[0].cm;
                                var cursorPos = codeMirror.getCursor();
                                codeMirror.replaceSelection(variable);
                                codeMirror.setCursor(cursorPos.line, cursorPos.ch);
                            }
                        });
                    },
                    style: {
                        cssProperties: {
                            "margin-left": '208px',
                            "background": "rgb(30, 145, 209)",
                            "border": "0px solid rgb(30, 145, 209)"
                        }
                    }
                }, {
                    text: "Open Editor".translate(),
                    id: "openEditorButton",
                    handler: function () {
                    	requiredMessage.hide();
                        openFormEditCode();
                        formEditCode.showFooter();

                        var codeMirrorCustom = formEditTriggerCustom.getItems()[1].controls[0].cm;
                        var value = codeMirrorCustom.getValue();

                        var codeMirrorCopy = formEditCode.getItems()[0].controls[0].cm;

                        if (codeMirrorCopy != undefined) {
                            codeMirrorCopy.setSize(810, 315); //CodeMirror Size
                            $($('#codeEditor .CodeMirror.cm-s-default.CodeMirror-wrap')[0]).css({'border': '1px solid #c0c0c0'});

                        }

                        formEditCode.getItems()[0].setHeight(325);

                        codeMirrorCopy.setValue(value);
                        formEditCode.getItems()[0].setValue(value);
                        formEditCode.setDirty(false);

                        $('#codeEditor .pmui-field-label').hide();
                        $('#formEditCode').children().last().css({'margin-top':'-352px','border':'0px','margin-right':'-15px'}).find('a').css('padding','10px 5px');
                        $($('#codeEditor .CodeMirror.cm-s-default.CodeMirror-wrap')[0]).css({'margin-left':'10px','width':'850px','height':'360px'});
                        $('#triggerWindow .pmui-window-body').css('overflow','hidden');

                    },
                    style: {
                        cssProperties: {
                            "margin-right": 2
                        }
                    }
                }
            ]
        });
        cd = new PMCodeMirrorField({
            labelWidth: '23.8%'
        });
        cd.setLabel("Code".translate());
        formEditTriggerCustom.addItem(cd);
        formEditTriggerCustom.getItems()[1].setName('code');
        formEditTriggerCustom.getItems()[1].setID('code');

        var formEditCode = new PMUI.form.Form({
            id: "formEditCode",
            border: true,
            visibleHeader: false,
            width: '925px',
            name: "formeditcode",
            title: "Editor".translate(),
            items: [],
            buttons: [
                {
                    text: "@@",
                    id: "selectPickerButton",
                    handler: function () {
                        var picker = new VariablePicker();
                        picker.open({
                            success: function (variable) {
                                var codeMirror = formEditCode.getItems()[0].controls[0].cm;
                                var cursorPos = codeMirror.getCursor();
                                codeMirror.replaceSelection(variable);
                                codeMirror.setCursor(cursorPos.line, cursorPos.ch);
                            }
                        });
                    },
                    style: {
                        cssProperties: {
                            "margin-left": '229px',
                            "background": "rgb(45, 62, 80)",
                            "border": "1px solid rgb(45, 62, 80)"
                        }
                    }
                }
            ]
        });
        editCode = new PMCodeMirrorField({
            labelWidth: '9%'
        });
        editCode.setLabel("Code".translate());
        formEditCode.addItem(editCode);
        formEditCode.getItems()[0].setName('codeEditor');
        formEditCode.getItems()[0].setID('codeEditor');

        //Trigger Window
        var triggerWindow = new PMUI.ui.Window({
            id: "triggerWindow",
            title: "Triggers".translate(),
            width: DEFAULT_WINDOW_WIDTH,
            height: DEFAULT_WINDOW_HEIGHT,
            footerItems: [
                buttonCancel,
                buttonSave,
                btnEditSourceCode,
                applyButton,
                copyButton
            ],
            buttonPanelPosition: "bottom",
            footerAling : "right",
			onBeforeClose : function(){
				clickedClose = true;
				isDirtyFormTrigger();
			}
        });


        triggerWindow.addItem(gridListTrigger);
        triggerWindow.addItem(formEditTriggerCustom);
        triggerWindow.addItem(formEditTriggerWizard);
        triggerWindow.addItem(formCopyTrigger);
        triggerWindow.addItem(formEditCode);
        triggerWindow.addItem(accordionNewTrigger);

        if (typeof listTriggers !== "undefined") {
            triggerWindow.open();
            codMirr.dom.labelTextContainer.style.width = "23.8%";
            codMirr.html.style.padding = "10px";
            formEditTriggerCustom.panel.html.style.padding = "10px 10px";
            requiredMessage = $(document.getElementById("requiredMessage"));
            triggerWindow.body.appendChild(requiredMessage[0]);
            requiredMessage.hide();
            $('#listTriggers .pmui-textcontrol').css({'margin-top': '5px', width: '250px'});
            applyStyleWindowForm(triggerWindow);
            triggerWindow.hideFooter();
            openListTriggers();

            gridListTrigger.dom.toolbar.appendChild(buttonNew.getHTML());
            buttonNew.defineEvents();

            gridListTrigger.dom.toolbar.appendChild(buttonCopy.getHTML());
            buttonCopy.defineEvents();

            gridListTrigger.dom.toolbar.appendChild(buttonWizard.getHTML());
            buttonWizard.defineEvents();

            triggerWindow.defineEvents();
            gridListTrigger.sort('tri_title', 'asc');
            formEditTriggerCustom.panel.style.addProperties({'overflow': 'hidden'});

            var formcustom = triggerWindow.getItems()[1];
                valuesCustom=formcustom.getItems()[0];
                if(valuesCustom.getItems()[1].value==''){
                requiredMessage[0].style['marginTop']='54px';
            }
        }
    };

    PMDesigner.trigger.create = function () {
        requiredMessage[0].style['marginTop']='30px';
        openFormCustom("Create".translate());
        formEditTriggerCustom.getField("code").dom.labelTextContainer.style.width = "23.8%";
        $('.pmui-pmseparatorlinefield .pmui-field-label').css({display: 'none'});
        formEditTriggerCustom.showFooter();
        var codeMirrorControl, cmControlCopyTrigger;
        codeMirrorControl = formEditTriggerCustom.getItems()[1].controls[0].cm;
        formEditTriggerCustom.getItems()[1].html.style.padding = "10px";
        if (codeMirrorControl != undefined) {
            codeMirrorControl.setSize(580, 150);
        }
        formEditTriggerCustom.getItems()[1].setHeight(170);
        formEditTriggerCustom.reset();
    };
}());
EditTrigger = function (settings, tri_webbot) {
    var that = this;
    that.onSave = new Function();
    that.tri_uid = '';
    that.tri_webbot = tri_webbot;
	that.oldValue = "";
    Mafe.Window.call(that, settings);
	that.setOnBeforeCloseHandler(function(){
		that.isDirtyFormProcess()
		});
    EditTrigger.prototype.init.call(that);
};
EditTrigger.prototype = new Mafe.Window();

EditTrigger.prototype.isDirtyFormProcess = function (){
	var that = this;
	if (that.oldValue !== that.codeMirror.getValue()){
		var message_window = new PMUI.ui.MessageWindow({
			id: "cancelMessageTriggers",
			windowMessageType: 'warning',
			width: 490,
			title: "Trigger".translate(),
			message: 'Are you sure you want to discard your changes?'.translate(),
			footerItems: [
				{
					text: "No".translate(),
					handler: function() {
						message_window.close();
					},
					buttonType : "error"
				},
				{
					text: "Yes".translate(),
					handler: function() {
						message_window.close();
						that.close();
					},
					buttonType : "success"
				}
			]
		});
		message_window.open();
		message_window.showFooter();
	} else {
		that.close();
	}
};
EditTrigger.prototype.init = function () {
    var that = this;
    $ctrlSpaceMessage = $("<p class='ctrlSpaceMessage'>" + "Press".translate() + " <strong>ctrl+space</strong> " + "to get the function list".translate() + ".</p>");
    that.codeMirror = new PMCodeMirror();
    CodeMirror.commands.autocomplete = function(cm) {
        CodeMirror.showHint(cm, CodeMirror.phpHint);
    }
    that.codeMirror.setValue(that.tri_webbot);
	that.oldValue = that.tri_webbot;
    that.setButtons([
        {
            text: "@@",
            id: "selectPickerButton",
            handler: function () {
                var picker = new VariablePicker();
                picker.open({
                    success: function (variable) {
                        var codeMirror = that.codeMirror.cm;
                        var cursorPos = codeMirror.getCursor();
                        codeMirror.replaceSelection(variable);
                        codeMirror.setCursor(cursorPos.line, cursorPos.ch);
                    }
                });
            },
            style: {
                cssProperties: {
                    "background": "rgb(45, 62, 80)",
                    "border": "1px solid rgb(45, 62, 80)"
                },
                cssClasses: ["mafe-button-condition-trigger"]
            }
        },{
            id: 'idFormEditTriggerCancel',
            text: 'Cancel'.translate(),
            buttonType: 'error',
            height: 31,
            style: {
                    cssClasses: ["mafe-button-condition-trigger"]
            },
            handler: function () {
				that.isDirtyFormProcess();
            }
        },{
            id: 'idFormEditTriggerSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            style: {
                    cssClasses: ["mafe-button-condition-trigger"]
            },
            handler: function () {
                var restClient = new PMRestClient({
                    endpoint: 'trigger/' + that.tri_uid,
                    typeRequest: 'update',
                    data: {
                        tri_param: '',
                        tri_webbot: that.codeMirror.getValue()
                    },
                    messageError: 'There are problems updating the trigger, please try again.'.translate(),
                    messageSuccess: 'Trigger updated correctly'.translate(),
                    flashContainer: that,
                    functionSuccess: function () {
                        that.close();
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restClient.executeRestClient();
            }
        }
    ]);

    that.setTitle('Trigger'.translate());
    that.open();
    that.addItem(that.codeMirror);
    that.codeMirror.cm.setSize(that.getWidth(), 380);
    $(".CodeMirror.cm-s-default.CodeMirror-wrap").after($ctrlSpaceMessage.css({"padding-left":"10px","margin":"3px 0px 0px 0px"}));
    $(".pmui-window-body").css("overflow","hidden");
};

EditCondition = function (settings) {
    var that = this;
    that.onSave = new Function();
    that.step_uid = 0;
    that.tri_uid = 0;
    that.st_type = 0;
    Mafe.Window.call(that, settings);
    EditCondition.prototype.init.call(that);
};
EditCondition.prototype = new Mafe.Window();
EditCondition.prototype.init = function () {
    var that = this;
    that.form = new Mafe.Form({
        id: 'idFormEditCondition',
        width: 500,
        title: 'Condition Trigger'.translate(),
		visibleHeader : false,
        items: [
            {
                id: 'step_mode',
                pmType: 'radio',
                label: 'Mode'.translate(),
                value: '',
                visible: this.stepType == "DYNAFORM"? true : false,
                name: 'step_mode',
                options: [
                          {
                              id: 'modeEdit',
                              label: 'Edit'.translate(),
                              value: 'EDIT',
                              selected: true
                          },{
                              id: 'modeView',
                              label: 'View'.translate(),
                              value: 'VIEW'
                          }
                          ]
            },
            new CriteriaField({
                id: 'st_condition',
                pmType: 'textarea',
                name: 'st_condition',
                valueType: 'string',
                label: 'Condition'.translate(),
                placeholder: 'Insert a condition'.translate(),
                rows: 150,
                controlsWidth: 250,
                renderType: 'textarea'
            })
        ]
    });
    that.form.onYesConfirmCancellation = function () {
        that.resetView();
        that.close();
    };

    that.setButtons([{
            id: 'idFormEditConditionCancel',
            text: 'Cancel'.translate(),
            buttonType: 'error',
            height: 31,
            style: {
                    cssClasses: ["mafe-button-condition-trigger"]
            },
            handler: function () {
                that.form.loseChanges({title:that.title.translate()});
            }
        },{
            id: 'idFormEditConditionSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            style: {
                    cssClasses: ["mafe-button-condition-trigger"]
            },
            handler: function () {
                if (that.form.isValid()) {
                    var dataAux = getData2PMUI(that.form.html);

                    var data ={
                        st_condition: dataAux.st_condition,
                        st_type: that.st_type
                    };

                    var restClient = new PMRestClient({
                        endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + ((typeof(that.step_uid) != "undefined")? that.step_uid  + "/" : "") + 'trigger/' + that.tri_uid,
                        typeRequest: 'update',
                        data: data,
                        messageError: 'There are problems update the Step Trigger, please try again.'.translate(),
                        functionSuccess: function (xhr, response) {
                            that.close();
                            that.onSave(response);
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        }
                    });
                    restClient.executeRestClient();
                }
            }
        }
    ]);

    that.setTitle(that.form.title);
    that.setWidth(500);
    that.setHeight(350);
    that.addItem(that.form);
    that.open();
};
EditCondition.prototype.getForm = function () {
    return this.form;
};

EditConditionStep = function (settings) {
    var that = this;
    that.stepType = null;
    that.step_uid = 0;
    if(settings.stepType){
        that.stepType = settings.stepType;
    }
    Mafe.Window.call(that, settings);
	that.setOnBeforeCloseHandler(function(){
		that.form.loseChanges({title:that.title.translate()});
	});
    EditConditionStep.prototype.init.call(that);
};
EditConditionStep.prototype = new Mafe.Window();
EditConditionStep.prototype.init = function () {
    var that = this;
    that.form = new Mafe.Form({
        id: 'idFormEditCondition',
        width: 500,
        title: 'Step Properties'.translate(),
		visibleHeader : false,
        items: [
            {
                id: "step_mode",
                pmType: "radio",
                label: "Mode".translate(),
                value: "",
                visible: (that.stepType == "DYNAFORM")? true : false,
                name: "step_mode",
                options:
                [
                    {
                        id: "modeEdit",
                        label: "Form".translate(),
                        value: "EDIT",
                        selected: true
                    },
                    {
                        id: "modeView",
                        label: "View".translate(),
                        value: "VIEW"
                    }
                ]
            },
            new CriteriaField({
                id: 'step_condition',
                pmType: 'textarea',
                name: 'step_condition',
                valueType: 'string',
                label: 'Condition'.translate(),
                placeholder: 'Insert a condition'.translate(),
                rows: 150,
                controlsWidth: 250,
                renderType: 'textarea'
            })
        ]
    });
    that.form.onYesConfirmCancellation = function () {
        that.resetView();
        that.close();
    };

    that.setButtons([{
            id: 'idFormEditConditionCancel',
            text: 'Cancel'.translate(),
            buttonType: 'error',
            handler: function () {
                that.form.loseChanges({title:that.title.translate()});
            }
        }, {
            id: 'idFormEditConditionSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            handler: function () {
                if (that.form.isValid()) {
                    var restClient = new PMRestClient({
                        endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + that.step_uid,
                        typeRequest: 'update',
                        data: that.form.getData(),
                        functionSuccess: function () {
                            that.close();
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        },
                        messageError: 'There are problems update the Step Trigger, please try again.'.translate()
                    });
                    restClient.executeRestClient();
                }
            }
        }
    ]);

    that.setTitle(that.form.title);
    that.setWidth(520);
    that.setHeight(370);
    that.addItem(that.form);
    that.open();
};
EditConditionStep.prototype.getForm = function () {
    return this.form;
};
EditConditionStep.prototype.setStepUid = function (step_uid) {
    this.step_uid = step_uid;
};

AssignTree = function () {
    this.groupType = ['DYNAFORM', 'INPUT_DOCUMENT', 'OUTPUT_DOCUMENT', 'EXTERNAL'];
    this.groupLabel = ['Dynaform (s)'.translate(), 'Input Document (s)'.translate(), 'OutPut Document (s)'.translate(), 'External (s)'.translate()];
    var defaults = {
        id: 'idAssignTree',
        style: {cssProperties: {margin: '0px 0px 0px 5px'}, cssClasses: ['mafe-border-panel']},
        nodeDefaultSettings: {
            labelDataBind: 'obj_title',
            itemsDataBind: 'items',
            childrenDefaultSettings: {
                labelDataBind: 'obj_title'
            }
        }
    };
    Mafe.Tree.call(this, defaults);
    AssignTree.prototype.init.call(this, defaults);
};
AssignTree.prototype = new Mafe.Tree();
AssignTree.prototype.createHTML = function () {
    Mafe.Tree.prototype.createHTML.call(this);
    this.activateSortable();
    return this.html;
};
AssignTree.prototype.init = function (defaults) {
    var that = this;
    that.load();
};
AssignTree.prototype.load = function () {
    var that = this;
    var restClient = new PMRestClient({
        typeRequest: 'post',
        multipart: true,
        data: {
            calls: [{
                    url: 'activity/' + PMDesigner.act_uid + '/available-steps',
                    method: 'GET'
                }, {
                    url: 'triggers',
                    method: 'GET'
                }
            ]
        },
        functionSuccess: function (xhr, response) {
            that.createItems(response);
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });
    restClient.executeRestClient();
};
AssignTree.prototype.createItems = function (response) {
    var that = this;
    var data;
    var dataTree = [];
    data = response[1].response;
    var labelTrigger = 'Trigger (s)'.translate();
    if (data.length === 0) {
        dataTree.push({
            obj_title: labelTrigger,
            items: [{obj_title: 'N/A'.translate(), obj_uid: ''}]
        });
    } else {
        items = [];
        for (var i = 0; i < data.length; i++) {
            items.push({
                obj_title: data[i]['tri_title'],
                obj_type: data[i]['tri_type'],
                obj_uid: data[i]['tri_uid']
            });
        }
        dataTree.push({
            obj_title: labelTrigger,
            items: items
        });
    }
    data = response[0].response;
    var type = that.groupType;
    var label = that.groupLabel;
    var items = [];
    for (var i = 0; i < type.length; i++) {
        items = [];
        for (var j = 0; j < data.length; j++) {
            if (type[i] === data[j].obj_type) {
                items.push({
                    obj_title: data[j]['obj_title'],
                    obj_type: data[j]['obj_type'],
                    obj_uid: data[j]['obj_uid']
                });
            }
        }
        if (items.length === 0) {
            dataTree.push({
                obj_title: label[i].translate(),
                items: [{obj_title: 'N/A'.translate(), obj_uid: ''}]
            });
        } else {
            dataTree.push({
                obj_title: label[i].translate(),
                items: items
            });
        }
    }
    that.clearItems();
    that.setDataItems(dataTree);
    applyStyleTreePanel(that);
};
AssignTree.prototype.add = function (item) {
    var that = this;
    var index = that.groupType.indexOf(item.obj_type);
    var node = that.items.get(index + 1);
    //sort
    var data = node.getItems();
    var aux = [item.obj_title];
    for (var i = 0; i < data.length; i++) {
        aux.push(data[i].label);
    }
    aux = aux.sort();
    var indexSort = aux.indexOf(item.obj_title) - 1;
    node.addDataItem(item);
    return node;
};
AssignTree.prototype.activateSortable = function () {
    var items = this.getItems();
    var connect, sw;
    for (var i = 0; i < items.length; i++) {
        if (items[i].getItems()[0].getData().obj_type) {
            sw = items[i].getItems()[0].getData().obj_type === "SCRIPT";
            connect = sw ? ".pmui-gridpanel-tbody" : "#accordion";
            $(items[i].html).find('ul').find('>li').draggable({
                appendTo: document.body,
                revert: "invalid",
                helper: "clone",
                cursor: "move",
                zIndex: 1000,
                connectToSortable: connect
            });
        }
    }
};

AssignAccordion = function () {
    var that = this;
    that.onReceive = new Function();
    that.onRemove = new Function();
    that.onEditDynaform = new Function();
    that.windowDialog = null;
    Mafe.Accordion.call(this, {
        id: 'idAssignAccordion',
        width: 700,
        style: {cssProperties: {margin: '0px 0px 0px 4px'}, cssClasses: ['mafe-border-panel']},
        listeners: {
            select: function (accordionItem, event) {
            }
        }
    });
    AssignAccordion.prototype.init.call(this);
};
AssignAccordion.prototype = new Mafe.Accordion();
AssignAccordion.prototype.createHTML = function () {
    Mafe.Accordion.prototype.createHTML.call(this);
    var that = this;
    this.body.id = 'accordion';//important!
    that.activateSortable();
    return this.html;
};
AssignAccordion.prototype.addItem = function (item, position) {
    var that = this;
    var itemToBeAdded, tagPrevious;
    if (this.factory) {
        itemToBeAdded = this.factory.make(item);
    }
    if (itemToBeAdded && !this.isDirectParentOf(itemToBeAdded)) {
        itemToBeAdded.parent = this;
        if (position === undefined) {
            this.items.insert(itemToBeAdded);
        } else {
            tagPrevious = this.getItems()[position].html;
            this.items.insertAt(itemToBeAdded, position);
        }
        if (this.body) {
            if (position === undefined) {
                this.body.appendChild(itemToBeAdded.getHTML());
            } else {
                this.body.insertBefore(itemToBeAdded.getHTML(), tagPrevious);
            }
            if (this.selfAdjusting) {
                this.adjustHeightItems();
            }
            if (!itemToBeAdded.eventsDefined) {
                itemToBeAdded.defineEvents();
            }
        }
    }

    //custom view
    var that = this;
    $(itemToBeAdded.getHTML()).droppable({
        over: function (event, ui) {
            /*if (ui.draggable[0].nodeName === 'TR') {
             PMUI.getPMUIObject(this).expand();
             }
             var item = PMUI.getPMUIObject(ui.draggable[0]);
             if (ui.draggable[0].nodeName === 'LI' && item && item.getData().obj_type === 'SCRIPT') {
             PMUI.getPMUIObject(this).expand();
             }*/
        },
        out: function (event, ui) {
            /*if (ui.draggable[0].nodeName === 'TR') {
             PMUI.getPMUIObject(this).collapse();
             }
             if (ui.draggable[0].nodeName === 'LI' && PMUI.getPMUIObject(ui.draggable[0]).getData().obj_type === 'SCRIPT') {
             PMUI.getPMUIObject(this).collapse();
             }*/
        }
    });
    if (item.dataStep) {
        itemToBeAdded.dataStep = item.dataStep;
    }
    var a = itemToBeAdded.title;
    itemToBeAdded.setTitle('');
    var labelNumber = document.createTextNode('');
    itemToBeAdded.labelNumber = labelNumber;
    var title = $(itemToBeAdded.getHTML()).find('.pmui-accordion-item-title');
    title.css({fontWeight: 'bold', fontSize: '14px', color: 'white'});
    title.append(labelNumber);
    title.append(a);
    if (item.closeable === true) {
        var style = 'style="float:right;font-weight:bold;margin-top:5px;margin-right:5px;" class="pmui pmui-button pmui-window-close button-icon"';

        var arrowUp = $('<div class="mafe-step-arrow-up"></div>');
        arrowUp[0].onclick = function (e) {
            that.onUp(e, itemToBeAdded);
            e.stopPropagation();
            return false;
        };

        var arrowDown = $('<div class="mafe-step-arrow-down"></div>');
        arrowDown[0].onclick = function (e) {
            that.onDown(e, itemToBeAdded);
            e.stopPropagation();
            return false;
        };

        var buttonClose = $('<a ' + style + '>' + 'Remove'.translate() + '</a>');
		var stepsType = {
				"DYNAFORM" : "Dynaform",
				"INPUT_DOCUMENT" : "Input Document",
				"OUTPUT_DOCUMENT" : "Output Document"
				};
        buttonClose[0].onclick = function (e) {
            var confirmDeletion = new Mafe.ConfirmDeletion(), title;
			
			if (stepsType[itemToBeAdded.dataStep.step_type_obj] !== undefined) {
				title = "Step {0} ( {1} )".translate([itemToBeAdded.dataStep.obj_title,stepsType[itemToBeAdded.dataStep.step_type_obj]]);
				confirmDeletion.setTitle(title);
				
			} else {
				confirmDeletion.setTitle("Step " + itemToBeAdded.dataStep.step_type_obj.capitalize());	
			}
			
            confirmDeletion.setMessage("Do you want to remove the step '{0}'?".translate([itemToBeAdded.dataStep.obj_title]));
            confirmDeletion.onDelete = function () {
                var restClient = new PMRestClient({
                    endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + itemToBeAdded.dataStep.step_uid,
                    typeRequest: 'remove',
                    functionSuccess: function (xhr, response) {
                        that.removeItem(itemToBeAdded);
                        that.setNumberPosition();
                        that.activateSortable();
                        that.onRemove(e, itemToBeAdded);
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageError: 'An unexpected error while deleting the step, please try again later.'.translate(),
                    messageSuccess: 'Step removed successfully'.translate(),
                    flashContainer: that.getParent()
                });
                restClient.executeRestClient();
            };
            e.stopPropagation();
            return false;
        };

        var buttonEdit = $('<a ' + style + '>' + 'Edit'.translate() + '</a>');
        buttonEdit[0].onclick = function (e) {
            switch (itemToBeAdded.dataStep.step_type_obj) {
                case 'DYNAFORM':
                    that.onEditDynaform();
                    var restProxy = new PMRestClient({
                        endpoint: 'dynaform/' + itemToBeAdded.dataStep.step_uid_obj,
                        typeRequest: 'get',
                        functionSuccess: function (xhr, response) {
                            var old = PMUI.activeCanvas;
                            PMUI.activeCanvas = false;
                            var formDesigner = PMDesigner.dynaformDesigner(response);
                            formDesigner.onHide = function(){
                                PMUI.activeCanvas = old;
                                new StepsTask();
                            };
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        }
                    });
                    restProxy.executeRestClient();
                    break;
                case 'OUTPUT_DOCUMENT':
                    PMDesigner.output();
                    PMDesigner.output.showTiny(itemToBeAdded.dataStep.step_uid_obj);
                    break;
                case 'INPUT_DOCUMENT':
                    var inputDocument = new InputDocument();
                    inputDocument.setAssignAccordion(that);
                    inputDocument.build();
                    inputDocument.openFormInMainWindow();
                    inputDocument.inputDocumentFormGetProxy(itemToBeAdded.dataStep.step_uid_obj);
                    inputDocument.setExternalType(true);
                    inputDocument.setWindowDialog(that.windowDialog);
                    break;
            }
            e.stopPropagation();
            return false;
        };

        var buttonCondition = $('<a ' + style + '>' + 'Properties'.translate() + '</a>');
        buttonCondition[0].onclick = function (e) {
            var restClient = new PMRestClient({
                endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + itemToBeAdded.dataStep.step_uid,
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    var a = new EditConditionStep({
                        stepType:response["step_type_obj"]
                    });
                    a.setStepUid(response.step_uid);
                    var form = a.getForm();
                    form.getField('step_mode').setValue(response.step_mode);
                    form.getField('step_condition').setValue(response.step_condition);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.executeRestClient();
            e.stopPropagation();
            return false;
        };

        title.append($('<div style="float:right;margin-top:-1px;"></div>').append(arrowUp).append(arrowDown));
        title.append(buttonClose);
        title.append(buttonEdit);
        title.append(buttonCondition);
    }
    return this;
};
AssignAccordion.prototype.init = function () {
    var that = this;
    that.setBehavior('drop');
    that.load();
};
AssignAccordion.prototype.setWindowDialog = function (value) {
    this.windowDialog = value;
    return this;
};
AssignAccordion.prototype.load = function () {
    var that = this;
    var restClient = new PMRestClient({
        typeRequest: 'post',
        multipart: true,
        data: {
            calls: [{
                    url: 'activity/' + PMDesigner.act_uid + '/steps',
                    method: 'GET'
                }, {
                    url: 'activity/' + PMDesigner.act_uid + '/step/triggers',
                    method: 'GET'
                }
            ]
        },
        functionSuccess: function (xhr, response) {
            that.clearItems();

            var data = response[0].response;
            for (var i = 0; i < data.length; i++) {
                that.addItem(that.createItemStep(data[i], true, true));
            }
            data = response[1].response;
            that.addItem({
                id: 'idAssignment',
                title: 'Assignment'.translate(),
                selected: true,
                body: new PMUI.core.Panel({
                    layout: 'vbox',
                    items: [
                        new AssignGrid({
                            title: 'Before Assignment'.translate(),
                            data: data,
                            st_type: 'BEFORE_ASSIGNMENT'
                        })
                    ]
                })
            });
            that.addItem({
                id: 'idRouting',
                title: 'Routing'.translate(),
                selected: true,
                body: new PMUI.core.Panel({
                    layout: 'vbox',
                    items: [
                        new AssignGrid({
                            title: 'Before Routing'.translate(),
                            data: data,
                            st_type: 'BEFORE_ROUTING'
                        }),
                        new AssignGrid({
                            title: 'After Routing'.translate(),
                            data: data,
                            st_type: 'AFTER_ROUTING'
                        })
                    ]
                })
            });
            that.setNumberPosition();
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },
        messageError: 'There are problems getting the Steps, please try again.'.translate()
    });
    restClient.executeRestClient();
};
AssignAccordion.prototype.createItemStep = function (data, selected, closeable) {
    var that = this;
    return {
        id: 'id' + data.step_uid_obj,
        title: data.obj_title + ' (' + that.getTitleStep(data.step_type_obj) + ')',
        dataStep: data,
        selected: selected,
        closeable: closeable,
        body: new PMUI.core.Panel({
            layout: 'vbox',
            items: [
                new AssignGrid({
                    title: 'Before'.translate() + ' ' + that.getTitleStep(data.step_type_obj),
                    data: data.triggers,
                    st_type: 'BEFORE',
                    step_uid: data.step_uid
                }),
                new AssignGrid({
                    title: 'After'.translate() + ' ' + that.getTitleStep(data.step_type_obj),
                    data: data.triggers,
                    st_type: 'AFTER',
                    step_uid: data.step_uid
                })
            ]
        })
    };
};
AssignAccordion.prototype.getTitleStep = function (type) {
    switch (type) {
        case 'DYNAFORM':
            return 'Dynaform'.translate();
        case 'OUTPUT_DOCUMENT':
            return 'Output Document'.translate();
        case 'INPUT_DOCUMENT':
            return 'Input Document'.translate();
    }
};
AssignAccordion.prototype.setNumberPosition = function () {
    var that = this;
    var dt = that.getItems();
    for (var i = 0; i < dt.length; i++) {
        dt[i].labelNumber.data = (i + 1) + ' ';
    }
};
AssignAccordion.prototype.onUp = function (e, object) {
    var parent = object.html.parentNode;
    var previus = object.html.previousSibling;
    if (previus !== null) {
        var that = this;
        var index = this.getItemIndex(object);
        object.dataStep.step_position = index;
        (new PMRestClient({
            endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + object.dataStep.step_uid,
            typeRequest: 'update',
            data: object.dataStep,
            functionSuccess: function (xhr, response) {
                parent.insertBefore(object.html, previus);
                that.reIndexItems(parent);
                that.setNumberPosition();
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            },
            messageError: 'An unexpected error while move up the step, please try again later.'.translate(),
            messageSuccess: 'Step move up successfully.'.translate(),
            flashContainer: that.getParent().getParent()
        })).executeRestClient();
    }
};
AssignAccordion.prototype.onDown = function (e, object) {
    var parent = object.html.parentNode;
    var next = object.html.nextSibling.nextSibling;
    if (next !== null && next.id !== 'idRouting') {
        var that = this;
        var index = this.getItemIndex(object);
        object.dataStep.step_position = index + 2;
        (new PMRestClient({
            endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + object.dataStep.step_uid,
            typeRequest: 'update',
            data: object.dataStep,
            functionSuccess: function (xhr, response) {
                parent.insertBefore(object.html, next);
                that.reIndexItems(parent);
                that.setNumberPosition();
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            },
            messageError: 'An unexpected error while move down the step, please try again later.'.translate(),
            messageSuccess: 'Step move down successfully.'.translate(),
            flashContainer: that.getParent().getParent()
        })).executeRestClient();
    }
};
AssignAccordion.prototype.reIndexItems = function (parent) {
    var that = this;
    var item = null;
    var n = that.items.getSize();
    var dt = parent.childNodes;
    for (var i = 0; i < dt.length; i++) {
        for (var j = 0; j < n; j++) {
            item = that.items.get(j);
            if (dt[i] === item.html) {
                that.items.remove(item);
                break;
            }
        }
        that.items.insertAt(item, i);
    }
};
AssignAccordion.prototype.activateSortable = function () {
    var that = this;
    var index = 0;
    var item = null;
    $(that.body).sortable({
        items: '>div:not(#idAssignment,#idRouting)',
        placeholder: 'steps-placeholder',
        change: function (event, ui) {
            index = ui.placeholder.index();
        },
        receive: function (event, ui) {
            item = PMUI.getPMUIObject(ui.item[0]);
        },
        stop: function (event, ui) {
            if (ui.item && ui.item[0] && ui.item[0].nodeName === 'LI') {
                ui.item.remove();
                var data = item.getData();
                var restClient = new PMRestClient({
                    endpoint: 'activity/' + PMDesigner.act_uid + '/step',
                    typeRequest: 'post',
                    data: {
                        step_type_obj: data.obj_type,
                        step_uid_obj: data.obj_uid,
                        step_condition: '',
                        step_position: index + 1,
                        step_mode: 'EDIT'
                    },
                    functionSuccess: function (xhr, response) {
                        response.obj_description = '';
                        response.obj_title = data.obj_title;
                        response.triggers = [];
                        that.addItem(that.createItemStep(response, true, true), index);
                        that.setNumberPosition();
                        that.onReceive(item);
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageError: 'An unexpected error while assigning the step, please try again later.'.translate(),
                    messageSuccess: 'Step assigned successfully.'.translate(),
                    flashContainer: that.getParent()
                });
                restClient.executeRestClient();
            } else {
                //sort element items
                that.reIndexItems(ui.item[0].parentNode);
                //get change element
                var n = that.items.getSize();
                var el = ui.item[0];
                for (var i = 0; i < n; i++) {
                    if (that.items.get(i).html === el) {
                        el = that.items.get(i);
                        break;
                    }
                }
                
                index = that.getItemIndex(el);
                var dataEdited = { 
                    step_position : index + 1,
                    step_uid : el.dataStep.step_uid,
                    step_type_obj : el.dataStep.step_type_obj,
                    step_uid_obj : el.dataStep.step_uid_obj
                };
                
                var restClientMultipart = new PMRestClient({
                    endpoint: 'activity/' + PMDesigner.act_uid + '/step/' + el.dataStep.step_uid,
                    typeRequest: 'update',
                    data: dataEdited,
                    functionSuccess: function (xhr, response) {
                        that.setNumberPosition();
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageError: 'An unexpected error while editing the step, please try again later.'.translate(),
                    messageSuccess: 'Step editing successfully.'.translate(),
                    flashContainer: that.getParent().getParent()
                });
                restClientMultipart.executeRestClient();
            }
        }
    });
};

AssignGrid = function (settings) {
    var that = this;
    that.title = settings.title;
    that.data = settings.data;
    that.st_type = settings.st_type;
    that.step_uid = settings.step_uid;
    var defaults = {
        visibleFooter: false,
//        behavior: 'dragdropsort',
        onBeforeDrop: function (container, containerParent, index) {
        }
    };
    jQuery.extend(true, defaults, settings);
    Mafe.Grid.call(this, defaults);
    AssignGrid.prototype.init.call(this, defaults);
};
AssignGrid.prototype = new Mafe.Grid();
AssignGrid.prototype.createHTML = function () {
    Mafe.Grid.prototype.createHTML.call(this);
    $(this.html).find('.pmui-gridpanel-toolbar').css({
        height: '10px',
        fontSize: '12px',
        fontWeight: 'bold'
    });
    $(this.html).find('.pmui-textcontrol').css({display: 'none'});
    this.dom.toolbar.appendChild(document.createTextNode(this.title));
    this.activateSortable();
    this.setNumberPosition();
    return this.html;
};
AssignGrid.prototype.init = function (defaults) {
    var that = this;
    that.setID('idAssignGrid');
    that.setColumns([{
            title: '',
            dataType: 'string',
            alignmentCell: 'center',
            columnData: function (data) {
                return '';
            },
            width: 20
        }, {
            title: defaults.title,
            dataType: 'string',
            alignmentCell: 'left',
            columnData: 'tri_title',
            width: 400
        }, {
            title: '',
            dataType: 'button',
            buttonLabel: function (row, data) {
                return data.st_condition === '' ? 'Condition'.translate() : 'Condition *'.translate();
            },
            buttonStyle: {cssClasses: ['mafe-button-edit']},
            onButtonClick: function (row, grid) {
                var data = row.getData();
                var a = new EditCondition();
                a.step_uid = that.step_uid;
                a.tri_uid = data.tri_uid;
                a.st_type = data.st_type;
                a.getForm().getField('st_condition').setValue(data.st_condition);
                a.onSave = function (xhr, response) {
                    var dataAux = getData2PMUI(this.form.html);
                    data.st_condition = dataAux.st_condition;
                    row.setData(data);
                };
            }
        }, {
            title: '',
            dataType: 'button',
            buttonLabel: 'Edit'.translate(),
            buttonStyle: {cssClasses: ['mafe-button-edit']},
            onButtonClick: function (row, grid) {
                var data = row.getData();
                var restClient = new PMRestClient({
                    endpoint: 'trigger/' + data.tri_uid,
                    typeRequest: 'get',
                    functionSuccess: function (xhr, response) {
                        var a = new EditTrigger({}, response.tri_webbot);
                        a.tri_uid = response.tri_uid;
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restClient.executeRestClient();
            }
        }, {
            title: '',
            dataType: 'button',
            buttonLabel: 'Remove'.translate(),
            buttonStyle: {cssClasses: ['mafe-button-delete']},
            onButtonClick: function (row, grid) {
                var confirmDeletion = new Mafe.ConfirmDeletion();
                confirmDeletion.setMessage('Do you want to remove the trigger "' + row.getData().tri_title + '"?'.translate());
                confirmDeletion.setTitle("Trigger - " + row.getData().obj_title);
				confirmDeletion.onDelete = function () {
                    var restClient = new PMRestClient({
                        endpoint: grid.step_uid === undefined ?
                                'activity/' + PMDesigner.act_uid + '/step/trigger/' + row.getData().tri_uid + '/' + that.getStepType(row.getData().st_type) :
                                'activity/' + PMDesigner.act_uid + '/step/' + grid.step_uid + '/trigger/' + row.getData().tri_uid + '/' + that.getStepType(row.getData().st_type),
                        typeRequest: 'remove',
                        functionSuccess: function (xhr, response) {
                            grid.removeItem(row);
                            grid.activateSortable();
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        },
                        flashContainer: that.getParent(),
                        messageError: 'An unexpected error while deleting the trigger, please try again later.'.translate(),
                        messageSuccess: 'Trigger removed successfully'.translate()
                    });
                    restClient.executeRestClient();
                };
            }
        }
    ]);
    that.hideHeaders();
    that.load();
};
AssignGrid.prototype.load = function () {
    var that = this;
    that.clearItems();
    var data = that.data;
    for (var i = 0; i < data.length; i++) {
        if (that.st_type === data[i].st_type) {
            that.addDataItem({
                st_condition: data[i].st_condition,
                st_position: data[i].st_position,
                st_type: data[i].st_type,
                tri_description: data[i].tri_description,
                tri_title: data[i].tri_title,
                tri_uid: data[i].tri_uid,
                obj_title: data[i].tri_title,
                obj_uid: data[i].tri_uid
            });
        }
    }
};
AssignGrid.prototype.isTriggerAssigned = function (tri_uid) {
    var data = this.getData();
    for (var i = 0; i < data.length; i++)
        if (data[i].tri_uid === tri_uid)
            return true;
    return false;
};
AssignGrid.prototype.setNumberPosition = function () {
    var that = this;
    var a = that.dom.tbody.childNodes;
    for (var i = 0; i < a.length; i++) {
        if (a[i].cells)
            a[i].cells[0].childNodes[0].innerHTML = i + 1;
    }
};
AssignGrid.prototype.getStepType = function (st_type) {
    switch (st_type) {
        case 'BEFORE_ASSIGNMENT':
            return 'before-assignment';
        case 'BEFORE_ROUTING':
            return 'before-routing';
        case 'AFTER_ROUTING':
            return 'after-routing';
        case 'BEFORE':
            return 'before';
        case 'AFTER':
            return 'after';
    }
};
AssignGrid.prototype.activateSortable = function () {
    var that = this;
    var index = 0;
    var grid;
    var item = null;
    var data = null;
    $(that.dom.tbody).sortable({
        placeholder: 'steps-placeholder',
        connectWith: '.pmui-gridpanel-tbody',
        change: function (event, ui) {
            index = ui.placeholder.index();
            if (ui.item[0].nodeName === 'TR')
                item = PMUI.getPMUIObject(ui.item[0]);
        },
        receive: function (event, ui) {
            if (ui.item[0].nodeName === 'LI')
                item = PMUI.getPMUIObject(ui.item[0]);
        },
        stop: function (event, ui) {
            index = index < 0 ? 0 : index;
            if (ui.item[0].nodeName === 'LI') {
                ui.item.remove();
                data = item.getData();
                if (that.isTriggerAssigned(data.obj_uid)) {
                    var message = new PMUI.ui.FlashMessage({
                        message: 'Trigger is assigned.'.translate(),
                        duration: 3000,
                        severity: 'error',
                        appendTo: that.getParent().getParent().getParent().getParent()
                    });
                    message.show();
                    return;
                }
                (new PMRestClient({
                    endpoint: that.step_uid === undefined ?
                            'activity/' + PMDesigner.act_uid + '/step/trigger' :
                            'activity/' + PMDesigner.act_uid + '/step/' + that.step_uid + '/trigger',
                    typeRequest: 'post',
                    data: {
                        tri_uid: data.obj_uid,
                        st_type: that.st_type,
                        st_condition: '',
                        st_position: index + 1
                    },
                    functionSuccess: function (xhr, response) {
                        that.addDataItem({
                            st_condition: '',
                            st_position: index + 1,
                            st_type: that.st_type,
                            tri_description: '',
                            tri_title: data.obj_title,
                            tri_uid: data.obj_uid,
                            obj_title: data.obj_title,
                            obj_uid: data.obj_uid
                        }, index);
                        that.setNumberPosition();
                        that.activateSortable();//important!
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    flashContainer: that.getParent().getParent().getParent().getParent(),
                    messageError: 'An unexpected error while assigning the trigger, please try again later.'.translate(),
                    messageSuccess: 'Trigger assigned successfully.'.translate()
                })).executeRestClient();
            }
            if (ui.item[0].nodeName === 'TR' && ui.item[0].parentNode === that.dom.tbody) {
                data = item.getData();
                (new PMRestClient({
                    endpoint: that.step_uid === undefined ?
                            'activity/' + PMDesigner.act_uid + "/step/trigger/" + data.tri_uid :
                            'activity/' + PMDesigner.act_uid + "/step/" + that.step_uid + "/trigger/" + data.tri_uid,
                    typeRequest: 'update',
                    data: {
                        st_type: data.st_type,
                        st_condition: data.st_condition,
                        st_position: index + 1
                    },
                    functionSuccess: function () {
                        that.setNumberPosition();
                        that.activateSortable();//important!
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    flashContainer: that.getParent().getParent().getParent().getParent(),
                    messageError: 'An unexpected error while assigning the trigger, please try again later.'.translate(),
                    messageSuccess: 'Trigger assigned successfully.'.translate()
                })).executeRestClient();
            }
            if (ui.item[0].nodeName === 'TR' && ui.item[0].parentNode !== that.dom.tbody) {
                grid = PMUI.getPMUIObject(ui.item[0].parentNode.parentNode.parentNode.parentNode);
                data = item.getData();
                index = grid.getData().length === 0 ? 0 : index;
                if (grid.isTriggerAssigned(data.tri_uid)) {
                    var message = new PMUI.ui.FlashMessage({
                        message: 'Trigger is assigned.'.translate(),
                        duration: 3000,
                        severity: 'error',
                        appendTo: that.getParent().getParent().getParent().getParent()
                    });
                    message.show();
                    //restores the removed item
                    that.removeItem(item);
                    that.addDataItem({
                        st_condition: data.st_condition,
                        st_position: data.st_position,
                        st_type: data.st_type,
                        tri_description: data.tri_description,
                        tri_title: data.obj_title,
                        tri_uid: data.obj_uid,
                        obj_title: data.obj_title,
                        obj_uid: data.obj_uid
                    }, data.st_position - 1);
                    that.setNumberPosition();
                    that.activateSortable();
                    return;
                }
                (new PMRestClient({
                    typeRequest: 'post',
                    multipart: true,
                    data: {
                        calls: [{
                                url: grid.step_uid === undefined ?
                                        'activity/' + PMDesigner.act_uid + '/step/trigger' :
                                        'activity/' + PMDesigner.act_uid + '/step/' + grid.step_uid + '/trigger',
                                method: 'POST',
                                data: {
                                    tri_uid: data.obj_uid,
                                    st_type: grid.st_type,
                                    st_condition: '',
                                    st_position: index + 1
                                }
                            }, {
                                url: item.getParent().step_uid === undefined ?
                                        'activity/' + PMDesigner.act_uid + '/step/trigger/' + data.obj_uid + '/' + that.getStepType(data.st_type) :
                                        'activity/' + PMDesigner.act_uid + '/step/' + item.getParent().step_uid + '/trigger/' + data.obj_uid + '/' + that.getStepType(data.st_type),
                                method: 'DELETE'
                            }
                        ]
                    },
                    functionSuccess: function (xhr, response) {
                        that.removeItem(item);
                        that.setNumberPosition();
                        that.activateSortable();//important!
                        grid.addDataItem({
                            st_condition: data.st_condition,
                            st_position: index + 1,
                            st_type: grid.st_type,
                            tri_description: data.tri_description,
                            tri_title: data.obj_title,
                            tri_uid: data.obj_uid,
                            obj_title: data.obj_title,
                            obj_uid: data.obj_uid
                        }, index);
                        grid.setNumberPosition();
                        grid.activateSortable();//important!
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    flashContainer: that.getParent().getParent().getParent().getParent(),
                    messageError: [
                        'An unexpected error while assigning the trigger, please try again later.'.translate()
                    ],
                    messageSuccess: [
                        'Trigger assigned successfully.'.translate()
                    ]
                })).executeRestClient();
            }
        }
    });
};

Assign = function () {
    var defaults = {
        border: false,
        layout: 'hbox',
        height: 402
    };
    this.windowDialog = null;
    this.onEditDynaform = new Function();
    PMUI.core.Panel.call(this, defaults);
    Assign.prototype.init.call(this);
};
Assign.prototype = new PMUI.core.Panel();
Assign.prototype.init = function () {
    var that = this;
    that.assignTree = new AssignTree();
    that.assignAccordion = new AssignAccordion();
    that.assignAccordion.onReceive = function (item) {
        var parent = item.getParent();
        that.assignTree.removeItem(item);
        if ($(parent.html).find(">ul").find("li").length === 0) {
            parent.setDataItems([{obj_title: 'N/A'.translate(), obj_uid: ''}]);
        }
    };
    that.assignAccordion.onRemove = function (e, object) {
        that.assignTree.load();
        that.assignTree.activateSortable();
        /* alternative no execute load, but have bugs pmui tree (reindex data items)
         var node = that.assignTree.add({
         obj_description: object.dataStep.obj_description,
         obj_title: object.dataStep.obj_title,
         obj_type: object.dataStep.step_type_obj,
         obj_uid: object.dataStep.step_uid_obj
         });
         var dt = node.getItems();
         for (var i = 0; i < dt.length; i++) {
         if (dt[i].label === 'N/A') {
         that.assignTree.removeItem(dt[i]);
         break;
         }
         }
         that.assignTree.activateSortable();*/
    };
    that.assignAccordion.onEditDynaform = function () {
        that.onEditDynaform();
    };
    that.addItem(that.assignTree);
    that.addItem(that.assignAccordion);
};
Assign.prototype.setWindowDialog = function (value) {
    this.windowDialog = value;
    this.assignAccordion.setWindowDialog(value);
    return this;
};

StepsTask = function () {
    Mafe.Window.call(this);
    StepsTask.prototype.init.call(this);
};
StepsTask.prototype = new Mafe.Window();
StepsTask.prototype.init = function () {
    var that = this;
    that.assign = new Assign();
    that.assign.setWindowDialog(that);
    that.assign.onEditDynaform = function () {
        that.close();
    };
    that.addItem(new PMUI.core.Panel({
        layout: 'hbox',
        items: [
            new PMUI.ui.TextLabel({
                textMode: 'plain',
                text: 'Available Elements'.translate(),
                style: {
                    cssClasses: ['mafe-designer-steps-tree'],
                    cssProperties: {
                        margin: '8px 0px 5px 13px'
                    }
                }
            }),
            new PMUI.ui.TextLabel({
                textMode: 'plain',
                text: 'Assigned Elements (Drop here)'.translate(),
                style: {
                    cssClasses: ['mafe-designer-steps-tree'],
                    cssProperties: {
                        margin: '8px 0px 5px 93px'
                    }
                }
            })
        ]
    }));
    that.addItem(that.assign);
    that.open();
    that.setTitle('Steps for task: '.translate() + PMDesigner.act_name);
    that.setButtons([
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'error',
            handler: function () {
                that.close();
            }
        }),
        new PMUI.ui.Button({
            id: 'windowDynaformInformationSaveOpen',
            text: 'Apply'.translate(),
            buttonType: 'success',
            handler: function () {
                var message = new PMUI.ui.FlashMessage({
                    message: 'All changes are saved correctly.'.translate(),
                    duration: 3000,
                    severity: 'info',
                    appendTo: that
                });
                message.show();
            }
        })
    ]);
    that.hideFooter();

    $("#idAssignTree").resizable({
        grid: [1, 10000],
        minWidth: 220,
        maxWidth: 560
    });
    $('#idAssignTree').css({
		"overflow-y": "auto",
		"overflow-x" : "hidden"
	});
    $("#idAssignTree").bind("resize", function (event, ui){
        if (ui.size.width<600) {
            $('#idAssignAccordion').width(700 -(ui.size.width - 210));
        }
    });
    var nodesTreepanel = that.getItems()[1].getItems()[0].getItems();
    for (var i = 0; i < nodesTreepanel.length; i++){
        var node = nodesTreepanel[i].getItems();
        for (var j = 0; j < node.length; j++){
            node[j].html.title=node[j].label;
            $(node[j].html).tooltip({tooltipClass: "mafe-action-tooltip"});
        }
    }
};

(
    function ()
    {
        var processPermissionsSetForm;
        PMDesigner.processPermissions = function (event)
        {
            var PROCESS_PERMISSIONS_OPTION = "",
                PROCESS_PERMISSIONS_UID = "",
                arrayCboGroup = [],
                arrayCboUser = [],
                winGrdpnlProcessPermissions,
                grdpnlProcessPermissions,
                frmProcessPermissions,
                processPermissionsData,
                btnCreate,btnSave,btnCancel;
                processPermissionsDataIni = {};

            var loadDataFromServerToFields = function () {
                var restClient = new PMRestClient({
                    typeRequest: 'post',
                    multipart: true,
                    data: {
                        calls: [
							{
                                url: 'project/' + PMDesigner.project.id + '/',
                                method: 'GET'
                            }, {
                                url: 'project/' + PMDesigner.project.id + '/dynaforms',
                                method: 'GET'
                            }, {
                                url: 'project/' + PMDesigner.project.id + '/input-documents',
                                method: 'GET'
                            }, {
                                url: 'project/' + PMDesigner.project.id + '/output-documents',
                                method: 'GET'
                            }
                        ]
                    },
                    functionSuccess: function (xhr, response) {
                        //project
                        data = response[0].response;
                        cboTargetTask.clearOptions();
                        cboOriginTask.clearOptions();
                        cboTargetTask.addOption({value: '', label: 'All Tasks'.translate()});
                        cboOriginTask.addOption({value: '', label: 'All Tasks'.translate()});
                        for (i = 0; i <= data.diagrams[0].activities.length - 1; i++) {
                            cboTargetTask.addOption({value: data.diagrams[0].activities[i].act_uid, label: data.diagrams[0].activities[i].act_name});
                            cboOriginTask.addOption({value: data.diagrams[0].activities[i].act_uid, label: data.diagrams[0].activities[i].act_name});
                        }
                        //project/dynaforms
                        data = response[1].response;
                        cboDynaForm.clearOptions();
                        cboDynaForm.addOption({value: '', label: 'All'.translate()});
                        for (i = 0; i <= data.length - 1; i++) {
                            cboDynaForm.addOption({value: data[i].dyn_uid, label: data[i].dyn_title});
                        }
                        //project/input-documents
                        data = response[2].response;
                        cboInputDocument.clearOptions();
                        cboInputDocument.addOption({value: '', label: 'All'.translate()});
                        for (i = 0; i <= data.length - 1; i++) {
                            cboInputDocument.addOption({value: data[i].inp_doc_uid, label: data[i].inp_doc_title});
                        }
                        //project/output-documents
                        data = response[3].response;
                        cboOutputDocument.clearOptions();
                        cboOutputDocument.addOption({value: '', label: 'All'.translate()});
                        for (i = 0; i <= data.length - 1; i++) {
                            cboOutputDocument.addOption({value: data[i].out_doc_uid, label: data[i].out_doc_title});
                        }
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restClient.setBaseEndPoint('');
                restClient.executeRestClient();
            };

            disableAllItems = function ()
            {
                winGrdpnlProcessPermissions.getItems()[0].setVisible(false);
                winGrdpnlProcessPermissions.getItems()[1].setVisible(false);
                winGrdpnlProcessPermissions.hideFooter();

            }

    var isDirty2 = function ()
    {
        var flagInsert = (typeof(processPermissionsData.op_case_status) === "undefined")? true : false;

        if (flagInsert) {
            processPermissionsData = processPermissionsDataIni;
        }

        if (cboStatusCase.getValue() != processPermissionsData.op_case_status) {
            return true;
        }

        if (cboTargetTask.getValue() != processPermissionsData.tas_uid) {
            return true;
        }

        var user = (cboGroupOrUser.get("value") !== null && cboGroupOrUser.get("value"))? cboGroupOrUser.get("value") : "";

        if (user != processPermissionsData.usr_uid) {
            return true;
        }

        if (cboOriginTask.getValue() != processPermissionsData.op_task_source) {
            return true;
        }

        if (cboParticipationRequired.getValue() != processPermissionsData.op_participate) {
            return true;
        }

        if (cboType.getValue() != processPermissionsData.op_obj_type) {
            return true;
        }

        switch (cboType.getValue()) {
            case "DYNAFORM":
                var dynaForm = (cboDynaForm.getValue() !== "")? cboDynaForm.getValue() : "0";

                if (dynaForm != processPermissionsData.op_obj_uid) {
                    return true;
                }

                if (cboPermission.getValue() != processPermissionsData.op_action) {
                    return true;
                }
                break;
            case "INPUT":
                var inputDocument = (cboInputDocument.getValue() !== "")? cboInputDocument.getValue() : "0";

                if (inputDocument != processPermissionsData.op_obj_uid) {
                    return true;
                }

                if (cboPermission.getValue() != processPermissionsData.op_action) {
                    return true;
                }

                break;
            case "OUTPUT":
                var outputDocument = (cboOutputDocument.getValue() !== "")? cboOutputDocument.getValue() : "0";

                if (outputDocument != processPermissionsData.op_obj_uid) {
                    return true;
                }
                if (cboPermission.getValue() != processPermissionsData.op_action) {
                    return true;
                }
                break;
            case "CASES_NOTES":
            case "SUMMARY_FORM":
                break;
            case "ANY":
            case "MSGS_HISTORY":
                if (cboPermission.getValue() != processPermissionsData.op_action) {
                    return true;
                }
                break;
        }

        return false;
    }

			var isDirtyFormProcessPermission = function(){
			    $("input,select,textarea").blur();
				if (frmProcessPermissions.isVisible()){
                                        var result = frmProcessPermissions.isDirty();

					if (isDirty2()) {
						var message_window = new PMUI.ui.MessageWindow({
							id: "cancelMessageTriggers",
							windowMessageType: 'warning',
							width: 490,
							title: "Permissions".translate(),
							message: 'Are you sure you want to discard your changes?'.translate(),
							footerItems: [
								{
									text: "No".translate(),
									handler: function() {
										message_window.close();
									},
									buttonType : "error"
								},
								{
									text: "Yes".translate(),
									handler: function() {
										message_window.close();
										PROCESS_PERMISSIONS_OPTION = "";
										PROCESS_PERMISSIONS_UID = "";
										cboGroupOrUser.html.find("input").val("");
										cboGroupOrUser.value = "";
										if (clickedClose){
											winGrdpnlProcessPermissions.close();
										}else{
											refreshGridPanelInMainWindow(false);	
										}

									},
									buttonType : "success"
								}
						  ]
					  });
						message_window.open();
						message_window.showFooter();
					} else {
						if(cboGroupOrUser.html.find("input").val()){
							cboGroupOrUser.html.find("input").val("");
						}
						cboGroupOrUser.containerList.hide();
						PROCESS_PERMISSIONS_OPTION = "";
						PROCESS_PERMISSIONS_UID = "";
						refreshGridPanelInMainWindow(false);					
						if (clickedClose){
							winGrdpnlProcessPermissions.close();
						}
					}
				} else {
					winGrdpnlProcessPermissions.close();
				}
			};
            var refreshGridPanelInMainWindow = function (load)
            {
                disableAllItems();
                PROCESS_PERMISSIONS_OPTION = "";
                PROCESS_PERMISSIONS_UID = "";
                winGrdpnlProcessPermissions.getItems()[0].setVisible(true);
                winGrdpnlProcessPermissions.setTitle("Permissions".translate());
                load = load != null ? load : true;
                if (load) {
                    processPermissionsGetRestProxy(grdpnlProcessPermissions);
                }
            };

            var listProcessPermissions;
            var processPermissionsGetRestProxy = function (grdpnl)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permissions",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        listProcessPermissions = response;
                        grdpnl.setDataItems(listProcessPermissions);
                        grdpnl.sort('group_user', 'asc');
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });

                restProxy.executeRestClient();
            };

            var processPermissionsPostRestProxy = function (data)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permission",
                    typeRequest: "post",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageSuccess : 'Permission saved successfully'.translate(),
                    flashContainer: grdpnlProcessPermissions
                });
                restProxy.executeRestClient();
            };

            var processPermissionGetRestProxy = function (processPermissionsUid)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permission/" + processPermissionsUid,
                    typeRequest: "get",
                    functionSuccess : function (xhr, response)
                    {
                        var data = response;
                        processPermissionsSetForm("PUT", data);
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restProxy.executeRestClient();
            };

            var processPermissionsPutRestProxy = function (processPermissionsUid, data)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permission/" + processPermissionsUid,
                    typeRequest: "update",
                    data: data,
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageSuccess : 'Permission edited successfully'.translate(),
                    flashContainer: grdpnlProcessPermissions
                });
                restProxy.executeRestClient();
            };

            var cboTargetCboOriginTaskSetOptionsRestProxy = function (cboTargetTask, cboOriginTask)
            {
                cboTargetTask.clearOptions();
                cboOriginTask.clearOptions();
                var restProxy = new PMRestClient({
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        cboTargetTask.addOption({value: "", label: "All Tasks".translate()});
                        cboOriginTask.addOption({value: "", label: "All Tasks".translate()});
                        for (var i = 0; i <= data.diagrams[0].activities.length - 1; i++) {
                            cboTargetTask.addOption({value: data.diagrams[0].activities[i].act_uid, label: data.diagrams[0].activities[i].act_name});
                            cboOriginTask.addOption({value: data.diagrams[0].activities[i].act_uid, label: data.diagrams[0].activities[i].act_name});
                        }
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });

                restProxy.executeRestClient();
            };

            var cboDynaFormSetOptionsRestProxy = function (cboDynaForm)
            {
                cboDynaForm.clearOptions();
                var restProxy = new PMRestClient({
                    endpoint: "dynaforms",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        cboDynaForm.addOption({value: "", label: "All".translate()});
                        for (var i = 0; i <= data.length - 1; i++) {
                            cboDynaForm.addOption({value: data[i].dyn_uid , label: data[i].dyn_title});
                        }
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restProxy.executeRestClient();
            };

            var cboInputDocumentSetOptionsRestProxy = function (cboInputDocument)
            {
                cboInputDocument.clearOptions();
                var restProxy = new PMRestClient({
                    endpoint: "input-documents",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        cboInputDocument.addOption({value: "", label: "All".translate()});
                        for (var i = 0; i <= data.length - 1; i++) {
                            cboInputDocument.addOption({value: data[i].inp_doc_uid, label: data[i].inp_doc_title});
                        }
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restProxy.executeRestClient();
            };

            var cboOutputDocumentSetOptionsRestProxy = function (cboOutputDocument)
            {
                cboOutputDocument.clearOptions();
                var restProxy = new PMRestClient({
                    endpoint: "output-documents",
                    typeRequest: "get",
                    functionSuccess: function (xhr, response)
                    {
                        var data = response;
                        cboOutputDocument.addOption({value: "", label: "All".translate()});
                        for (var i = 0; i <= data.length - 1; i++) {
                            cboOutputDocument.addOption({value: data[i].out_doc_uid, label: data[i].out_doc_title});
                        }
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restProxy.executeRestClient();
            };

            var processPermissionsSetFormByType = function (type)
            {
                cboPermission.removeOption("DELETE");
                cboPermission.removeOption("RESEND");

                cboDynaForm.setVisible(false);
                cboInputDocument.setVisible(false);
                cboOutputDocument.setVisible(false);
                cboPermission.setVisible(false);

                switch (type) {
                    case "DYNAFORM":
                        cboDynaForm.setVisible(true);
                        cboPermission.setVisible(true);
                        break;
                    case "INPUT":
                        cboPermission.addOption({value: "DELETE", label: "Delete".translate()});

                        cboInputDocument.setVisible(true);
                        cboPermission.setVisible(true);
                        break;
                    case "OUTPUT":
                        cboPermission.addOption({value: "DELETE", label: "Delete".translate()});

                        cboOutputDocument.setVisible(true);
                        cboPermission.setVisible(true);
                        break;
                    case "CASES_NOTES":
                    case "SUMMARY_FORM":
                        break;
                    case "MSGS_HISTORY":
                        cboPermission.addOption({value: "RESEND", label: "Resend".translate()});

                        cboPermission.setVisible(true);
                        break;
                    case "ANY":
                        cboPermission.setVisible(true);
                        break;
                }
            };

            var processPermissionsDeleteRestProxy = function (processPermissionsUid)
            {
                var restProxy = new PMRestClient({
                    endpoint: "process-permission/" + processPermissionsUid,
                    typeRequest: "remove",
                    functionSuccess: function (xhr, response)
                    {
                        refreshGridPanelInMainWindow();
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    },
                    messageSuccess : 'Permission deleted successfully'.translate(),
                    flashContainer: grdpnlProcessPermissions
                });
                restProxy.executeRestClient();
            };

            processPermissionsSetForm = function (option, data)
            {
                processPermissionsData = data
                PROCESS_PERMISSIONS_OPTION = option;
                PROCESS_PERMISSIONS_UID = (typeof(processPermissionsData.op_uid) != "undefined")? processPermissionsData.op_uid : "";

                disableAllItems();
                winGrdpnlProcessPermissions.showFooter();
                winGrdpnlProcessPermissions.getItems()[1].setVisible(true);

                loadDataFromServerToFields();

                switch (option) {
                    case "POST":
                        winGrdpnlProcessPermissions.setTitle("Create permission".translate());
                        frmProcessPermissions.reset();
                        processPermissionsSetFormByType(cboType.getValue());

                        break;
                    case "PUT":
                        winGrdpnlProcessPermissions.setTitle("Edit permission".translate());
                        cboStatusCase.setValue(processPermissionsData.op_case_status);
                        cboTargetTask.setValue(processPermissionsData.tas_uid);
                        
						var endpoint; 
						if (processPermissionsData.op_user_relation == 1) {
							endpoint = "users/"+processPermissionsData.usr_uid;
						}
						if (processPermissionsData.op_user_relation == 2) {
							endpoint = "groups/"+processPermissionsData.usr_uid;
						}
						
						if (endpoint){
							var restClient = new PMRestClient({
								typeRequest: 'get',
								functionSuccess: function (xhr, response) {
									if (response.hasOwnProperty("usr_uid")){
										cboGroupOrUser.set("value",response["usr_uid"]);
										cboGroupOrUser.data = response;
										cboGroupOrUser.html.find("input").val(response["usr_firstname"] + " "+response["usr_lastname"] + " "+"("+response["usr_username"]+")");
									}
									if (response.hasOwnProperty("grp_uid")) {
										cboGroupOrUser.set("value",response["grp_uid"]);
										cboGroupOrUser.data = response;
										cboGroupOrUser.html.find("input").val(response["grp_title"]);
									}
								},
								functionFailure: function (xhr, response){
									PMDesigner.msgWinError(response.error.message);
								},
								messageError: 'There are problems saving the assigned user, please try again.'.translate()
							});
							restClient.setBaseEndPoint(endpoint);
							restClient.executeRestClient();
						}
						
                        cboParticipationRequired.setValue(processPermissionsData.op_participate);
                        cboType.setValue(processPermissionsData.op_obj_type);
                        cboOriginTask.setValue(processPermissionsData.op_task_source);
                        processPermissionsSetFormByType(processPermissionsData.op_obj_type);
                        switch (processPermissionsData.op_obj_type) {
                            case "ANY":
                                break;
                            case "DYNAFORM":
                                cboDynaForm.setValue(processPermissionsData.op_obj_uid);
                                cboPermission.setValue(processPermissionsData.op_action);
                                break;
                            case "INPUT":
                                cboInputDocument.setValue(processPermissionsData.op_obj_uid);
                                cboPermission.setValue(processPermissionsData.op_action);
                                break;
                            case "OUTPUT":
                                cboOutputDocument.setValue(processPermissionsData.op_obj_uid);
                                cboPermission.setValue(processPermissionsData.op_action);
                                break;
                            case "CASES_NOTES":
                            case "SUMMARY_FORM":
                                break;
                            case "MSGS_HISTORY":
                                cboPermission.setValue(processPermissionsData.op_action);
                                break;
                        }
                        break;
                }
                frmProcessPermissions.setFocus();
            };

            var cboStatusCase = new PMUI.field.DropDownListField({
                id: "cboStatusCase",
                name: "cboStatusCase",
                controlsWidth:"120px",
                label: "Status Case".translate(),
                value: "ALL",
                options: [
                    {
                        value: "ALL",
                        label: "All".translate()
                    },
                    {
                        value: "DRAFT",
                        label: "DRAFT".translate()
                    },
                    {
                        value: "TO_DO",
                        label: "TO DO".translate()
                    },
                    {
                        value: "PAUSED",
                        label: "PAUSED".translate()
                    },
                    {
                        value: "COMPLETED",
                        label: "COMPLETED".translate()
                    }
                ]
            });

            var cboTargetTask = new PMUI.field.DropDownListField({
                id: "cboTargetTask",
                name: "cboTargetTask",
                controlsWidth:"300px",
                label: "Target Task".translate(),
                options: null
            });
			var cboGroupOrUser = new SuggestField({
				label: "Group or User".translate(),
				id : "cboGroupOrUser",
				placeholder : "suggest users and groups",
				width : 500,
				required : true,
				separatingText : ["Groups","Users"],
				dynamicLoad: {
					data : [
						{
							key : "grp_uid",
							label : ["grp_title"]
						},						
						{
							key : "usr_uid",
							label : ["usr_firstname","usr_lastname","(", "usr_username", ")"]
						}
					],
					keys : {
						url : HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE,
						accessToken : PMDesigner.project.tokens.access_token,						
						endpoints : [
							{	
								method : "GET",
								url : 'groups'
							},{
								method : "GET",
								url : 'users'
							}
						]
					}
				}
			});
			
            var cboOriginTask = new PMUI.field.DropDownListField({
                id: "cboOriginTask",
                name: "cboOriginTask",
                controlsWidth: "300px",
                label: "Origin Task".translate(),
                options: null
            });

            var cboParticipationRequired = new PMUI.field.DropDownListField({
                id: "cboParticipationRequired",
                name: "cboParticipationRequired",
                controlsWidth:"70px",
                label: "Participation required?".translate(),
                value: "0",
                options: [
                    {
                        value: "0",
                        label: "No".translate()
                    },
                    {
                        value: "1",
                        label: "Yes".translate()
                    }
                ]
            });
            var optionsType = [
                {
                    value: "ANY",
                    label: "All".translate()
                },
                {
                    value: "DYNAFORM",
                    label: "Dynaform".translate()
                },
                {
                    value: "INPUT",
                    label: "Input Document".translate()
                },
                {
                    value: "OUTPUT",
                    label: "Output Document".translate()
                },
                {
                    value: "CASES_NOTES",
                    label: "Cases Notes".translate()
                },
                {
                    value: "MSGS_HISTORY",
                    label: "Messages History".translate()
                }
            ];

            if (enterprise == "1") {
                optionsType.push({value: "SUMMARY_FORM", label: "Summary Form".translate()});
            }

            var cboType = new PMUI.field.DropDownListField({
                id: "cboType",
                name: "cboType",
                controlsWidth: "180px",
                label: "Type".translate(),
                value: "ANY",
                options: optionsType,
                onChange: function (newValue, prevValue)
                {
                    processPermissionsSetFormByType(cboType.getValue());
                }
            });

            var cboDynaForm = new PMUI.field.DropDownListField({
                id: "cboDynaForm",
                name: "cboDynaForm",
                 controlsWidth: "300px",
                label: "DynaForm".translate(),
                options: null,
                visible: false
            });

            var cboInputDocument = new PMUI.field.DropDownListField({
                id: "cboInputDocument",
                name: "cboInputDocument",
                controlsWidth: "300px",
                label: "Input Document".translate(),
                options: null,
                visible: false
            });

            var cboOutputDocument = new PMUI.field.DropDownListField({
                id: "cboOutputDocument",
                name: "cboOutputDocument",
                controlsWidth: "300px",
                label: "Output Document".translate(),
                options: null,
                visible: false
            });

            var cboPermission = new PMUI.field.DropDownListField({
                id: "cboPermission",
                name: "cboPermission",
                controlsWidth: "100px",
                label: "Permission".translate(),
                value: "VIEW",
                options: [
                    {
                        value: "VIEW",
                        label: "View".translate()
                    },
                    {
                        value: "BLOCK",
                        label: "Block".translate()
                    }
                ],
                visible: true
            });

            frmProcessPermissions = new PMUI.form.Form({
                id: "frmProcessPermissions",

                title: "",
                width: "890px",
                items: [
                    cboStatusCase,
                    cboTargetTask,
                    /*cboGroupOrUser,*/
                    cboOriginTask,
                    cboParticipationRequired,
                    cboType,
                    cboDynaForm,
                    cboInputDocument,
                    cboOutputDocument,
                    cboPermission
                ]
            });

            btnCreate = new PMUI.ui.Button({
                id: "btnCreate",
                text: "Create".translate(),
                height:"36px",
                width : 100,
                style: {
                    cssClasses: [
                        "mafe-button-create"
                    ]
                },

                handler: function ()
                {
                    frmProcessPermissions.reset();
                    processPermissionsDataIni = {};

                    processPermissionsDataIni.op_case_status = "ALL";
                    processPermissionsDataIni.tas_uid = "";
                    processPermissionsDataIni.usr_uid = "";
                    processPermissionsDataIni.op_task_source = "";
                    processPermissionsDataIni.op_participate = "0";
                    processPermissionsDataIni.op_obj_type = "ANY";
                    processPermissionsDataIni.op_obj_uid = "";
                    processPermissionsDataIni.op_action = "VIEW";
 
                    processPermissionsSetForm("POST", {});
                }
            });

            grdpnlProcessPermissions = new PMUI.grid.GridPanel({
                id: "grdpnlProcessPermissions",
                filterPlaceholder: "Search ...".translate(),
                emptyMessage : 'No records found'.translate(),
                nextLabel: 'Next'.translate(),
                previousLabel: 'Previous'.translate(),
                customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                    return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
                },
                pageSize:10,
                width: "96%",
                //height: DEFAULT_WINDOW_HEIGHT - 60,
                style:{
                     cssClasses:["mafe-gridPanel"]
                },
                filterable: true,
                columns: [
                    {
                        columnData: "group_user",
                        title: "Group or User".translate(),
                        alignmentCell: 'left',
                        width: "190px",
                        sortable: true
                    },
                    {
                        columnData: "participated",
                        title: "Participation".translate(),
                        alignmentCell: 'left',
                        width: "115px",
                        sortable: true
                    },
                    {
                        columnData: "op_obj_type",
                        title: "Type".translate(),
                        alignmentCell: 'left',
                        width: "100px",
                        sortable: true
                    },
                    {
                        columnData: "object",
                        title: "Object".translate(),
                        alignmentCell: 'left',
                        width: "158px",
                        sortable: true
                    },
                    {
                        columnData: "op_action",
                        title: "Permission".translate(),
                        alignmentCell: 'left',
                        width: "100px",
                        sortable: true
                    },
                    {
                        columnData: "op_case_status",
                        title: "Status".translate(),
                        alignmentCell: 'left',
                        width: "70px",
                        sortable: true
                    },
                    {
                        id: 'grdpnlProcessPermissionsButtonEdit',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Edit".translate(),
                        width: "70px",
                        buttonStyle: {
                            cssClasses: [
                                "mafe-button-edit"
                            ]
                        },

                        onButtonClick: function(row, grid)
                        {
                            frmProcessPermissions.reset();                    
      
                            var data = row.getData();
                            processPermissionGetRestProxy(data.op_uid);
                        }
                    },
                    {
                        id: 'grdpnlProcessPermissionsButtonDelete',
                        dataType: "button",
                        title: "",
                        buttonLabel: "Delete".translate(),
                        width: "80px",
                        buttonStyle: {
                            cssClasses: [
                                "mafe-button-delete"
                            ]
                        },

                        onButtonClick: function(row, grid)
                        {
                            var data = row.getData();

                            var msgWarning = new PMUI.ui.MessageWindow({
                                id: "msgWarning",
                                windowMessageType: 'warning',
                                width: 490,
                                title : "Permissions".translate(),
                                message: "Do you want to delete this permission?".translate(),
                                footerItems: [
                                    {
                                        id: 'msgWarningButtonNo',
                                        text: "No".translate(),
                                        handler: function ()
                                        {
                                            msgWarning.close();
                                        },
										buttonType : "error"
                                    },
                                    {
                                        id: 'msgWarningButtonYes',
                                        text: "Yes".translate(),
                                        handler: function ()
                                        {
                                            processPermissionsDeleteRestProxy(data.op_uid);
                                            msgWarning.close();
                                        },
										buttonType : "success"
                                    }
                                ]
                            });

                            msgWarning.open();
                            msgWarning.dom.titleContainer.style.height = '17px';
                            msgWarning.showFooter();
                        }
                    }
                ],
                dataItems: null
            });

            winGrdpnlProcessPermissions = new PMUI.ui.Window({
                id: "winGrdpnlProcessPermissions",
                title: "Permissions".translate(),
                width: DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT,
                buttonPanelPosition : "bottom",
                footerAlign : "right",
				onBeforeClose : function (){
					clickedClose = true;
					isDirtyFormProcessPermission();
				},
                footerItems: [
                              {
                                  id: "btnCancel",
                                  text: "Cancel".translate(),
                                  buttonType:"error",
                                  handler: function ()
                                  {	
									clickedClose = false;
									isDirtyFormProcessPermission();
                                  }
                              },
                          	{
                        	  id: "btnSave",
                              text: "Save".translate(),
                              buttonType:"success",
                              handler: function ()
                              {
								var cboGroupOrUserValue = "";
								
                                if (frmProcessPermissions.isValid() && cboGroupOrUser.isValid()) {
									if (cboGroupOrUser.data){
										if (cboGroupOrUser.data.hasOwnProperty("usr_uid")){
											cboGroupOrUserValue = "1|" + cboGroupOrUser.get("value");
										}
										if (cboGroupOrUser.data.hasOwnProperty("grp_uid")){
											cboGroupOrUserValue = "2|" + cboGroupOrUser.get("value");
										}
									}else{
										cboGroupOrUserValue = "";
									}
                                    var groupOrUser = cboGroupOrUserValue.split("|");

                                    var data = {
										op_case_status: cboStatusCase.getValue(),
										tas_uid: cboTargetTask.getValue() === '0' ? '' : cboTargetTask.getValue(),
										op_user_relation: groupOrUser[0],
										usr_uid: groupOrUser[1],
										op_task_source: cboOriginTask.getValue() === '0' ? '' : cboOriginTask.getValue(),
										op_participate: cboParticipationRequired.getValue()
                                    };

                                    switch (cboType.getValue()) {
                                        case "DYNAFORM":
											data["op_obj_type"] = cboType.getValue();
                                            data["dynaforms"] = cboDynaForm.getValue();
                                            data["op_action"] = cboPermission.getValue();
                                            break;
										case "INPUT":
											data["op_obj_type"] = cboType.getValue();
											data["inputs"] = cboInputDocument.getValue();
											data["op_action"] = cboPermission.getValue();
											break;
										case "OUTPUT":
											data["op_obj_type"] = cboType.getValue();
											data["outputs"] = cboOutputDocument.getValue();
											data["op_action"] = cboPermission.getValue();
											break;
										case "CASES_NOTES":
											data["op_obj_type"] = cboType.getValue();
											data["op_action"] = cboPermission.getValue();
											break;
										default:
											data["op_obj_type"] = cboType.getValue();
											data["op_action"] = cboPermission.getValue();
											break;
                                    }
									switch (PROCESS_PERMISSIONS_OPTION) {
                                          case "POST":
                                              processPermissionsPostRestProxy(data);
                                              break;
                                          case "PUT":
                                              processPermissionsPutRestProxy(PROCESS_PERMISSIONS_UID, data);
                                              break;
                                    }
                                }else{
									cboGroupOrUser.showMessageRequired();
								}

                                cboGroupOrUser.html.find("input").val("");
				cboGroupOrUser.value = "";
                              }
                          	}
                          ]
            });

            winGrdpnlProcessPermissions.addItem(grdpnlProcessPermissions);
            winGrdpnlProcessPermissions.addItem(frmProcessPermissions);
			
            refreshGridPanelInMainWindow();
            if (typeof listProcessPermissions !== "undefined") {
                winGrdpnlProcessPermissions.open();

				$(cboGroupOrUser.createHTML()).insertAfter(cboTargetTask.html);
				
				
				cboGroupOrUser.html.find("input").val("");
				jQuery(grdpnlProcessPermissions.html).css({
					margin : "2px"
				});
                winGrdpnlProcessPermissions.body.style.height = "auto";
                $('#grdpnlProcessPermissions .pmui-textcontrol').css({'margin-top':'5px', width:'250px'});
                winGrdpnlProcessPermissions.defineEvents();
                applyStyleWindowForm(winGrdpnlProcessPermissions);

                grdpnlProcessPermissions.dom.toolbar.appendChild(btnCreate.getHTML());
                btnCreate.defineEvents();
                disableAllItems();
                refreshGridPanelInMainWindow();
            }

        };

        PMDesigner.processPermissions.create = function () {
            PMDesigner.processPermissions();

            frmProcessPermissions.reset();
            processPermissionsDataIni = {};

            processPermissionsDataIni.op_case_status = "ALL";
            processPermissionsDataIni.tas_uid = "";
            processPermissionsDataIni.usr_uid = "";
            processPermissionsDataIni.op_task_source = "";
            processPermissionsDataIni.op_participate = "0";
            processPermissionsDataIni.op_obj_type = "ANY";
            processPermissionsDataIni.op_obj_uid = "";
            processPermissionsDataIni.op_action = "VIEW";

            processPermissionsSetForm("POST", {});
        };
    }()
);

(function () {
    var winHtmlShow, loadValuesStartMessage;

    PMDesigner.startMessage = function (element) {
        var winGrdpnlStartMessage,
                btnNew,
                cboUser,
                cboDynaForm,
                btnGenerateStartMessagePage,
                frmDataStartMessage,
                frmHtml,
                winFrmDataStartMessage,
                restProxy,
                listUsers = [],
                listDynaforms = [],
                dataForm = [],
                startMessage = element;

        disableAllItems = function () {
            winGrdpnlStartMessage.getItems()[0].setVisible(false);
            winGrdpnlStartMessage.getItems()[1].setVisible(false);
            btnGenerateStartMessagePage.setVisible(false);
            btnStartMessageCancel.setVisible(false);
            btnClose.setVisible(false);
            winGrdpnlStartMessage.hideFooter();
        }

        winFrmStartMessageShow = function () {
            disableAllItems();
            frmDataStartMessage.reset();
            winGrdpnlStartMessage.showFooter();
            winGrdpnlStartMessage.getItems()[0].setVisible(true);
            btnGenerateStartMessagePage.setVisible(true);
            btnStartMessageCancel.setVisible(true);
            loadDataUsers();
            loadDataDynaform();
            loadDataForm();
            frmDataStartMessage.setFocus();
        };

        winHtmlShow = function (msgHtml) {
            if (typeof msgHtml == 'undefined') {
                msgHtml = dataForm.we_data;
                if (dataForm.we_method == "WS") {
                    window.open(msgHtml);
                    winGrdpnlStartMessage.close();
                    return false;
                }
            }
            disableAllItems();
            winGrdpnlStartMessage.showFooter();
            winGrdpnlStartMessage.footer.getItems()[1].setVisible(false);
            btnClose.setVisible(true);
            winGrdpnlStartMessage.getItems()[1].setVisible(true);
            winGrdpnlStartMessage.getItems()[1].setWidth(925);
            winGrdpnlStartMessage.getItems()[1].setHeight(440);
            winGrdpnlStartMessage.getItems()[1].hideHeader();
            frmHtml.getFields()[0].setHeight(396);
            frmHtml.getItems()[0].setValue(msgHtml);
            frmHtml.panel.style.addProperties({'box-sizing': 'initial'});
            frmHtml.style.addProperties({marginLeft: '16px'});
            frmHtml.setFocus();
            return true;
        };

        loadValuesStartMessage = function (flag) {
                listUsers = [];
                listDynaforms = [];
                dataForm = [];
                restClient = new PMRestClient({
                    typeRequest: 'post',
                    multipart: true,
                    data: {
                        calls: [
                            {
                                url: 'activity/' + startMessage.ports.get(0).connection.flo_element_dest + '/assignee/all',
                                method: 'GET'
                            },
                            {
                                url: "activity/" + startMessage.ports.get(0).connection.flo_element_dest + "/steps",
                                method: 'GET'
                            }, {
                                url: 'web-entry/' + startMessage.evn_uid,
                                method: 'GET'
                            }
                        ]
                    },
                    functionSuccess: function (xhr, response) {
                        listUsers = response[0].response;
                        listDynaforms = response[1].response;
                        dataForm = response[2].response;
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
            restClient.executeRestClient();
            if (flag) {
                var viewFlagForm = false;
                if (typeof dataForm == 'object' && dataForm.we_data != null) {
                    viewFlagForm = true;
                }
                var response = [listUsers.length, listDynaforms.length, viewFlagForm];
                return response;
            }
            return true;
        }

        var updateStartMessage = function (data) {
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: "web-entry/" + startMessage.evn_uid,
                            method: 'PUT',
                            data: data
                        },
                        {
                            url: 'web-entry/' + startMessage.evn_uid,
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    dataForm = response[1].response;
                    if (data.we_method == "HTML") {
                        winHtmlShow(response.we_data);
                    }
                    btnGenerateStartMessagePage.setVisible(false);
                    btnStartMessageCancel.setVisible(false);
                    btnClose.setVisible(true);
                    winGrdpnlStartMessage.footer.getItems()[1].setVisible(false);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: ["There are problems updating the Web Entry, please try again.".translate()],
                messageSuccess: ['Web Entry updated successfully'.translate()],
                flashContainer: frmDataStartMessage
            });
            restClient.executeRestClient();
        };

        var loadDataDynaform = function () {
            cboDynaForm.clearOptions();
            for (var i = 0; i <= listDynaforms.length - 1; i++) {
                if (listDynaforms[i].step_type_obj == "DYNAFORM") {
                    cboDynaForm.addOption({
                        value: listDynaforms[i].step_uid_obj,
                        label: listDynaforms[i].obj_title
                    });
                }
            }
        };

        var loadDataUsers = function () {
            cboUser.clearOptions();
            for (var i = 0; i <= listUsers.length - 1; i++) {
                cboUser.addOption({
                    value: listUsers[i].aas_uid,
                    label: listUsers[i].aas_name + ' ' + listUsers[i].aas_lastname
                });
            }
        };

        loadDataForm = function () {
            cboUser.setValue(dataForm.usr_uid);
            cboDynaForm.setValue(dataForm.dyn_uid);
            cboMethod.setValue(dataForm.we_method);
        };

        enableGenerateWebEntry = function () {
            btnGenerateStartMessagePage.setVisible(true);
            btnStartMessageCancel.setVisible(true);
            btnClose.setVisible(false);
            winGrdpnlStartMessage.footer.getItems()[1].setVisible(true);
        };
        cboUser = new PMUI.field.DropDownListField({
            id: "cboUser",
            name: "cboUser",
            label: "User".translate(),
            required: true,
            options: null,
            onChange: function (newVal, oldVal) {
                enableGenerateWebEntry();
            },
            controlsWidth: 350
        });

        cboDynaForm = new PMUI.field.DropDownListField({
            id: "cboDynaForm",
            name: "cboDynaForm",
            label: "Initial Dynaform".translate(),
            options: null,
            required: true,
            onChange: function (newVal, oldVal) {
                enableGenerateWebEntry();
            },
            controlsWidth: 350
        });

        var cboMethod = new PMUI.field.DropDownListField({
            id: "cboMethod",
            name: "cboMethod",
            label: "Method".translate(),
            value: "WS",
            options: [
                {
                    value: "WS",
                    label: "PHP pages with Web Services".translate()
                },
                {
                    value: "HTML",
                    label: "Single HTML".translate()
                }
            ],
            onChange: function (newVal, oldVal) {
                enableGenerateWebEntry();
            },
            controlsWidth: 350
        });

        btnGenerateStartMessagePage = new PMUI.ui.Button({
            id: "btnGenerateStartMessagePage",
            text: "Generate Web Entry Page".translate(),
            handler: function ()
            {
                var flagGenerateStartMessage = 0;

                var data = {
                    tas_uid: startMessage.ports.get(0).connection.flo_element_dest,
                    dyn_uid: cboDynaForm.getValue(),
                    usr_uid: cboUser.getValue(),
                    we_title: startMessage.evn_name,
                    we_description: '',
                    we_method: cboMethod.getValue(),
                    we_input_document_access: 1
                };

                if (frmDataStartMessage.isValid()) {
                    updateStartMessage(data);
                }
            },
            buttonType: 'success',
            height: 31,
            visible: true
        });
        btnSaveStartMessagePage = new PMUI.ui.Button({
            id: "btnGenerateStartMessagePage",
            text: "Save".translate(),
            handler: function ()
            {
                var flagGenerateStartMessage = 0;

                var data = {
                    tas_uid: startMessage.ports.get(0).connection.flo_element_dest,
                    dyn_uid: cboDynaForm.getValue(),
                    usr_uid: cboUser.getValue(),
                    we_title: startMessage.evn_name,
                    we_description: '',
                    we_method: cboMethod.getValue(),
                    we_input_document_access: 1
                };

                if (frmDataStartMessage.isValid()) {
                    updateStartMessage(data);
                }
            },
            buttonType: 'success',
            height: 31,
            visible: true
        });

        frmDataStartMessage = new PMUI.form.Form({
            id: "frmDataStartMessage",
            title: "",
            width: DEFAULT_WINDOW_WIDTH - 70,
            items: [
                cboUser,
                cboDynaForm,
                cboMethod
            ],
            visibleHeader: false
        });

        btnClose = new PMUI.ui.Button({
            id: "btnClose",
            text: "Close".translate(),
            handler: function ()
            {
                winGrdpnlStartMessage.close();
            },
            buttonType: 'success',
            height: 31
        });

        btnStartMessageCancel = new PMUI.ui.Button({
            id: "btnStartMessageCancel",
            text: "Cancel".translate(),
            handler: function ()
            {
                if (frmDataStartMessage.isDirty()) {
                    var message_window = new PMUI.ui.MessageWindow({
                        windowMessageType: 'warning',
                        id: "cancelMessageStartTimer",
                        title: "Start Message Event".translate(),
                        message: 'Are you sure you want to discard your changes?'.translate(),
                        bodyHeight: 'auto',
                        width: 490,
                        footerItems: [
                            {
                                text: 'No'.translate(),
                                handler: function () {
                                    message_window.close();
                                },
								buttonType : "error"
                            },
							{
                                text: 'Yes'.translate(),
                                handler: function () {
                                    message_window.close();
                                    winGrdpnlStartMessage.close();
                                },
								buttonType : "success"
                            }
                        ]
                    });
                    message_window.open();
                    message_window.showFooter();
                } else {
                    frmDataStartMessage.reset();
                    winGrdpnlStartMessage.close();
                }
            }
        });

        frmHtml = new PMUI.form.Form({
            id: "frmHtml",
            title: "",
            width: DEFAULT_WINDOW_WIDTH - 43,
            items: [
                {
                    id: "txtHtml",
                    name: "txtHtml",
                    pmType: "textarea",
                    valueType: "string",
                    rows: 400,
                    value: '',
                    controlsWidth: DEFAULT_WINDOW_WIDTH - 50,
                    labelVisible: false,
                    style: {cssClasses: ['mafe-textarea-resize']}
                }
            ]
        });

        winGrdpnlStartMessage = new PMUI.ui.Window({
            id: "winGrdpnlStartMessage",
            title: "Start Message Event".translate(),
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            buttonPanelPosition: "top",
            buttons: [btnSaveStartMessagePage, {pmType: 'label', text: 'or'}, btnStartMessageCancel, btnClose]
        });

        winGrdpnlStartMessage.addItem(frmDataStartMessage);
        //winGrdpnlStartMessage.addItem(frmHtml);

        openForm = function () {
            winGrdpnlStartMessage.open();
            winGrdpnlStartMessage.defineEvents();
            applyStyleWindowForm(winGrdpnlStartMessage);

            winGrdpnlStartMessage.footer.html.style.textAlign = 'right';

            winFrmStartMessageShow();
        }
    };

    PMDesigner.startMessage.openForm = function (element) {
        openForm();
    };

    PMDesigner.startMessage.viewForm = function (element) {
        openForm();
        //winHtmlShow();
    };

    PMDesigner.startMessage.validate = function (starMessageEvent) {
        if (starMessageEvent.ports.isEmpty()) {
            PMDesigner.msgFlash('Must connect to a Task'.translate(), document.body, 'error', 4000, 5);
            return [false, false];
        }
        PMDesigner.startMessage(starMessageEvent);
        response = loadValuesStartMessage(true);
        if (response[0] == 0) {
            PMDesigner.msgFlash('The task doesn\'t have assigned users'.translate(), document.body, 'info', 4000);
            return [false, false];
        }
        if (response[1] == 0) {
            PMDesigner.msgFlash('The task doesn\'t have assigned Dynaforms'.translate(), document.body, 'info', 4000);
            return [false, false];
        }
        return [true, response[2]];
    }
}());

(function () {
    var windowPropSub;

    PMDesigner.propertiesSubProcess = function (activity) {
        var typeVariables = ['@@', '@#', '@='];
        var isDirty = false;

        restClient = new PMRestClient({
            endpoint: 'projects',
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                for (var i = 0; i < response.length; i++) {
                    if (response[i].prj_uid != PMDesigner.project.projectId) {
                        formProperties.getField('out_doc_process').addOption({label: response[i].prj_name, value: response[i].prj_uid});
                    }
                }
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            },
            messageError: "There are problems getting the output documents, please try again.".translate()
        });
		var isDirtyFormSubProcess = function (){
			if (formProperties.isDirty() || isDirty) {
				var message_window = new PMUI.ui.MessageWindow({
					windowMessageType: 'warning',
					width: 490,
					bodyHeight: 'auto',
					id: "cancelSaveSubprocPropertiesWin",
					title: "Sub-process Properties".translate(),
					message: 'Are you sure you want to discard your changes?'.translate(),
					footerItems: [
						{
							text: "No".translate(),
							handler: function () {
								message_window.close();
							},
							buttonType : "error"
						},
						{
							text: "Yes".translate(),
							handler: function () {
								message_window.close();
								formProperties.reset();
								gridVariablesOut.setDataItems("");
								gridVariablesIn.setDataItems("");
								formProperties.setDirty(false);
								windowPropertiesSub.close();
							},
							buttonType : "success"
						}
					]
				});
				message_window.open();
				message_window.showFooter();
			} else {
				windowPropertiesSub.close();
			}
		}
        var getSubProcess = function () {
            var restProxy = new PMRestClient({
                endpoint: "subprocess/" + activity.act_uid,
                typeRequest: "get",
                functionSuccess: function (xhr, response)
                {
                    formProperties.getField('out_doc_title').setValue(response.spr_name);
                    formProperties.getField('out_doc_process').setValue(response.spr_pro);
                    formProperties.getField('out_doc_type').setValue(response.spr_synchronous);

                    if (response.spr_variables_out != false) {
                        var xout = JSON.stringify(response.spr_variables_out);
                        var yout = xout.substring(1, xout.length - 1);
                        var oout = yout.replace(/"/g, '');
                        var jout = oout.split(',');

                        var itemsOut = [];
                        for (i = 0; i < jout.length; i++) {
                            var dout = jout[i].split(':');
                            itemsOut.push({
                                origin: dout[0],
                                target: dout[1]
                            });
                        }
                        gridVariablesOut.setDataItems(itemsOut);

                        gridVariablesIn.setVisible(false);
                        formVariablesPanelIn.setVisible(false);
                    }

                    if (response.spr_variables_in != false && response.spr_variables_in != undefined) {
                        var xin = JSON.stringify(response.spr_variables_in);
                        var yin = xin.substring(1, xin.length - 1);
                        var oin = yin.replace(/"/g, '');
                        var jin = oin.split(',');

                        var itemsIn = [];
                        for (i = 0; i < jin.length; i++) {
                            var din = jin[i].split(':');
                            itemsIn.push({
                                origin: din[0],
                                target: din[1]
                            });
                        }
                        gridVariablesIn.setDataItems(itemsIn);
                    }

                    if (response.spr_synchronous == "1") {
                        gridVariablesIn.setVisible(true);
                        formVariablesPanelIn.setVisible(true);
                    }
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restProxy.executeRestClient();
        };

        var updateSubProcess = function (data) {
            var restProxy = new PMRestClient({
                endpoint: "subprocess/" + activity.act_uid,
                typeRequest: "update",
                data: data,
                functionSuccess: function (xhr, response)
                {
                    var name = formProperties.getData().out_doc_title;
                    activity.setName(name);
                    activity.setActName(name);
                    PMDesigner.project.dirty = true;

                    formProperties.reset();
                    gridVariablesOut.setDataItems("");
                    gridVariablesIn.setDataItems("");
                    formProperties.setDirty(false);
                    windowPropertiesSub.close();
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restProxy.executeRestClient();
        };

        var formVarTexOriginOut = new CriteriaField({
            id: 'idformVarTexOriginOut',
            pmType: "text",
            name: 'nmformVarTexOriginOut',
            placeholder: 'Origin'.translate(),
            labelVisible: false,
            controlsWidth: 150
        });

        var formVarTexOriginIn = new CriteriaField({
            id: 'idformVarTexOriginIn',
            pmType: "text",
            name: 'nmformVarTexOriginIn',
            placeholder: 'Select Origin Process'.translate(),
            labelVisible: false,
            controlsWidth: 150
        });

        var formVarTexTargetOut = new CriteriaField({
            id: 'idformVarTexTargetOut',
            pmType: "text",
            name: 'nmformVarTexTargetOut',
            placeholder: 'Select Target Process'.translate(),
            labelVisible: false,
            controlsWidth: 150,
            required : true
        });

        var formVarTexTargetIn = new CriteriaField({
            id: 'idformVarTexTargetIn',
            pmType: "text",
            name: 'nmformVarTexTargetIn',
            placeholder: 'Target'.translate(),
            labelVisible: false,
            controlsWidth: 150
        });

        var windowPropertiesSub = new PMUI.ui.Window({
            id: 'propSubWindow',
            title: "Sub-process Properties".translate(),
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            bodyHeight: '465px',
            bodyWidth: '900px',
			onBeforeClose : function (){
				isDirtyFormSubProcess();
			},
            buttons: [
                {
                    id: 'propSubButtonClose',
                    text: "Close".translate(),
                    buttonType: 'error',
                    handler: function () {
                        isDirtyFormSubProcess();
                    }
                },
                {
                    id: 'propSubButtonSave',
                    text: "Save".translate(),
                    buttonType: 'success',
                    handler: function () {
                        if (!formProperties.isValid()) {
                            return;
                        }
                        var propertiesData = formProperties.getData();
                        var variablesOutData = gridVariablesOut.getData();
                        var variablesOut = {};
                        if (variablesOutData.length > "0") {
                            for (i = 0; i < variablesOutData.length; i++) {
                                variablesOut[variablesOutData[i].origin] = variablesOutData[i].target;
                            }
                        }
                        var variablesIn = {};
                        if (propertiesData.out_doc_type == "1") {
                            var variablesInData = gridVariablesIn.getData();
                            if (variablesInData.length > "0") {
                                for (j = 0; j < variablesInData.length; j++) {
                                    variablesIn[variablesInData[j].origin] = variablesInData[j].target;
                                }
                            }
                        }

                        var dataToSend = {
                            spr_pro: propertiesData.out_doc_process,
                            spr_tas: propertiesData.spr_tas,
                            spr_name: propertiesData.out_doc_title,
                            spr_synchronous: propertiesData.out_doc_type,
                            spr_variables_out: variablesOut,
                            spr_variables_in: variablesIn
                        };

                        updateSubProcess(dataToSend);
                    }
                }
            ],
            buttonPanelPosition: 'bottom',
            buttonsPosition: 'right'
        });

        var formProperties = new PMUI.form.Form({
            id: 'propSubForm',
            title: "",
            fieldset: true,
            visibleHeader: false,
            width: 926,
            height: 'auto',
            items: [
                {
                    id: 'propSubFormTitle',
                    pmType: "text",
                    name: 'out_doc_title',
                    label: "Sub-Process name".translate(),
                    required: true,
                    controlsWidth: 300
                },
                {
                    id: 'propSubFormProcess',
                    pmType: "dropdown",
                    name: 'out_doc_process',
                    label: "Process".translate(),
                    controlsWidth: 300,
                    required: true,
                    options: [
                        {
                            label: "- Select a process -".translate(),
                            value: "",
                            disabled: true,
                            selected: true
                        }
                    ],
                    value: "",
                    onChange: function (a, b) {
                        if(a.trim().length !== 0){
                            formVarTexTargetOut.buttonHTML.enable();
                            formVarTexOriginIn.buttonHTML.enable();
                            formVarTexTargetOut.controls[0].setPlaceholder("Target");
                            formVarTexOriginIn.controls[0].setPlaceholder("Origin");
                        }else{
                            formVarTexTargetOut.buttonHTML.disable();
                            formVarTexOriginIn.buttonHTML.disable();
                        }
                        formVarTexTargetOut.setProcess(a);
                        formVarTexOriginIn.setProcess(a);
                        loadActivity(a);
                    }
                },
                {
                    id: 'propSubFormActivity',
                    pmType: "dropdown",
                    name: 'spr_tas',
                    label: "Starting task".translate(),
                    controlsWidth: 300,
                    required: true,
                    options: [
                        {
                            label: "- Select a starting task -".translate(),
                            value: "",
                            disabled: true,
                            selected: true
                        }
                    ],
                    value: "",
                    onChange: function (a, b) {
                    }
                },
                {
                    id: 'propSubFormType',
                    pmType: "dropdown",
                    name: 'out_doc_type',
                    label: "Type".translate(),
                    controlsWidth: 150,
                    required: true,
                    options: [
                        {
                            label: "Asynchronous".translate(),
                            value: "0"
                        },
                        {
                            label: "Synchronous".translate(),
                            value: "1"
                        }
                    ],
                    value: "0",
                    onChange: function (a, b) {
                        isDirty = true;
                    }
                }
            ],
            onChange: function (newValue, prevValue) {
                switch (newValue.value) {
                    case "1" :
                        gridVariablesIn.setVisible(true);
                        gridVariablesIn.style.addProperties({marginLeft: '45px'});
                        formVariablesPanelIn.setVisible(true);
                        formVariablesPanelIn.getItems()[2].setWidth(80);
                        $(formVariablesPanelIn.html).css({width: '850px', marginLeft: '45px'});
                        windowPropertiesSub.getItems()[4].setVisible(true);
                        break;
                    case "0":
                        gridVariablesIn.setVisible(false);
                        formVariablesPanelIn.setVisible(false);
                        windowPropertiesSub.getItems()[4].setVisible(false);
                        break;
                    default :
                        break;
                }
            }
        });

        var sepInputs = new PMSeparatorLineField({
            controlHeight: '1px',
            controlColor: "#CDCDCD",
            controlsWidth: "890px",
            marginLeft: '0%'
        });

        formProperties.addItem(sepInputs);

        var gridVariablesOut = new PMUI.grid.GridPanel({
            id: 'propSubGridVariablesOut',
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            pageSize: 10,
            //width: 850,
            style: {
                cssClasses: ["mafe-gridPanel"]
            },
            columns: [
                {
                    title: 'Origin'.translate(),
                    dataType: 'string',
                    width: '40%',
                    alignmentCell: 'left',
                    columnData: "origin"
                },
                {
                    title: 'Target'.translate(),
                    dataType: 'string',
                    width: '40%',
                    alignmentCell: 'left',
                    columnData: "target"
                },
                {
                    id: 'propSubGridVariablesOutButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: '20%',
                    buttonLabel: 'Delete'.translate(),
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        isDirty = true;
                    },
					buttonStyle : {
						cssClasses: [
							'mafe-button-delete'
						]
					}
					
                }
            ]
        });

        var gridVariablesIn = new PMUI.grid.GridPanel({
            id: 'propSubGridVariablesIn',
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            pageSize: 10,
            //width: 850,
            columns: [
                {
                    title: 'Origin'.translate(),
                    dataType: 'string',
                    width: '40%',
                    alignmentCell: 'left',
                    columnData: "origin"
                },
                {
                    title: 'Target'.translate(),
                    dataType: 'string',
                    width: '40%',
                    alignmentCell: 'left',
                    columnData: "target"
                },
                {
                    id: 'propSubGridVariablesInButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: '20%',
                    buttonLabel: 'Delete'.translate(),
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        isDirty = true;
                    },
					buttonStyle : {
						cssClasses: [
							'mafe-button-delete'
						]
					}
				}
            ]
        });

        var formVariablesPanelOut = new PMUI.core.Panel({
            id: "formVariablesPanelOut",
            layout: "hbox",
            fieldset: true,
            //label: "Variables Out".translate(),
            //legend: "Variables Out".translate(),
            width: DEFAULT_WINDOW_WIDTH - 70
                    //width: 880,
        });

        var formVariablesPanelIn = new PMUI.core.Panel({
            id: "formVariablesPanelIn",
            layout: "hbox",
            fieldset: true,
            legend: "Variables In".translate(),
            width: DEFAULT_WINDOW_WIDTH - 70
        });

        var validateVariable = function (field) {
            field.controls[0].style.removeClasses(['error'])
            var value = field.getValue();
            if (value == '') {
                PMDesigner.msgWinWarning('Please insert variable before adding to the list.'.translate());
                field.controls[0].style.addClasses(['error'])
                return false;
            }
            if (typeVariables.indexOf(String(value.substring(0, 2))) != -1) {
                return true;
            }
            PMDesigner.msgWinWarning("The value introduced doesn\'t have the correct format with a vallid prefix (@@, @#, @=)".translate());
            field.controls[0].style.addClasses(['error'])
            return false;
        };

        var formVarButtonAddOut = new PMUI.ui.Button({
            id: 'formVarButtonAddOut',
            text: 'Add'.translate(),
            width: 60,
            visible: false,
            buttonType: "success",
            buttonStyle: {
                cssClasses: [
                    'mafe-button-properties'
                ]
            },
            style : {
            	cssProperties : {
            		padding : "5px"
            	}
            },
            handler: function () {
                if (validateVariable(formVarTexOriginOut) && validateVariable(formVarTexTargetOut)) {
                    a = formVarTexOriginOut.getValue();
                    b = formVarTexTargetOut.getValue();
                    gridVariablesOut.addDataItem({origin: a, target: b});
                    formVarTexOriginOut.setValue("");
                    formVarTexTargetOut.setValue("");
                    isDirty = true;
                    
                    var gridOut = document.getElementById("propSubGridVariablesOut").getElementsByTagName("table")[0];
                    var i = gridOut.rows.length - 1;
                    //gridOut.getElementsByClassName("pmui pmui-button")[i].style.padding = "8px 12px";
                    gridOut.getElementsByClassName("pmui pmui-button")[i].style.marginTop = "2px";
                }
            }
        });

        var formVarButtonAddIn = new PMUI.ui.Button({
            id: 'formVarButtonAddIn',
            text: 'Add'.translate(),
            width: 60,
            buttonStyle: {
                cssClasses: [
                    'mafe-button-properties'
                ]
            },
            style : {
            	cssProperties : {
            		padding : "5px",
            	}
            },
            buttonType: 'success',
            handler: function () {
                if (validateVariable(formVarTexOriginIn) && validateVariable(formVarTexTargetIn)) {
                    a = formVarTexOriginIn.getValue();
                    b = formVarTexTargetIn.getValue();
                    gridVariablesIn.addDataItem({origin: a, target: b});
                    formVarTexOriginIn.setValue("");
                    formVarTexTargetIn.setValue("");
                    isDirty = true;
                    
                    var gridOut = document.getElementById("propSubGridVariablesIn").getElementsByTagName("table")[0];
                    var i = gridOut.rows.length - 1;
                    //gridOut.getElementsByClassName("pmui pmui-button")[i].style.padding = "8px 12px";
                    gridOut.getElementsByClassName("pmui pmui-button")[i].style.marginTop = "2px";
                }
            }
        });

        var labelVariablesOut = new PMUI.ui.TextLabel({
            textMode: 'plain',
            text: 'Variables Out'.translate()
        });

        var labelVariablesIn = new PMUI.ui.TextLabel({
            textMode: 'plain',
            text: 'Variables In'.translate()
        });

        var loadDropProcess = function () {
            formProperties.getField('out_doc_process').clearOptions();
            formProperties.getField('out_doc_process').addOption({label: "- Select a process -".translate(), value: "", disabled: true, selected: true});
        };
        var loadDataServer = function () {
            var restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'projects',
                            method: 'GET'
                        },
                        {
                            url: 'project/' + PMDesigner.project.id + '/subprocess/' + activity.act_uid,
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    var dt;
                    //projects
                    dt = response[0].response;
                    for (var i = 0; i < dt.length; i++) {
                        if (dt[i].prj_uid !== PMDesigner.project.projectId) {
                            formProperties.getField('out_doc_process').addOption({label: dt[i].prj_name, value: dt[i].prj_uid});
                        }
                    }
                    //subprocess
                    dt = response[1].response;
                    formProperties.getField('out_doc_title').setValue(dt.spr_name);
                    formProperties.getField('out_doc_process').setValue(dt.spr_pro === '0' ? '' : dt.spr_pro);
                    formProperties.getField('out_doc_type').setValue(dt.spr_synchronous);

                    if (dt.spr_variables_out !== false) { //Asynchronous
                        var xout = JSON.stringify(dt.spr_variables_out);
                        var itemsOut = [];
                        if (xout != "[]") {
                            var yout = xout.substring(1, xout.length - 1);
                            var oout = yout.replace(/"/g, '');
                            var jout = oout.split(',');
                            for (i = 0; i < jout.length; i++) {
                                var dout = jout[i].split(':');
                                itemsOut.push({
                                    origin: dout[0],
                                    target: dout[1]
                                });
                            }
                        }
                        gridVariablesOut.setDataItems(itemsOut);
                        gridVariablesIn.setVisible(false);
                        formVariablesPanelIn.setVisible(false);
                    }

                    if (dt.spr_variables_in !== false && dt.spr_variables_in !== undefined) { //Synchronous
                        var xin = JSON.stringify(dt.spr_variables_in);
                        var itemsIn = [];
                        if (xin != "[]") {
                            var yin = xin.substring(1, xin.length - 1);
                            var oin = yin.replace(/"/g, '');
                            var jin = oin.split(',');
                            for (i = 0; i < jin.length; i++) {
                                var din = jin[i].split(':');
                                itemsIn.push({
                                    origin: din[0],
                                    target: din[1]
                                });
                            }
                        }
                        gridVariablesIn.setDataItems(itemsIn);
                    }

                    if (dt.spr_synchronous === "1") {
                        gridVariablesIn.setVisible(true);
                        formVariablesPanelIn.setVisible(true);
                    }
                    if (formProperties.getField('out_doc_process').getValue() !== '') {
                        loadActivity(formProperties.getField('out_doc_process').getValue());
                    }
                    formProperties.getField('spr_tas').setValue(dt.spr_tas === '0' ? '' : dt.spr_tas);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.setBaseEndPoint('');
            restClient.executeRestClient();
        };
        var loadActivity = function (value) {
            var restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'project/' + value + '/starting-tasks',
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    var dt = response[0].response;
                    dt = dt.sort(function (a, b) {
                        return a.act_name.toString().toLowerCase() > b.act_name.toString().toLowerCase();
                    });
                    var dropdown = formProperties.getField('spr_tas');
                    dropdown.clearOptions();
                    dropdown.addOption({
                        value: '',
                        label: '- Select an activity initiated -'.translate()
                    });
                    for (var i = 0; i < dt.length; i++) {
                        dropdown.addOption({
                            value: dt[i].act_uid,
                            label: dt[i].act_name
                        });
                    }
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.setBaseEndPoint('');
            restClient.executeRestClient();
        };

        formVariablesPanelOut.addItem(formVarTexOriginOut);
        formVariablesPanelOut.addItem(formVarTexTargetOut);
        formVariablesPanelOut.addItem(formVarButtonAddOut);

        formVariablesPanelIn.addItem(formVarTexOriginIn);
        formVariablesPanelIn.addItem(formVarTexTargetIn);
        formVariablesPanelIn.addItem(formVarButtonAddIn);

        gridVariablesIn.setVisible(false);
        formVariablesPanelIn.setVisible(false);

        windowPropertiesSub.addItem(formProperties);
        windowPropertiesSub.addItem(new PMUI.ui.TextLabel({
            width: 890,
            text: 'Variables Out'.translate(),
            style: {
                cssProperties: {
                    background: '#aaaaaa',
                    margin: '-15px 10px 10px 15px',
                    color: 'white',
                    padding: '6px',
                    'font-weight': 'bold'
                }
            },
            display: 'block'
        }));
        windowPropertiesSub.addItem(formVariablesPanelOut);
        windowPropertiesSub.addItem(gridVariablesOut);

        windowPropertiesSub.addItem(new PMUI.ui.TextLabel({
            width: 890,
            text: 'Variables In'.translate(),
            style: {
                cssProperties: {
                    background: '#aaaaaa',
                    margin: '15px 10px 10px 15px',
                    color: 'white',
                    padding: '6px',
                    'font-weight': 'bold'
                }
            },
            display: 'block',
            visible: false
        }));

        windowPropertiesSub.addItem(formVariablesPanelIn);
        windowPropertiesSub.addItem(gridVariablesIn);

        loadDropProcess();
        gridVariablesOut.setDataItems("");
        gridVariablesIn.setDataItems("");
        loadDataServer();

        if (formProperties.getItems()[1].getValue() != "0") {
            formVarTexTargetOut.setProcess(formProperties.getItems()[1].getValue());
            formVarTexOriginIn.setProcess(formProperties.getItems()[1].getValue());
        }
        windowPropertiesSub.open();
        if(formProperties.getField('out_doc_process').getValue().trim().length === 0){
            formVarTexTargetOut.buttonHTML.disable();
            formVarTexOriginIn.buttonHTML.disable();
        }else{
            formVarTexTargetOut.buttonHTML.enable();
            formVarTexOriginIn.buttonHTML.enable();
        }
        windowPropertiesSub.showFooter();
        applyStyleWindowForm(windowPropertiesSub);
        formVariablesPanelIn.getItems()[0].dom.labelTextContainer.style.display = "none";
        formVariablesPanelIn.getItems()[1].dom.labelTextContainer.style.display = "none";
        formVariablesPanelOut.getItems()[0].dom.labelTextContainer.style.display = "none";
        formVariablesPanelOut.getItems()[1].dom.labelTextContainer.style.display = "none";
        formVariablesPanelOut.style.addProperties({marginLeft: '45px'});
        gridVariablesOut.style.addProperties({marginLeft: '45px'});
        if (formVariablesPanelIn.visible == true) {
            gridVariablesIn.setVisible(true);
            gridVariablesIn.style.addProperties({marginLeft: '45px'});
            formVariablesPanelIn.setVisible(true);
            formVariablesPanelIn.getItems()[2].setWidth(80);
            $(formVariablesPanelIn.html).css({width: '850px', marginLeft: '45px'});
            windowPropertiesSub.getItems()[4].setVisible(true);
        }

        formVariablesPanelOut.style.addProperties({width: '870px'});
        $(gridVariablesIn.html).find(".pmui-gridpanel-footer").css("position","static");
        $(gridVariablesIn.html).find(".pmui-gridpanel-footer").css("margin-top","0px");
        $(gridVariablesOut.html).find(".pmui-gridpanel-footer").css("position","static");
        $(gridVariablesOut.html).find(".pmui-gridpanel-footer").css("margin-top","0px");  
        windowPropertiesSub.defineEvents();
        gridVariablesOut.html.children[0].style.display = "none";
        gridVariablesIn.html.children[0].style.display = "none";
        formProperties.getField('out_doc_title').setFocus();
        formVarButtonAddOut.setWidth(80);
        formVarButtonAddOut.setVisible(true);

    };
}());
if (typeof(consolidated) == 'undefined') {
    consolidated = '0';
}
PMDesigner.activityProperties = function (activity) {
    switch(activity.getTaskType()) {
        case "SCRIPTTASK":
            PMDesigner.scriptTaskProperties(activity);
        break;
        default :
            PMDesigner.taskProperties(activity);
    }
};

PMDesigner.taskProperties = function (activity) {
    var formDefinitions;
    var featuresForms = [];
    var propertiesTabs;
    var formCaseLabels;
    var dataProperties;
    var formTimingControl;
    var formNotifications;
    var editRow = null;

    var configurationForms = [
                    {
                        id: 'windowPropertiesTabPanelDefinitions',
                        icon: '',
                        title: 'Definitions'.translate(),
                        panel: formDefinitions = new PMUI.form.Form({
                            id: 'formDefinitions',
                            visibleHeader: false,
                            width: DEFAULT_WINDOW_WIDTH - 250,
                            items: [{
                                    id: 'formDefinitionsUID',
                                    pmType: 'text',
                                    name: 'UID',
                                    valueType: 'string',
                                    label: 'UID'.translate(),
                                    controlsWidth: 300
                                }, {
                                    id: 'formDefinitionsTitle',
                                    pmType: 'text',
                                    name: 'tas_title',
                                    valueType: 'string',
                                    label: 'Title'.translate(),
                                    placeholder: 'Insert a title'.translate(),
                                    required: true,
                                    controlsWidth: 300
                                }, {
                                    id: 'formDefinitionsDescription',
                                    pmType: 'textarea',
                                    name: 'tas_description',
                                    valueType: 'string',
                                    label: 'Description'.translate(),
                                    placeholder: 'Insert a description'.translate(),
                                    rows: 100,
                                    controlsWidth: 300,
                                    style: {cssClasses: ['mafe-textarea-resize']}
                                }, new CriteriaField({
                                    id: 'formDefinitionsVariable',
                                    pmType: 'text',
                                    name: 'tas_priority_variable',
                                    valueType: 'string',
                                    label: 'Variable for Case priority'.translate(),
                                    controlsWidth: 300
                                }), {
                                    id: 'formDefinitionsRouting',
                                    pmType: 'dropdown',
                                    name: 'tas_derivation_screen_tpl',
                                    valueType: 'string',
                                    label: 'Routing Screen Template'.translate(),
                                    controlsWidth: 150,
                                    style : {
                                            cssProperties : {
                                                float : "left"
                                            }
                                    }
                                }
                            ]
                        })
                    },
                    {
                        id: 'windowPropertiesTabPanelCaseLabels',
                        icon: '',
                        title: 'Case Labels'.translate(),
                        panel: formCaseLabels = new PMUI.form.Form({
                            id: 'formCaseLabels',
                            visibleHeader: false,
                            width: DEFAULT_WINDOW_WIDTH - 250,
                            items: [new CriteriaField({
                                    id: 'formCaseLabelsTitle',
                                    pmType: 'text',
                                    name: 'tas_def_title',
                                    valueType: 'string',
                                    label: 'Title'.translate(),
                                    placeholder: 'Insert a title'.translate(),
                                    controlsWidth: DEFAULT_WINDOW_WIDTH - 527
                                }), new CriteriaField({
                                    id: 'formCaseLabelsDescription',
                                    pmType: 'textarea',
                                    name: 'tas_def_description',
                                    valueType: 'string',
                                    label: 'Description'.translate(),
                                    placeholder: 'Insert a description'.translate(),
                                    rows: 100,
                                    controlsWidth: DEFAULT_WINDOW_WIDTH - 527,
                                    renderType: 'textarea'
                                })
                            ]
                        })
                    },
                    {
                        id: 'windowPropertiesTabPanelTimingControl',
                        icon: '',
                        title: 'Timing Control'.translate(),
                        panel: formTimingControl = new PMUI.form.Form({
                            id: 'formTimingControl',
                            visibleHeader: false,
                            width: DEFAULT_WINDOW_WIDTH - 250,
                            items: [{
                                    id: 'formTimingControlFly',
                                    pmType: 'checkbox',
                                    name: 'tas_transfer_fly',
                                    labelVisible: false,
                                    options: [
                                        {
                                            id: 'formTimingControlOption',
                                            label: 'Allow users to change the task duration in runtime'.translate(),
                                            value: '1'
                                        }
                                    ],
                                    onChange: function (val) {
                                        changeTimingControl(this.controls[0].selected);
                                    }
                                }, {
                                    id:'formTimingMainPanel',
                                    pmType: 'panel',
                                    items: [
                                        {
                                            id: 'formTimingControlTask',
                                            pmType: 'text',
                                            name: 'tas_duration',
                                            valueType: 'string',
                                            label: 'Task duration'.translate(),
                                            required: true,
                                            maxLength: 3,
                                            controlsWidth: 200,
                                            validators:[
                                                {
                                                    pmType: "regexp",
                                                    criteria: /^\d*$/,
                                                    errorMessage: "Please enter a positive integer value".translate()
                                                }
                                            ]
                                        },
                                        {
                                            id: 'formTimingControlAverage',
                                            pmType: 'text',
                                            name: 'tas_average',
                                            valueType: 'string',
                                            label: 'Average'.translate(),
                                            maxLength: 3,
                                            readOnly: true,
                                            controlsWidth: 200
                                        },
                                        {
                                            id: 'formTimingControlSdv',
                                            pmType: 'text',
                                            name: 'tas_sdv',
                                            valueType: 'string',
                                            label: 'SDV'.translate(),
                                            maxLength: 3,
                                            readOnly: true,
                                            controlsWidth: 200
                                        },
                                        {
                                            id: 'formTimingControlTime',
                                            pmType: 'dropdown',
                                            name: 'tas_timeunit',
                                            label: 'Time unit'.translate(),
                                            controlsWidth: 100,
                                            options: [{
                                                id: 'formTimingControlTime1',
                                                label: 'Hours'.translate(),
                                                value: 'HOURS'
                                            }, {
                                                id: 'formTimingControlTime2',
                                                label: 'Days'.translate(),
                                                value: 'DAYS'
                                            }, {
                                                id: 'formTimingControlTime3',
                                                label: 'Minutes'.translate(),
                                                value: 'MINUTES'
                                            }
                                            ]
                                        }, {
                                            id: 'formTimingControlCount',
                                            pmType: 'dropdown',
                                            name: 'tas_type_day',
                                            label: 'Count days by'.translate(),
                                            controlsWidth: 150,
                                            options: [{
                                                id: 'formTimingControlCount1',
                                                label: 'Work Days'.translate(),
                                                value: 1
                                            }, {
                                                id: 'formTimingControlCount2',
                                                label: 'Calendar Days'.translate(),
                                                value: 2
                                            }
                                            ]
                                        }, {
                                            id: 'formTimingControlCalendar',
                                            pmType: 'dropdown',
                                            name: 'tas_calendar',
                                            label: 'Calendar'.translate(),
                                            options: [],
                                            controlsWidth: 150
                                        }
                                    ]
                                }
                            ]
                        })
                    },
                    {
                        id: 'windowPropertiesTabPanelNotifications',
                        icon: '',
                        title: 'Notifications'.translate(),
                        panel: formNotifications = new PMUI.form.Form({
                            id: 'formNotifications',
                            visibleHeader: false,
                            width: DEFAULT_WINDOW_WIDTH - 250,
                            items: [
                                {
                                    id: 'formNotificationsTasSend',
                                    pmType: 'checkbox',
                                    name: 'tas_send_last_email',
                                    labelVisible: false,
                                    options: [{
                                            id: 'formNotificationsTasSend1',
                                            label: 'After routing notify the next assigned user(s)'.translate(),
                                            value: '1'
                                        }
                                    ],
                                    onChange: function (val) {
                                        changeFormNotifications(this.controls[0].selected, 'text');
                                    }
                                }, {
                                    id: 'formNotificationsMainPanel',
                                    pmType: 'panel',
                                    items: [
                                        new CriteriaField({
                                            id: 'formNotificationsSubject',
                                            pmType: 'text',
                                            name: 'tas_def_subject_message',
                                            valueType: 'string',
                                            label: 'Subject'.translate(),
                                            placeholder: 'Insert a title'.translate(),
                                            required: true,
                                            controlsWidth: 300
                                        }), {
                                            id: 'formNotificationsContent',
                                            pmType: 'dropdown',
                                            name: 'tas_def_message_type',
                                            label: 'Content Type'.translate(),
                                            controlsWidth: 150,
                                            options: [{
                                                id: 'formNotificationsContent1',
                                                value: 'text',
                                                label: 'Plain Text'.translate()
                                            }, {
                                                id: 'formNotificationsContent2',
                                                value: 'template',
                                                label: 'Html Template'.translate()
                                            }
                                            ],
                                            onChange: function (value) {
                                                visibleContentType(value);
                                            }
                                        }, new CriteriaField({
                                            id: 'formNotificationsMessage',
                                            pmType: 'textarea',
                                            name: 'tas_def_message',
                                            valueType: 'string',
                                            label: 'Message'.translate(),
                                            placeholder: 'Insert a message'.translate(),
                                            rows: 100,
                                            width: 10,
                                            required: true,
                                            controlsWidth: 300,
                                            renderType: 'textarea'
                                        }), {
                                            id: 'formNotificationsTemplate',
                                            pmType: 'dropdown',
                                            name: 'tas_def_message_template',
                                            label: 'Template'.translate(),
                                            options: [{
                                                value: '',
                                                label: ''.translate()
                                            }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        })
                    }
                ];
    if (consolidated == '1') {
        configurationForms.push({
                                    id: 'windowPropertiesTabPanelConsolidated',
                                    icon: '',
                                    title: 'Consolidated Case '.translate(),
                                    panel: formConsolidated = new PMUI.form.Form({
                                        id: 'formConsolidated',
                                        visibleHeader: false,
                                        width: DEFAULT_WINDOW_WIDTH - 250,
                                        items: [
                                            {
                                                id: 'formConsolidatedEnable',
                                                pmType: 'checkbox',
                                                name: 'consolidated_enable',
                                                labelVisible: false,
                                                options: [{
                                                        label: 'Enable consolidate for this task.'.translate(),
                                                        value: '1'
                                                    }
                                                ],
                                                onChange: function (val) {
                                                    changeConsolidated(this.controls[0].selected);
                                                }
                                            }, {
                                                id: 'formConsolidatedMainPanel',
                                                pmType:'panel',
                                                items: [
                                                    {
                                                        id: 'formConsolidatedReportTable',
                                                        pmType: 'text',
                                                        name: 'consolidated_report_table',
                                                        visible: false,
                                                        valueType: 'string',
                                                        controlsWidth: 300
                                                    }, {
                                                        id: 'formConsolidatedDynaform',
                                                        pmType: 'dropdown',
                                                        name: 'consolidated_dynaform',
                                                        label: 'Dynaform Template'.translate(),
                                                        options: [],
                                                        required: true,
                                                        controlsWidth: 300
                                                    }, {
                                                        id: 'formConsolidatedTable',
                                                        pmType: 'text',
                                                        name: 'consolidated_table',
                                                        valueType: 'string',
                                                        label: 'Table Name'.translate(),
                                                        placeholder: 'Insert a table name'.translate(),
                                                        required: true,
                                                        controlsWidth: 300,
                                                        style : {
                                                            cssProperties : {
                                                                float : "left"
                                                            }
                                                        },
                                                        validators:[{
                                                            pmType: "regexp",
                                                            criteria: /^[a-zA-Z0-9_]+$/,
                                                            errorMessage: "The table name can not contain spaces".translate()
                                                        }]
                                                    }, {
                                                        id: 'formConsolidatedTitle',
                                                        pmType: 'text',
                                                        name: 'consolidated_title',
                                                        valueType: 'string',
                                                        label: 'Title'.translate(),
                                                        placeholder: 'Insert a title'.translate(),
                                                        required: true,
                                                        controlsWidth: 300,
                                                        style : {
                                                            cssProperties : {
                                                                float : "left"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    })
                                });
    }

    /*----------------------------------********---------------------------------*/
    /**features-begins**/
    var customGrid = new PMUI.grid.GridPanel({
        id: 'customGrid',
        pageSize: 10,
        width: DEFAULT_WINDOW_WIDTH - 400,
        style: {
            cssClasses: ['mafe-gridPanel'],
            cssProperties: {
                'margin-left': '0px',
                'padding-top': '5px'
            }
        },
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        behavior: 'dragdropsort',
        filterable: false,
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return '';
        },
        columns: [{
                id: 'abe_custom_value',
                title: 'Value'.translate(),
                dataType: 'string',
                columnData: 'abe_custom_value',
                alignmentCell: 'left',
                width: 95,
                sortable: true
            }, {
                id: 'abe_custom_label',
                title: 'Label'.translate(),
                dataType: 'string',
                alignmentCell: 'left',
                columnData: 'abe_custom_label',
                width: 135,
                sortable: true
            }, {
                id: 'abe_custom_format',
                title: 'Format (CSS)'.translate(),
                dataType: 'string',
                alignmentCell: 'left',
                columnData: 'abe_custom_format',
                width: 320,
                sortable: true
            }, {
                id: 'varEdit',
                dataType: 'button',
                title: '',
                buttonLabel: 'Edit'.translate(),
                width: '50px',
                buttonStyle: {
                    cssClasses: [
                        'mafe-button-edit'
                    ]
                },
                onButtonClick: function (row, grid) {
                    customGridRowEdit(row);
                }
            }, {
                id: 'varDelete',
                dataType: 'button',
                title: '',
                buttonLabel: function (row, data) {
                    return 'Delete'.translate();
                },
                width: '60px',
                buttonStyle: {
                    cssClasses: [
                        'mafe-button-delete'
                    ]
                },
                onButtonClick: function (row, grid) {
                    customGrid.removeItem(row);
                }
            }
        ],
        dataItems: null
    });
    var buttonFieldAdd = new PMUI.field.ButtonField({
        id: 'buttonFieldAdd',
        pmType: 'buttonField',
        value: 'Add'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        handler: function (field) {
            addAcceptedValue();
        },
        buttonType : "success",
        controlsWidth: "auto",
        style: {
            cssProperties: {
                'width': 'auto'
            }
        }
        
    });
    var buttonFieldCancel = new PMUI.field.ButtonField({
        id: 'buttonFieldCancel',
        pmType: 'buttonField',
        value: 'Cancel'.translate(),
        labelVisible: false,
        visible: false,
        buttonAlign: 'center',
        handler: function (field) {
            abeForm.getField("abe_custom_value_add").setValue("");
            abeForm.getField("abe_custom_label_add").setValue("");
            abeForm.getField("abe_custom_format_add").setValue(""); 
            abeForm.getField("buttonFieldCancel").setVisible(false);
            abeForm.getField("buttonFieldAdd").setValue("Add".translate());
            editRow = null;
        },
        buttonType : "error",
        controlsWidth: "auto",
        style: {
            cssProperties: {
                'width': 'auto'
            }
        },
        buttonStyle: {
            cssClasses: [
                'mafe-button-delete'
            ]
        }
    });
    buttonFieldCancel.controls[0].button.setButtonType("error");
    buttonFieldCancel.controls[0].button.setStyle({cssClasses: ["mafe-button-create-variable","pmui-error"],cssProperties: {padding: "8px 12px", border: "0px"}});
    buttonFieldAdd.controls[0].button.setButtonType("success");
    buttonFieldAdd.controls[0].button.setStyle({cssClasses: ["mafe-button-create-variable","pmui-success"],cssProperties: {padding: "8px 12px", border: "0px"}});
    
    var abeForm;
    var abeTemplates;
    var abeDynaforms;
    var abeFields = {
        'type': {
            name: "ABE_TYPE",
            id: "ABE_TYPE",
            label: "Type",
            pmType: "dropdown",
            options: [
                {
                    "label": "- None -".translate(),
                    "value": "",
                    "type": "default"
                },
                {
                    "label": "Link to fill a form".translate(),
                    "value": "LINK"
                },
                {
                    "label": "Use a field to generate actions links".translate(),
                    "value": "FIELD"
                },
                {
                    "label": "Custom actions".translate(),
                    "value": "CUSTOM"
                }
            ],
            onChange: function (val) {
                abeFields.type.value = val;
                $(abeFields.email.getHTML()).find('.pmui-field-message span').css('display', 'none');
                $(abeFields.action.getHTML()).find('.pmui-field-message span').css('display', 'none');
                $customGrid = $("#customGrid");
                switch (val) {
                    case '' :
                        abeForm.setItems([abeFields.type]);
                        break;
                    case 'LINK' :
                        $customGrid.hide().appendTo($("#windowProperties").find(".pmui-window-body:eq(0)"));
                        abeForm.setItems([abeFields.type, abeFields.template, abeFields.dynaform, abeFields.subject, abeFields.email, abeFields.emailFrom, abeFields.note]);
                        abeForm.getField('ABE_CASE_NOTE_IN_RESPONSE').setValue(abeFields.note.value);
                        break;
                    case 'FIELD' :
                        $customGrid.hide().appendTo($("#windowProperties").find(".pmui-window-body:eq(0)"));
                        abeForm.setItems([abeFields.type, abeFields.template, abeFields.dynaform, abeFields.subject, abeFields.email, abeFields.action, abeFields.emailFrom, abeFields.note]);
                        abeForm.getField('ABE_CASE_NOTE_IN_RESPONSE').setValue(abeFields.note.value);
                        abeFields.action.setLabel('Variable sent in email'.translate());
                        abeFields.action.setPlaceholder('Insert a variable with options'.translate());
                        break;
                    case 'CUSTOM' :
                        abeForm.setItems([abeFields.type, abeFields.emailFrom, abeFields.email, abeFields.subject, abeFields.template, abeFields.action, abeFields.customGrid]);
                        abeFields.action.setLabel('Store Result In'.translate());
                        abeFields.action.setPlaceholder('Store result in variable @@myResult'.translate());
                        customDOM();
                        break;
                }
            }
        },
        'template': abeTemplates = {
            name: "ABE_TEMPLATE",
            label: 'Email template'.translate(),
            pmType: "dropdown",
            controlsWidth: 300,
            options: [
                {
                    "value": "",
                    "label": "- Select a Template -".translate(),
                    "type": "default"
                }
            ],
            onChange: function (val) {
            }
        },
        'dynaform': abeDynaforms = {
            name: "DYN_UID",
            label: 'Dynaform'.translate(),
            pmType: "dropdown",
            controlsWidth: 300,
            options: [
                {
                    "value": "",
                    "label": "- Select a Dynaform -".translate(),
                    "type": "default"
                }
            ],
            onChange: function (val) {
            }
        },
        'subject': new CriteriaField({
            id: 'ABE_SUBJECT_FIELD',
            pmType: 'text',
            name: 'ABE_SUBJECT_FIELD',
            valueType: 'string',
            label: 'Subject by email'.translate(),
            placeholder: 'Insert a subject variable'.translate(),
            required: false,
            controlsWidth: 250
        }),
        'email': new CriteriaField({
            id: 'ABE_EMAIL_FIELD',
            pmType: 'text',
            name: 'ABE_EMAIL_FIELD',
            valueType: 'string',
            label: 'Email variable'.translate(),
            placeholder: 'Insert an email variable'.translate(),
            helper: "It leaving this field in blank, the next user's email will be used.".translate(),
            controlsWidth: 250
        }),
        'action': new CriteriaField({
            id: 'ABE_ACTION_FIELD',
            pmType: 'text',
            name: 'ABE_ACTION_FIELD',
            valueType: 'string',
            label: 'Variable sent in email'.translate(),
            placeholder: 'Insert a variable with options'.translate(),
            required: true,          
            controlsWidth: 250
        }),
        'emailFrom' : {
            id: 'ABE_MAILSERVER_OR_MAILCURRENT',
            pmType: 'dropdown',
            name: 'ABE_MAILSERVER_OR_MAILCURRENT',
            label: 'Select From Email'.translate(),
            controlsWidth: 300,
            options: [
                {
                    id: 'emailServerConfiguration',
                    label: 'From Email Server Configuration'.translate(),
                    value: 0
                }, {
                    id: 'femailCurrentUser',
                    label: 'From Current User'.translate(),
                    value: 1
                }
            ]
        },
        'note': {
            name: "ABE_CASE_NOTE_IN_RESPONSE",
            pmType: "checkbox",
            labelVisible: false,
            options: [
                {
                    "id": "formTimingControlOption",
                    "label": "Register a Case Note when the recipient submits the Response".translate(),
                    "value": "1"
                }
            ]
        },
        'customGrid': {
            id: "customGridPanel",
            pmType: "panel",
            layout: 'vbox',
            fieldset: false,
            width: 735,
            legend: "Options".translate(),
            items: [
                {
                    pmType: 'panel',
                    legend: "Options".translate(),
                    fieldset: true,
                    layout: 'hbox',
                    items: [
                        {
                            pmType: "text",
                            name: "abe_custom_value_add",
                            id: "abe_custom_value_add",
                            label: "Value".translate(),
                            labelWidth: "100%",
                            controlsWidth: "100px",
                            proportion: 1.2,
                            valueType: "string",
                            maxLength: 255,
                            required: true,
    						labelPosition : "top"
                        },
                        {
                            pmType: "text",
                            name: "abe_custom_label_add",
                            id: "abe_custom_label_add",
                            label: "Label".translate(),
                            labelWidth: "100%",
                            controlsWidth: "135px",
                            proportion: 1.6,
                            valueType: "string",
                            maxLength: 255,
                            required: true,
    						labelPosition : "top"
                        },
                        {
                            pmType: "textarea",
                            name: "abe_custom_format_add",
                            id: "abe_custom_format_add",
                            label: "Format (CSS)".translate(),
                            labelWidth: "100%",
                            controlsWidth: "314px",
                            proportion: 3.5,
                            valueType: "string",
                            required: false,
                            labelPosition : "top",
                            placeholder : "padding:12px;\ntext-decoration:none;\nborder-radius:2px;\nbackground:#1fbc99;\nborder:1px solid #1ba385;",
                            style: {
                                cssClasses: [
                                    'mafe-textarea-resize'
                                ]
                            },
                            validators: [
                                {
                                    pmType: "regexp",
                                    criteria: /^[a-zA-Z0-9\s\[\]\.\-_#%;,=:()']*$/,
                                    errorMessage: "Please enter only CSS code".translate()
                                }
                            ]
                        },
                        buttonFieldAdd,
                        buttonFieldCancel
                    ]
                }
            ]
        }
    };

    for (var i in ENABLED_FEATURES) {
        
        if (ENABLED_FEATURES[i] == 'zLhSk5TeEQrNFI2RXFEVktyUGpnczV1WEJNWVp6cjYxbTU3R29mVXVZNWhZQT0=') {
            featuresForms.push({
                id: "ActionsByEmailConfiguration",
                title: "Actions by Email".translate(),
                icon: "",
                panel: abeForm = new PMUI.form.Form({
                    id: "ActionsByEmail",
                    name: "ActionsByEmail",
                    visibleHeader: false,
                    width: DEFAULT_WINDOW_WIDTH - 250,
                    items: [abeFields.type]
                })
            });
        }
    }
    
    
    /**features-ends**/
    /*----------------------------------********---------------------------------*/

    var warningChanges = new PMUI.ui.MessageWindow({
        id: 'warningChanges',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title: 'Activity Properties'.translate(),
        message: 'Are you sure you want to discard your changes?'.translate(),
        footerItems: [
			{
                id: 'warningChangesButtonNo',
                text: "No".translate(),
                handler: function () {
                    warningChanges.close();
                },
				buttonType : "error"
            },
			{
                id: 'warningChangesButtonYes',
                text: "Yes".translate(),
                handler: function () {
                    windowProperties.close();
                    warningChanges.close();
                },
				buttonType : "success"
            }
        ]
    });
    var windowProperties = new PMUI.ui.Window({
        id: 'windowProperties',
        title: 'Activity Properties'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        onOpen: function () {
            loadServerData();
        },
        items: [
            propertiesTabs = new PMUI.panel.TabPanel({
                id: 'windowPropertiesTabPanel',
                height: 435,
                width: DEFAULT_WINDOW_WIDTH - 50,
                style: {
                    cssProperties: {
                        'margin-left': '10px'
                    }
                },
                items: configurationForms.concat(featuresForms),
                itemsPosition: {
                    position: 'left'
                },
                onTabClick: function (tab) {
                    setFocusTab(tab);
                }
            }),
            customGrid
        ],
		onBeforeClose : function(){
			if (isDirty()) {
				warningChanges.open();
				warningChanges.showFooter();
			} else {
				windowProperties.close();
			}
		},
        buttonPanelPosition: 'bottom',
        buttonsPosition: 'right',
        buttons: [
                  {
                      id: 'windowPropertiesButtonCancel',
                      text: 'Cancel'.translate(),
                      handler: function () {
                          if (isDirty()) {
                              warningChanges.open();
                              warningChanges.showFooter();
                          } else {
                              windowProperties.close();
                          }
                      },
                      buttonType: "error"
                  },
                  {
                      id: 'windowPropertiesButtonSave',
                      text: 'Save'.translate(),
                      handler: function () {
                          saveData();
                      },
                      buttonType: 'success'
                }
        ]
    });
    function changeConsolidated (value) {
        var panel = formConsolidated.getItem('formConsolidatedMainPanel');
        formConsolidated.getField('consolidated_enable').setValue(value ? '["1"]' : '[]');

        if (panel) {
            panel.setVisible(value);
            if (value) {
                panel.enable();
            } else {
                panel.disable();
            }
        }

        formConsolidated.getField('consolidated_report_table').setVisible(false);
    }
    function changeTimingControl (value) {
        var mainPanel = formTimingControl.getItem('formTimingMainPanel');
        formTimingControl.getField('tas_transfer_fly').setValue(value ? '["1"]' : '[]');
        if (mainPanel) {
            if (value) {
                mainPanel.disable();

            } else {
                mainPanel.enable();
            }
            mainPanel.setVisible(!value);
        }
        if (window.enterprise !== "1") {
            formTimingControl.getField('tas_average').setVisible(false);
            formTimingControl.getField('tas_sdv').setVisible(false);
        }
    }
    function changeFormNotifications(value, valueTwo) {
        var panel = formNotifications.getItem('formNotificationsMainPanel');

        if (panel) {
            panel.setVisible(value);
            if (value) {
                panel.enable();
            } else {
                panel.disable();
            }
        }

        if (value) {
            formNotifications.getField('tas_def_message_type').setValue(valueTwo);
            visibleContentType(valueTwo);
        }
        formNotifications.getField('tas_send_last_email').setValue(value ? '["1"]' : '[]');
        formNotifications.getField('tas_def_subject_message').setFocus();
    }
    function loadFormData(response) {
        dataProperties = response.properties;
        formDefinitions.getField('UID').disable();
        formDefinitions.getField('UID').setValue(activity.id);
        formDefinitions.getField('tas_title').setValue(dataProperties.tas_title);
        formDefinitions.getField('tas_title').setFocus();
        formDefinitions.getField('tas_description').setValue(dataProperties.tas_description);
        formDefinitions.getField('tas_priority_variable').setValue(dataProperties.tas_priority_variable);
        formDefinitions.getField('tas_derivation_screen_tpl').setValue(dataProperties.tas_derivation_screen_tpl);

        formCaseLabels.getField('tas_def_title').setValue(dataProperties.tas_def_title);
        formCaseLabels.getField('tas_def_description').setValue(dataProperties.tas_def_description);

        if(dataProperties.tas_transfer_fly === 'FALSE'){
          changeTimingControl(false);
        } else {
          changeTimingControl(true);
        }
        formTimingControl.getField('tas_duration').setValue(dataProperties.tas_duration);
        formTimingControl.getField('tas_timeunit').setValue(dataProperties.tas_timeunit);
        formTimingControl.getField('tas_type_day').setValue(dataProperties.tas_type_day);
        formTimingControl.getField('tas_calendar').setValue(dataProperties.tas_calendar);

        if (window.enterprise === "1") {
            formTimingControl.getField('tas_average').setValue(dataProperties.tas_average);
            formTimingControl.getField('tas_sdv').setValue(dataProperties.tas_sdv);
        }


        changeFormNotifications(dataProperties.tas_send_last_email === 'TRUE', dataProperties.tas_def_message_type);
        formNotifications.getField('tas_def_subject_message').setValue(dataProperties.tas_def_subject_message);
        formNotifications.getField('tas_def_message_type').setValue(dataProperties.tas_def_message_type);
        formNotifications.getField('tas_def_message').setValue(dataProperties.tas_def_message);
        formNotifications.getField('tas_def_message_template').setValue(dataProperties.tas_def_message_template);
    }

    /*----------------------------------********---------------------------------*/
    /****feature-begin*****/
    function loadFeaturesConfiguration(response) {
        var form;
        var type;
        if (typeof response === 'undefined') {            
            abeForm.setItems([abeFields.template, abeFields.subject, abeFields.email, abeFields.emailFrom, abeFields.action, abeFields.note]);
            return;
        }
        for (var i in response) {
            switch (response[i]['feature']) {
                case 'ActionsByEmail':
                    abeForm._form_data = response[i];
                    type = '';
                    if(typeof response[i]['ABE_TYPE'] !== 'undefined'){
                        type = response[i]['ABE_TYPE'];
                    }
                    abeFields.type.value = type;
                    for (var j in abeFields) {
                        abeFields[j].value = (response[i][abeFields[j].name] || '');
                    }
                    switch (type) {
                        case '' :
                            abeForm.setItems([abeFields.type]);
                            break;
                        case 'LINK' :
                            abeForm.setItems([abeFields.type, abeFields.template, abeFields.dynaform, abeFields.subject, abeFields.email, abeFields.emailFrom, abeFields.note]);
                            abeForm.getField('ABE_CASE_NOTE_IN_RESPONSE').setValue(abeFields.note.value);
                            break;
                        case 'FIELD' :
                            abeForm.setItems([abeFields.type, abeFields.template, abeFields.dynaform, abeFields.subject, abeFields.email, abeFields.action, abeFields.emailFrom, abeFields.note]);
                            abeForm.getField('ABE_CASE_NOTE_IN_RESPONSE').setValue(abeFields.note.value);
                            break;
                        case 'CUSTOM' :
                            abeForm.setItems([abeFields.type, abeFields.emailFrom, abeFields.email, abeFields.subject, abeFields.template, abeFields.action, abeFields.customGrid]);
                            var customGridData = response[i].ABE_CUSTOM_GRID;
                            customGrid.setDataItems(customGridData);
                            break;
                    }
                    break;
            }
        }
    }

    var processDataProperties = function (properties) {
        var fields = properties.form.getFields();
        properties.data['_features'] = (properties.data['_features'] || {});
        
        if (typeof properties.form._form_data === 'undefined') {
            properties.form._form_data = {};
            properties.form._form_data['ABE_UID'] = '';
            properties.form._form_data['PRO_UID'] = PMDesigner.project.id;
            properties.form._form_data['TAS_UID'] = activity.id;
        }
        
        properties.data['_features'][properties.feature] = {
            'type': properties.type,
            'fields': {
                'ABE_UID': properties.form._form_data['ABE_UID'],
                'ABE_TYPE': 'FIELD',
                'PRO_UID': properties.form._form_data['PRO_UID'],
                'TAS_UID': properties.form._form_data['TAS_UID']
            }
        };
        for (var i in fields) {
            properties.data
                    ['_features']
                    [properties.feature]
                    ['fields']
                    [fields[i].name] = fields[i].getValue();
        }
        return properties.data;
    };

    function loadStepsConsolidated (response) {
        var field = formConsolidated.getField('consolidated_dynaform');
        field.clearOptions();
        field.addOption({
            value: '',
            label: '- None -'.translate()
        });
        for (var i = 0; i < response.length; i++) {
            if (response[i].step_type_obj == "DYNAFORM") {
                field.addOption({
                    value: response[i].step_uid_obj,
                    label: response[i].obj_title
                });    
            }
        }
    }

    function loadFormConsolidate (response) {
        if (response.rep_tab_uid != '') {
            formConsolidated.getField('consolidated_report_table').setValue(response.rep_tab_uid);
            formConsolidated.getField('consolidated_dynaform').setValue(response.dyn_uid);
            changeConsolidated(true);
        } else {
            changeConsolidated(false);
        }
        formConsolidated.getField('consolidated_table').setValue(response.rep_tab_name);
        formConsolidated.getField('consolidated_title').setValue(response.con_value);
    }

    /****feature-end*****/
    /*----------------------------------********---------------------------------*/
    function loadCalendar(response) {
        var field = formTimingControl.getField('tas_calendar');
        field.clearOptions();
        field.addOption({
            value: '',
            label: '- None -'.translate()
        });
        for (var i = 0; i < response.length; i++) {
            field.addOption({
                value: response[i].cal_uid,
                label: response[i].cal_name
            });
        }
    }
    function loadTemplate(response) {
        var field = formNotifications.getField('tas_def_message_template');
        field.clearOptions();
        field.addOption({
            value: 'alert_message.html',
            label: '-- Default --'.translate()
        });
        for (var i = 0; i < response.length; i++) {
            field.addOption({
                value: response[i].prf_filename,
                label: response[i].prf_filename
            });
        }
        var field2 = formDefinitions.getField('tas_derivation_screen_tpl');
        field2.clearOptions();
        field2.addOption({
            value: '',
            label: '-- Default --'.translate()
        });
        for (var i = 0; i < response.length; i++) {
            if (response[i].prf_filename !== 'alert_message.html') {
                field2.addOption({
                    value: response[i].prf_filename,
                    label: response[i].prf_filename
                });
            }
        }
    }
    function loadABETemplateField(templates) {
        var templateField = abeForm.getField('ABE_TEMPLATE');
        for (var i in templates) {
            if (templateField !== null) {
                templateField.addOption({
                    value: templates[i].FIELD,
                    label: templates[i].NAME
                });
            }
            abeTemplates.options.push({
                value: templates[i].FIELD,
                label: templates[i].NAME
            });
        }
    }
    function loadABEDynaformField(dynaforms) {
        var dynaformField = abeForm.getField('DYN_UID');
        for (var i in dynaforms) {
            if (dynaformField !== null) {
                dynaformField.addOption({
                    value: dynaforms[i].DYN_UID,
                    label: dynaforms[i].DYN_NAME
                });
            }
            abeDynaforms.options.push({
                value: dynaforms[i].DYN_UID,
                label: dynaforms[i].DYN_NAME
            });
        }
    }


    function loadServerData() {
        var restClient = new PMRestClient({
            typeRequest: 'post',
            multipart: true,
            data: {
                calls: [
                    {
                        url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id,
                        method: 'GET'
                    }
                    , {
                        url: 'calendar',
                        method: 'GET'
                    }
                    , {
                        url: 'project/' + PMDesigner.project.id + '/file-manager?path=templates',
                        method: 'GET'
                    }
                ]
            },
            functionSuccess: function (xhr, response) {
                loadTemplate(response[2].response);
                loadCalendar(response[1].response);
                loadFormData(response[0].response);

                nextResponse = 3;
                if (consolidated == '1') {
                    loadStepsConsolidated(response[nextResponse].response);
                    nextResponse++;
                    loadFormConsolidate(response[nextResponse].response);
                    nextResponse++;
                }
                /*----------------------------------********---------------------------------*/
                /****features-begin****/
                for (var i in ENABLED_FEATURES) {
                    if (ENABLED_FEATURES[i] == 'zLhSk5TeEQrNFI2RXFEVktyUGpnczV1WEJNWVp6cjYxbTU3R29mVXVZNWhZQT0=') {
                        loadABEDynaformField(response[7].response);
                        loadABETemplateField(response[6].response);
                        loadFeaturesConfiguration(response[5].response);
                    }
                }
                /****features-end****/
                /*----------------------------------********---------------------------------*/
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        });
        if (consolidated == '1') {
            restClient.data.calls.push({
                    url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/steps',
                    method: 'GET'
                }, {
                    url: 'consolidated/' + activity.id,
                    method: 'GET'
                }
            );
        }
        /*----------------------------------********---------------------------------*/
        /****features-begin****/
        for (var i in ENABLED_FEATURES) {
            if (ENABLED_FEATURES[i] == 'zLhSk5TeEQrNFI2RXFEVktyUGpnczV1WEJNWVp6cjYxbTU3R29mVXVZNWhZQT0=') {
                restClient.data.calls.push({
                        url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/feature-configuration/',
                        method: 'GET'
                    }, {
                        url: 'ActionsByEmail/Templates/' + PMDesigner.project.id,
                        method: 'GET'
                    }, {
                        url: 'ActionsByEmail/Dynaforms/' + PMDesigner.project.id,
                        method: 'GET'
                    }
                );
            }
        }
        /****features-end****/
        /*----------------------------------********---------------------------------*/
        restClient.setBaseEndPoint('');
        restClient.executeRestClient();
    }
    function visibleContentType(value) {
        formNotifications.getField('tas_def_message_template').disable();
        formNotifications.getField('tas_def_message').disable();
        if (value === 'text') {
            formNotifications.getField('tas_def_message').enable();
            formNotifications.getField('tas_def_message').setVisible(true);
            formNotifications.getField('tas_def_message_template').setVisible(false);
        }
        if (value === 'template') {
            formNotifications.getField('tas_def_message_template').enable();
            formNotifications.getField('tas_def_message').setVisible(false);
            formNotifications.getField('tas_def_message_template').setVisible(true);
        }
    };
    function saveData() {
        var tabPanel = windowProperties.getItem('windowPropertiesTabPanel'),
            tabItems = tabPanel.getItems(),
            valid = true,
            panel,
            i;

        for (i = 0; i < tabItems.length; i += 1) {
            panel = tabItems[i].getPanel();
            if (panel instanceof PMUI.form.Form) {
                valid = valid && panel.isValid();
            }
            if (!valid) {
                tabItems[i].select();
                return;
            }
        }

        if(abeFields.type.value === 'FIELD' && abeFields.action.value === ''){
            $(abeFields.action.getHTML()).find('.pmui-field-message span').css('display','block');
            return;
        }

        var tas_transfer_fly = formTimingControl.getField('tas_transfer_fly').getValue() === '["1"]';
        var tas_send_last_email = formNotifications.getField('tas_send_last_email').getValue() === '["1"]';

        if (tas_transfer_fly !== false) {
            var a = formTimingControl.getField('tas_transfer_fly').getValue();
            formTimingControl.reset();
            formTimingControl.getField('tas_transfer_fly').setValue(a);
            formTimingControl.getField('tas_duration').setValue('1');
            formTimingControl.getField('tas_timeunit').setValue('DAYS');
            formTimingControl.getField('tas_type_day').setValue('');
            formTimingControl.getField('tas_calendar').setValue('');
        }

        if (!tas_send_last_email) {
            formNotifications.reset();
        }

        if ((navigator.userAgent.indexOf("MSIE") != -1) || (navigator.userAgent.indexOf("Trident") != -1)) {
            var dataDefinitions = getData2PMUI(formDefinitions.html);
            var dataCaseLabels = getData2PMUI(formCaseLabels.html);
            var dataTimingControl = getData2PMUI(formTimingControl.html);
            var dataNotification = getData2PMUI(formNotifications.html);
            if (!dataCaseLabels) {
                var dataCaseLabels = {};
            }
            if (!dataTimingControl) {
                var dataTimingControl = {};
            }
            if (!dataNotification) {
                var dataNotification = {};
            }
        } else {
            var dataDefinitions = formDefinitions.getData();
            var dataCaseLabels = formCaseLabels.getData();
            var dataTimingControl = formTimingControl.getData();
            var dataNotification = formNotifications.getData();
        }

        if (dataDefinitions['tas_title']) {
            dataProperties.tas_title = dataDefinitions['tas_title'];
        }
        if (dataDefinitions['tas_description']) {
            dataProperties.tas_description = dataDefinitions['tas_description'];
        }
        if (dataDefinitions['tas_priority_variable'] || typeof dataDefinitions['tas_priority_variable'] == "string") {
            dataProperties.tas_priority_variable = dataDefinitions['tas_priority_variable'];
        }
        if (dataDefinitions['tas_derivation_screen_tpl'] || dataDefinitions['tas_derivation_screen_tpl']=="") {
            dataProperties.tas_derivation_screen_tpl = dataDefinitions['tas_derivation_screen_tpl'];
        }
        dataProperties.tas_def_title = dataCaseLabels['tas_def_title'];
        dataProperties.tas_def_description = dataCaseLabels['tas_def_description'];
        dataProperties.tas_transfer_fly = tas_transfer_fly ? 'TRUE' : 'FALSE';
        if (dataTimingControl['tas_duration']) {
            dataProperties.tas_duration = dataTimingControl['tas_duration'];
        }
        if (dataTimingControl['tas_timeunit']) {
            dataProperties.tas_timeunit = dataTimingControl['tas_timeunit'];
        }
        if (dataTimingControl['tas_type_day']) {
            dataProperties.tas_type_day = dataTimingControl['tas_type_day'];
        }
        if (dataTimingControl['tas_calendar']) {
            dataProperties.tas_calendar = dataTimingControl['tas_calendar'];
        }
        dataProperties.tas_send_last_email = tas_send_last_email ? 'TRUE' : 'FALSE';

        if (dataNotification['tas_def_subject_message']) {
            dataProperties.tas_def_subject_message = dataNotification['tas_def_subject_message'];
        }
        if (dataNotification['tas_def_message_type']) {
            dataProperties.tas_def_message_type = dataNotification['tas_def_message_type'];
        }
        if (dataNotification['tas_def_message']) {
            dataProperties.tas_def_message = dataNotification['tas_def_message'];
        }
        if (dataNotification['tas_def_message_template']) {
            dataProperties.tas_def_message_template = dataNotification['tas_def_message_template'];
        }
        /*----------------------------------********---------------------------------*/
        /** features-start */
        for (var i in ENABLED_FEATURES) {
            if (ENABLED_FEATURES[i] == 'zLhSk5TeEQrNFI2RXFEVktyUGpnczV1WEJNWVp6cjYxbTU3R29mVXVZNWhZQT0=') {
                dataProperties = processDataProperties({
                    'type': 'configuration',
                    'feature': abeForm.id,
                    'data': dataProperties,
                    'form': abeForm
                });
                if(abeForm.getField("ABE_TYPE").getValue() == "CUSTOM") {
                    if(customGrid.getData().length == 0) {
                        var message = new PMUI.ui.FlashMessage({
                            message: "At least one option must be filled.".translate(),
                            duration: 3000,
                            severity: 'error',
                            appendTo: windowProperties.footer
                        });
                        message.show();
                        return;
                    } else {
                        dataProperties._features.ActionsByEmail.fields.ABE_CUSTOM_GRID = customGrid.getData();
                    }
                }
            }
        }
        /** features-end */
        /*----------------------------------********---------------------------------*/

        if (consolidated == '1') {
            var consolidated_enable = false;
            if (formConsolidated.getField('consolidated_enable').getValue() == '["1"]') {
                consolidated_enable = true;
                if (!formConsolidated.isValid()) {
                    return;
                }
            }
            dataProperties.consolidate_data = {
                "consolidated_enable"       : consolidated_enable,
                "consolidated_dynaform"     : formConsolidated.getField('consolidated_dynaform').getValue(),
                "consolidated_table"        : formConsolidated.getField('consolidated_table').getValue(),
                "consolidated_title"        : formConsolidated.getField('consolidated_title').getValue(),
                "consolidated_report_table" : formConsolidated.getField('consolidated_report_table').getValue()
            };
        }

        (new PMRestClient({
            endpoint: 'activity/' + activity.id,
            typeRequest: 'update',
            messageError: ''.translate(),
            data: {
                definition: {},
                properties: dataProperties
            },
            functionSuccess: function (xhr, response) {
                setNameActivity(dataProperties.tas_title);
                windowProperties.close();
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            },
            messageSuccess: 'Task properties saved successfully'.translate(),
            flashContainer: document.body
        })).executeRestClient();
    }
    function setFocusTab(tab) {
        var style;
        $customGrid = $("#customGrid");
        $customGrid.hide().appendTo($("#windowProperties").find(".pmui-window-body:eq(0)"));
        
        if (tab.getTitle() === 'Definitions'.translate()) {
            formDefinitions.getField('tas_title').setFocus();
        }
        if (tab.getTitle() === 'Case Labels'.translate()) {
            formCaseLabels.getField('tas_def_title').setFocus();
            style = $('#formCaseLabelsDescription .pmui-field-label').attr("style");
            style = style + ' float: left;';
            $('#formCaseLabelsDescription .pmui-field-label').attr("style", style);
        }
        if (tab.getTitle() === 'Timing Control'.translate()) {
            formTimingControl.getField('tas_duration').setFocus();
        }
        if (tab.getTitle() === 'Notifications'.translate()) {
            formNotifications.getField('tas_def_subject_message').setFocus();
            style = $('#formNotificationsMessage .pmui-field-label').attr("style");
            style = style + ' float: left;';
            $('#formNotificationsMessage .pmui-field-label').attr("style", style);
        }
        if (tab.getTitle() === 'Actions by Email'.translate()) {
            abeForm.getField("ABE_TYPE").onChange(abeForm.getField("ABE_TYPE").getValue());
        }
    }
    function isDirty() {
        return formDefinitions.isDirty() ||
                formCaseLabels.isDirty() ||
                formTimingControl.isDirty() ||
                formNotifications.isDirty();
    }
    function setNameActivity(name) {
        activity.setName(name);
        activity.setActName(name);
        PMDesigner.project.dirty = true;
    }
    windowProperties.open();
    windowProperties.showFooter();

    applyStyleWindowForm(windowProperties);
    if (consolidated == '1') {
        formConsolidated.getField('consolidated_report_table').setVisible(false);
    }
    
    windowProperties.getItems()[1].setVisible(false);
    function customDOM() {
        $customGrid = $("#customGrid");
        $customGrid.show().appendTo($("#customGridPanel").find("fieldset:eq(0)"));
        document.getElementById("customGridPanel").style.width = "720px";
        document.getElementById("customGridPanel").style.padding = "";
        document.getElementById("buttonFieldAdd").style.width = "auto";
        document.getElementById("buttonFieldAdd").getElementsByTagName("a")[0].style.width = "100%";
        if(document.getElementById("buttonFieldCancel")) {
            document.getElementById("buttonFieldCancel").style.width = "auto";
            document.getElementById("buttonFieldCancel").getElementsByTagName("a")[0].style.width = "100%";
        }
        document.getElementById("customGridPanel").getElementsByTagName("fieldset")[0].style.width = "100%";
        $(".pmui-gridpanel-footer").css({"text-align": "center","margin-top": "10px","width": "120%"});
        $(".pmui-gridpanel-footer").removeClass("pmui-gridpanel-footer");
        $("#abe_custom_value_add,#abe_custom_label_add,#buttonFieldAdd,#buttonFieldCancel").css("top","-21px");
        $("#abe_custom_value_add,#abe_custom_label_add,#abe_custom_format_add").css("width","auto");
    }
    function addAcceptedValue() {
        var abeValue = abeForm.getField("abe_custom_value_add").getValue();
        var abeLabel = abeForm.getField("abe_custom_label_add").getValue();
        var abeFormat = abeForm.getField("abe_custom_format_add").getValue();
        
        if (!abeForm.isValid()) {
            return;
        }
        
        if(!evaluateTags(abeFormat,'validate')) {
            return;
        }

        if (editRow === null) {
            customGrid.addItem(new PMUI.grid.GridPanelRow({
                data: {
                    abe_custom_value: abeValue,
                    abe_custom_label: abeLabel,
                    abe_custom_format: abeFormat
                }
            }));
        } else {
            editRow.setData({
                abe_custom_value: abeValue,
                abe_custom_label: abeLabel,
                abe_custom_format: abeFormat
            });
            editRow = null;
            abeForm.getField("buttonFieldCancel").setVisible(false);
            abeForm.getField("buttonFieldAdd").setValue("Add".translate());
        }
        
        abeForm.getField("abe_custom_value_add").setValue("");
        abeForm.getField("abe_custom_label_add").setValue("");
        abeForm.getField("abe_custom_format_add").setValue("");        
        
    }
    function customGridRowEdit(row) {
        editRow = row;
        row = row.getData();
        abeForm.getField("abe_custom_value_add").setValue(row.abe_custom_value);
        abeForm.getField("abe_custom_label_add").setValue(row.abe_custom_label);
        abeForm.getField("abe_custom_format_add").setValue(row.abe_custom_format);  
        abeForm.getField("buttonFieldCancel").setVisible(true);
        abeForm.getField("buttonFieldAdd").setValue("Save".translate());
    }  
    function evaluateTags(html,action) {
        var oldHtml;
        var tagBody = '(?:[^"\'>]|"[^"]*"|\'[^\']*\')*';
        var pattern = /^[a-zA-Z0-9\s\[\]\.\-_#%;,=:()']*$/;
        var tagOrComment = new RegExp(
        '<(?:'
        // Comment body.
        + '!--(?:(?:-*[^->])*--+|-?)'
        // Special "raw text" elements whose content should be elided.
        + '|script\\b' + tagBody + '>[\\s\\S]*?</script\\s*'
        + '|style\\b' + tagBody + '>[\\s\\S]*?</style\\s*'
        // Regular name
        + '|/?[a-z]'
        + tagBody
        + ')>',
        'gi');
        
        var action = (typeof action === 'undefined') ? 'delete' : 'validate';
        if(action == "validate") { 
            return pattern.test(html);
        } else {
            do {
                oldHtml = html;
                html = html.replace(tagOrComment, '');
            } while (html !== oldHtml);
            return html.replace(/</g, '&lt;');
        }
    }
};

var openCreateTemplates = false;

PMDesigner.ProcessFilesManager = function (processFileManagerOptionPath, optionCreation)
{
    var rowselected = {};
    var rowselectedFile = {};
    var typeSave = '';
    var gridFilesManager;
    var gridTemplate;
    var gridPublic;
    var formEdit;
    var windowEdit;
    var formUpload;
    var formUploadField;
    var initTinyMCE = null;
    var flagGridTemplate = true;
    var flagGridPublic = true;
	var presviusValueTiny = "";

    var warningTemplate = new PMUI.ui.MessageWindow({
        id: 'warningTemplate',
        windowMessageType: 'warning',
        width: 490,
        title:  'Process Files Manager'.translate(),
        message: 'Do you want to delete this file?'.translate(),
        footerItems: [{
                id: 'warningTemplateButtonNo',
                text: 'No'.translate(),
                handler: function () {
                    warningTemplate.close();
                },
				buttonType : "error"
            },{
                id: 'warningTemplateButtonYes',
                text: 'Yes'.translate(),
                handler: function () {
                    (new PMRestClient({
                        endpoint: 'file-manager/' + rowselectedFile.getData().prf_uid,
                        typeRequest: 'remove',
                        messageError: ''.translate(),
                        functionSuccess: function (xhr, response) {
                            PMDesigner.msgFlash('File deleted successfully'.translate(), gridTemplate);
                            loadTemplate();
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        },
                        messageSuccess: 'File deleted successfully'.translate(),
                        flashContainer: gridTemplate
                    })).executeRestClient();
                    warningTemplate.close();
                },
				buttonType : "success"
            }
        ]
    });
	var isDirtyUpload = function (){
	    $("input,select,textarea").blur();
		if (formUpload.isDirty()){
			var message_window = new PMUI.ui.MessageWindow({
				id: "cancelMessageTriggers",
				windowMessageType: 'warning',
				width: 490,
				title: "Upload File".translate(),
				message: 'Are you sure you want to discard your changes?'.translate(),
				footerItems: [
					{
						text: "No".translate(),
						handler: function() {

							message_window.close();
						},
						buttonType : "error"
					},
					{
						text: "Yes".translate(),
						handler: function() {
							formUploadField.reset();
							message_window.close();
							windowUpload.close();
						},
						buttonType : "success"
					}
				]
			});
				message_window.open();
				message_window.showFooter();
		} else {
			windowUpload.close();
		}
	};

	var isDirtyFormEdit = function(){
	    var fileContent = $(tinyMCE.activeEditor.getContent()).text().trim().length ? tinyMCE.activeEditor.getContent() : formEdit.getField("filecontent").getValue();
		if (formEdit.isDirty() || fileContent !== presviusValueTiny) {
			$(".mceSplitButtonMenu").each(function(){
				if($(this).is(":visible")) {
					$(this).addClass("mrdk").hide();
				}
			});
			var message_window = new PMUI.ui.MessageWindow({
				id: "cancelMessageTriggers",
				width: 490,
				windowMessageType: 'warning',
				title:  'Process Files Manager'.translate(),
				message: 'Are you sure you want to discard your changes?'.translate(),
				footerItems: [
					{
						text: "No".translate(),
						handler: function () {
    						        $(".mceSplitButtonMenu.mrdk").each(function(){
    						            if($(this).is(":hidden")) {
    						                $(this).removeClass("mrdk").show();
    						            }
    						        });
							message_window.close();
       windowFilesManager.close();
						},
						buttonType : "error"
					},{
						text: "Yes".translate(),
						handler: function () {
							 message_window.close();

        if (clickedClose) {
            windowEdit.close();
        } else {
            windowEdit.close();
            windowFilesManager.open();
        }
						},
						buttonType : "success"
					}
				]
			});
			message_window.open();
			message_window.showFooter();
		} else {
    if (clickedClose) {
        windowEdit.close();
    } else {
        windowEdit.close();
        windowFilesManager.open();
    }
		}
	};
    var warningPublic = new PMUI.ui.MessageWindow({
        id: 'warningPublic',
        title:  'Process Files Manager'.translate(),
        windowMessageType: 'warning',
        width: 490,
        message: 'Do you want to delete this file?'.translate(),
        footerItems: [{
                id: 'warningPublicButtonNo',
                text: 'No'.translate(),
                handler: function () {
                    warningPublic.close();
                },
				buttonType : "error"
            },{
                id: 'warningPublicButtonYes',
                text: 'Yes'.translate(),
                handler: function () {
                    (new PMRestClient({
                        endpoint: 'file-manager/' + rowselectedFile.getData().prf_uid,
                        typeRequest: 'remove',
                        messageError: ''.translate(),
                        functionSuccess: function (xhr, response) {
                            loadPublic();
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        },
                        messageSuccess: 'File deleted successfully'.translate(),
                        flashContainer: gridPublic
                    })).executeRestClient();
                    warningPublic.close();
                },
				buttonType : "success"
            }
        ]
    });
    var windowFilesManager = new PMUI.ui.Window({
        id: 'windowFilesManager',
        title: 'Process Files Manager'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        items: [
            gridFilesManager = new PMUI.grid.GridPanel({
                id: 'gridFilesManager',
                pageSize: 10,
                width: "96%",
                style: {
                    cssClasses: ["mafe-gridPanel"]
                },
                emptyMessage: 'No records found'.translate(),
                nextLabel: 'Next'.translate(),
                previousLabel: 'Previous'.translate(),
                customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                    return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
                },
                dataItems: {},
                columns: [
                    {
                        title: 'Main Folders'.translate(),
                        dataType: 'string',
                        columnData: 'prf_path',
                        width: DEFAULT_WINDOW_WIDTH - 200,
                        alignmentCell: 'left',
                        sortable: true
                    },
                    {
                        id: 'filesGridViewCol',
                        title: '',
                        dataType: 'button',
                        buttonLabel: 'View'.translate(),
                        buttonStyle: {cssClasses: ['mafe-button-show']},
                        onButtonClick: function (row, grid) {
                            rowselected = row;
                            openFolder();
                        }
                    }
                ],
                onRowClick: function (row, grid) {
                    rowselected = row;
                    openFolder();
                }
            })
        ]
    });
    var buttonNew = new PMUI.ui.Button({
        id: 'createBtn',
        text: 'Create'.translate(),
        height: "38px",
        width: 100,
        style: {cssClasses: ['mafe-button-create']},
        handler: function (event) {
            newfile();
        }
    });
    var gridTemplate = new PMUI.grid.GridPanel({
        id: 'gridTemplate',
        filterPlaceholder: 'Search ...'.translate(),
        pageSize: 10,
        width: '96%',
        style: {
            cssClasses: ["mafe-gridPanel"]
        },
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
        },
        dataItems: {},
        columns: [{
                title: "TEMPLATES".translate(),
                dataType: 'string',
                columnData: 'prf_filename',
                width: '622px',
                alignmentCell: 'left',
                sortable: true
            }, {
                dataType: 'string',
                columnData: 'prf_uid',
                alignmentCell: 'left',
                visible: false
            }, {
                dataType: 'string',
                columnData: 'prf_content',
                alignmentCell: 'left',
                visible: false
            }, {
                id: 'gridTemplateButtonEdit',
                title: '',
                dataType: 'button',
                buttonLabel: 'Edit'.translate(),
                width: '82px',
                onButtonClick: function (row, grid) {
					presviusValueTiny = row.getData().prf_content?row.getData().prf_content:"";
                    rowselectedFile = row;
                    editfile();
                },
                buttonStyle: {cssClasses: ['mafe-button-edit']}
            }, {
                id: 'gridTemplateButtonDownload',
                title: '',
                dataType: 'button',
                buttonLabel: 'Download'.translate(),
                width: '109px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    download();
                },
                buttonStyle: {cssClasses: ['mafe-button-properties']}
            }, {
                id: 'gridTemplateButtonDelete',
                title: '',
                dataType: 'button',
                buttonLabel: 'Delete'.translate(),
                width: '82px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    warningTemplate.open();
                    warningTemplate.showFooter();
                },
                buttonStyle: {cssClasses: ['mafe-button-delete']}
            }
        ]
    });
    var buttonPublicCreate = new PMUI.ui.Button({
        id: 'buttonPublicCreate',
        text: 'Create'.translate(),
        height: "38px",
        width: 100,
        style: {cssClasses: ['mafe-button-create']},
        handler: function (event) {
            newfile();
        }

    });
    //var buttonBack = new PMUI.ui.Button({
    //    id: 'buttonBack',
    //    text: 'Back'.translate(),
    //    style: {cssClasses: ['mafe-button-upload'], cssProperties: {'margin-right': '5px', 'float': 'none'}},
    //    handler: function (event) {
    //        gridTemplate.setVisible(false);
    //        gridPublic.setVisible(false);
    //        gridFilesManager.setVisible(true);
    //        loadFileManager();
    //        windowFilesManager.setTitle('Process Files Manager'.translate());
    //    }
    //});
    var buttonUpload = new PMUI.ui.Button({
        id: 'uploadBtn',
        text: 'Upload'.translate(),
        style: {cssClasses: ['mafe-button-upload'], cssProperties: {'margin-right': '5px', 'float': 'none'}},
        handler: function (event) {
            windowUpload.open();
            formUpload.setFocus();
            applyStyleWindowForm(windowUpload);

        }
    });
    var gridPublic = new PMUI.grid.GridPanel({
        id: 'gridPublic',
        pageSize: 10,
        width: '96%',
        style: {
            cssClasses: ["mafe-gridPanel"]
        },
        emptyMessage: 'No records found'.translate(),
        filterPlaceholder: 'Search ...'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
        },
        dataItems: {},
        columns: [{
                title: "PUBLIC".translate(),
                dataType: 'string',
                columnData: 'prf_filename',
                width: '704px',
                alignmentCell: 'left',
                sortable: true
            }, {
                dataType: 'string',
                columnData: 'prf_uid',
                alignmentCell: 'left',
                visible: false
            }, {
                id: 'gridPublicButtonDownload',
                title: '',
                dataType: 'button',
                buttonLabel: 'Download'.translate(),
                width: '111px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    download();
                },
                buttonStyle: {cssClasses: ['mafe-button-properties']}
            }, {
                id: 'gridPublicButtonDelete',
                title: '',
                dataType: 'button',
                buttonLabel: 'Delete'.translate(),
                width: '82px',
                onButtonClick: function (row, grid) {
                    rowselectedFile = row;
                    warningPublic.open();
                    warningPublic.showFooter();
                },
                buttonStyle: {cssClasses: ['mafe-button-delete']}
            }
        ]
    });
    var windowUpload = new PMUI.ui.Window({
        id: 'windowUpload',
        title: 'Upload File'.translate(),
        height: 200,
        width: DEFAULT_WINDOW_WIDTH,
		onBeforeClose : function (){
			isDirtyUpload();
		},
        items: [
            formUpload = new PMUI.form.Form({
                id: 'formUpload',
                visibleHeader: false,
                items: [
                    formUploadField = new PMUI.field.UploadField({
                        id: 'formUploadField',
                        label: 'File'.translate(),
                        name: 'prf_file',
                        multiple: false,
                        labelWidth: '25%',
                        accept: 'text/html',
                        controlsWidth: 300
                    })
                ]
            })
        ],
        visibleFooter: true,
        buttonPanelPosition: 'bottom',
        buttonsPosition: 'right',
        buttons: [{
                id: 'windowUploadButtonCancel',
                text: 'Cancel'.translate(),
                handler: function () {
					isDirtyUpload();
                },
                buttonType : "error"
            },{
                id: 'windowUploadButtonUpload',
                text: 'Upload'.translate(),
                handler: function () {
                    uploadFile();
                },
                buttonType : "success"
            }
        ]
    });

    function createWindowTinyMCE () {
        windowEdit = new PMUI.ui.Window({
            id: 'windowEdit',
            title: ''.translate(),
            height: DEFAULT_WINDOW_HEIGHT - 80,
            width: DEFAULT_WINDOW_WIDTH,
			onBeforeClose : function () {
                PMDesigner.hideAllTinyEditorControls();
				clickedClose = true;
				isDirtyFormEdit();
			},
            items: [
                formEdit = new PMUI.form.Form({
                    id: 'formEdit',
                    visibleHeader: false,
                    width: 900,
                    items: [
                        new PMUI.field.TextField({
                            id: 'filename',
                            name: 'filename',
                            label: 'Filename'.translate(),
                            placeholder: 'Insert file name'.translate(),
                            required: true,
                            valueType: 'string',
                            labelWidth: "15%",
                            controlsWidth: 300
                        }),
                        new PMUI.field.TextAreaField({
                            id: 'filecontent',
                            name: 'filecontent',
                            label: 'Content'.translate(),
                            value: '',
                            rows: 210,
                            labelWidth: "15%",
                            controlsWidth: 720,
                            onChange: function (currentValue, previousValue) {
                            },
                            style: {cssClasses: ['mafe-textarea-resize']}
                        })
                    ]
                })
            ],
            buttonPanelPosition: 'bottom',
            buttonsPosition: 'right',
            buttons: [{
                    id: 'windowEditButtonCancel',
                    text: 'Cancel'.translate(),
                    buttonType: 'error',
                    handler: function () {
                        PMDesigner.hideAllTinyEditorControls();
						clickedClose = false;
						isDirtyFormEdit();
                    }
                },{
                    id: 'windowEditButtonSave',
                    text: "Save".translate(),
                    buttonType: 'success',
                    handler: function () {
                        PMDesigner.hideAllTinyEditorControls();
                        $(".mceSplitButtonMenu").hide();
                        save();
                    }
                }
            ]
        });
        formEdit.getField('filename').enable();
        formEdit.getField('filecontent').getControls()[0].getHTML().className = 'tmceEditor';
        windowEdit.open();
        windowEdit.showFooter();
        applyStyleWindowForm(windowEdit);
        tinyMCE.init({
            editor_selector: 'tmceEditor',
            mode: 'specific_textareas',
            directionality: 'ltr',
            verify_html: false,
            skin: 'o2k7',
            theme: 'advanced',
            skin_variant: 'silver',
            plugins: 'advhr,advimage,advlink,advlist,autolink,autoresize,contextmenu,directionality,emotions,example,example_dependency,fullpage,fullscreen,iespell,inlinepopups,insertdatetime,layer,legacyoutput,lists,media,nonbreaking,noneditable,pagebreak,paste,preview,print,save,searchreplace,style,tabfocus,table,template,visualblocks,visualchars,wordcount,xhtmlxtras,pmSimpleUploader,pmVariablePicker,style',
            theme_advanced_buttons1: 'pmSimpleUploader,|,pmVariablePicker,|,bold,italic,underline,|,justifyleft,justifycenter,justifyright,justifyfull,|,fontselect,fontsizeselect,|,cut,copy,paste',
            theme_advanced_buttons2: 'bullist,numlist,|,outdent,indent,blockquote,|,tablecontrols,|,undo,redo,|,link,unlink,image,|,forecolor,backcolor,styleprops',
            theme_advanced_buttons3: 'hr,removeformat,visualaid,|,sub,sup,|,ltr,rtl,|,code',
            popup_css: "/js/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/dialogTinyBpmn.css",
            oninit: initTinyMCE,
            onchange_callback: function (inst) {
                formEdit.getField('filecontent').setValue(tinyMCE.activeEditor.getContent({format: 'raw'}));
            },
            handle_event_callback: function (e) {
            },
            setup: function (ed) {
                ed.onSetContent.add(function (ed, l) {
                    formEdit.getField('filecontent').setValue(tinyMCE.activeEditor.getContent({format: 'raw'}));
                });
            },
            oninit: function () {
                tinyMCE.activeEditor.windowManager.onOpen.add(
                    function(){
                        tinyMCE.activeEditor.windowManager.params.mce_height = DEFAULT_WINDOW_HEIGHT-100;
                        tinyMCE.activeEditor.windowManager.features.height = DEFAULT_WINDOW_HEIGHT-100;
                });
            }
        });
        validateKeysField(formEdit.getField('filename').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'isletter', 'isunderscore', 'ishyphen', 'isparenthesisopening', 'isparenthesisclosing']);
        windowEdit.footer.getItems()[0].setHeight(38);
        windowEdit.footer.getItems()[1].setHeight(38);
        document.getElementById(windowEdit.footer.getItems()[0].id).style.lineHeight='18px';
        document.getElementById(windowEdit.footer.getItems()[1].id).style.lineHeight='18px';
        //$("#filecontent").css("left","10px").find("label:eq(0)").hide();
    }
    function newfile () {
        windowFilesManager.close();

        initTinyMCE = function () {
            tinyMCE.activeEditor.domainURL = "/sys" + WORKSPACE + "/" + LANG + "/" + SKIN + "/";
            tinyMCE.activeEditor.processID = PMDesigner.project.id;
        };
        createWindowTinyMCE();
        typeSave = 'new';
        var title = (processFileManagerOptionPath == 'templates')? "Create ".translate() + " " + processFileManagerOptionPath.substring(0, processFileManagerOptionPath.length - 1).translate() : "Create ".translate() + " " + processFileManagerOptionPath.translate() + " "+ "file".translate();
        windowEdit.setTitle(title.translate());
        var closeElement = windowEdit.header.childNodes[1];
        if (closeElement.addEventListener) {
            closeElement.addEventListener("click", function() {
                $(".mceSplitButtonMenu").hide();
            },false);
        } else {
            closeElement.attachEvent("click", function() {
                $(".mceSplitButtonMenu").hide();
            });
        }
        formEdit.setFocus();
    }
    function editfile () {
        windowFilesManager.close();

        initTinyMCE = function () {
            tinyMCE.activeEditor.domainURL = "/sys" + WORKSPACE + "/" + LANG + "/" + SKIN + "/";
            tinyMCE.activeEditor.processID = PMDesigner.project.id;
            //tinyMCE.activeEditor.dom.doc.activeElement.focus();
        };
        createWindowTinyMCE();
        typeSave = 'update';
        var title = "Edit ".translate()+ " " + processFileManagerOptionPath.substring(0, processFileManagerOptionPath.length - 1).translate();
        windowEdit.setTitle(title.translate());
        var closeElement = windowEdit.header.childNodes[1];
        if (closeElement.addEventListener) {
            closeElement.addEventListener("click", function() {
                $(".mceSplitButtonMenu").hide();
            },false);
        } else {
            closeElement.attachEvent("click", function() {
                $(".mceSplitButtonMenu").hide();
            });
        };
        formEdit.getField('filename').getControl().setStyle({cssProperties: {"background": "#EEEEEE"}});
        formEdit.getField('filename').disable();
        formEdit.getField('filename').setValue(rowselectedFile.getData().prf_filename);
        var a = rowselectedFile.getData().prf_content;
        formEdit.getField('filecontent').setValue(a);
        if (tinyMCE.activeEditor)
            tinyMCE.activeEditor.setContent(a);
    }
    function save () {
        var flagAux;

        if (!formEdit.isValid()) {
            flagAux = formEdit.visible;
        } else {
            flagAux = formEdit.isValid();
        }

        if (flagAux) {
            if (getData2PMUI(formEdit.html).filename == "") {
                return false;
            }
        }

        if ((navigator.userAgent.indexOf("MSIE") != -1) || (navigator.userAgent.indexOf("Trident") != -1)) {
            var data = getData2PMUI(formEdit.html);
        } else {
            var data = formEdit.getData();
        }

        if (typeSave === 'new') {
            (new PMRestClient({
                endpoint: 'file-manager',
                typeRequest: 'post',
                messageError: ''.translate(),
                data: {
                    prf_filename: data.filename + ".html",
                    prf_path: processFileManagerOptionPath,
                    prf_content: data.filecontent
                },
                functionSuccess: function (xhr, response) {
                    windowEdit.close();
                    if (processFileManagerOptionPath == "templates") {
                        PMDesigner.msgFlash('File saved successfully'.translate(), gridTemplate);
                        windowFilesManager.open();
                        loadTemplate();
                    }
                    if (processFileManagerOptionPath == "public") {
                        PMDesigner.msgFlash('File saved successfully'.translate(), gridPublic);
                         windowFilesManager.open();
                        loadPublic();
                    }
                    formEdit.getField('filename').setValue('');
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            })).executeRestClient();
        }
        if (typeSave === 'update') {
            (new PMRestClient({
                endpoint: 'file-manager/' + rowselectedFile.getData().prf_uid,
                typeRequest: 'update',
                messageError: ''.translate(),
                data: {
                    prf_content: tinyMCE.activeEditor.getContent()
                },
                functionSuccess: function (xhr, response) {
                    windowEdit.close();
                    if (processFileManagerOptionPath == "templates") {
                        PMDesigner.msgFlash('File updated successfully'.translate(), gridTemplate);
                        windowFilesManager.open();
                        loadTemplate();
                    }
                    if (processFileManagerOptionPath == "public") {
                        PMDesigner.msgFlash('File updated successfully'.translate(), gridPublic);
                        windowFilesManager.open();
                        loadPublic();
                    }
                    formEdit.getField('filename').setValue('');
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            })).executeRestClient();
        }
    }
    function loadFileManager () {
        (new PMRestClient({
            endpoint: 'file-manager',
            typeRequest: 'get',
            messageError: ''.translate(),
            functionSuccess: function (xhr, response) {
                gridFilesManager.clearItems();
                for (var i = 0; i < response.length; i++) {
                    gridFilesManager.addDataItem({prf_path: response[i].name});
                }
                if (openCreateTemplates) {
                    gridFilesManager.onRowClick(gridFilesManager.getItems()[0]);
                    newfile();
                }
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        })).executeRestClient();
    }
    function loadTemplate () {
        (new PMRestClient({
            endpoint: 'file-manager',
            typeRequest: 'get',
            messageError: ''.translate(),
            data: {
                path: processFileManagerOptionPath,
                get_content: true
            },
            functionSuccess: function (xhr, response) {
                gridTemplate.clearItems();
                for (var i = 0; i < response.length; i++) {
                    gridTemplate.addDataItem({
                        prf_filename: response[i].prf_filename,
                        prf_content: response[i].prf_content,
                        prf_uid: response[i].prf_uid
                    });
                }
                gridTemplate.sort('prf_filename', 'asc');
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        })).executeRestClient();
    }
    function loadPublic () {
        (new PMRestClient({
            endpoint: 'file-manager',
            typeRequest: 'get',
            messageError: ''.translate(),
            data: {
                path: processFileManagerOptionPath,
                get_content: false
            },
            functionSuccess: function (xhr, response) {
                gridPublic.clearItems();
                for (var i = 0; i < response.length; i++) {
                    gridPublic.addDataItem({
                        prf_filename: response[i].prf_filename,
                        prf_uid: response[i].prf_uid
                    });
                }
                gridPublic.sort('prf_filename', 'asc');
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        })).executeRestClient();
    }
    function download () {
        var xhr,
            win = window,
            value = 'blob',
            url = HTTP_SERVER_HOSTNAME + '/api/1.0/' + WORKSPACE + '/project/' + PMDesigner.project.id + '/file-manager/' + rowselectedFile.getData().prf_uid + '/download';

        if (win.XMLHttpRequest)
            xhr = new XMLHttpRequest();
        else if (win.ActiveXObject)
            xhr = new ActiveXObject('Microsoft.XMLHTTP');
        win.URL = win.URL || win.webkitURL;

        xhr.open('GET', url, true);
        xhr.responseType = value;
        xhr.setRequestHeader('Authorization', 'Bearer ' + PMDesigner.project.keys.access_token);
        xhr.onload = function () {
            if (this.status === 200) {
                if (processFileManagerOptionPath == "templates") {
                    PMDesigner.msgFlash('Start file download successfully'.translate(), gridTemplate);
                }
                if (processFileManagerOptionPath == "public") {
                    PMDesigner.msgFlash('Start file download successfully'.translate(), gridPublic);
                }
                var doc = win.document, a = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'), event = doc.createEvent('MouseEvents');
                event.initMouseEvent('click', true, false, win, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
                var blob = xhr.response;
                if ((navigator.userAgent.indexOf("MSIE") != -1) || (navigator.userAgent.indexOf("Trident") != -1) || (navigator.userAgent.indexOf("Edge") != -1)) {
                    window.navigator.msSaveBlob(blob, rowselectedFile.getData().prf_filename);
                }
                else{
                    a.href = win.URL.createObjectURL(blob);
                    a.download = rowselectedFile.getData().prf_filename;
                    a.dispatchEvent(event);
                }
            }
        };
        xhr.send()


    }
    function uploadFile () {
        var fileSelector = formUploadField.getHTML().getElementsByTagName('input')[0];
        if (fileSelector.files.length === 0) {
            PMDesigner.msgFlash('Please select a file to upload'.translate(), windowUpload.footer, "info");
            return;
        }
        (new PMRestClient({
            endpoint: 'file-manager',
            typeRequest: 'post',
            messageError: ''.translate(),
            data: {
                prf_filename: fileSelector.files[0].name,
                prf_path: processFileManagerOptionPath,
                prf_content: null
            },
            functionSuccess: function (xhr, response) {
                var win = window, fd = new FormData(), xhr, val = 'prf_file';
                fd.append(val, fileSelector.files[0]);
                if (win.XMLHttpRequest)
                    xhr = new XMLHttpRequest();
                else if (win.ActiveXObject)
                    xhr = new ActiveXObject('Microsoft.XMLHTTP');
                xhr.open('POST', '/api/1.0/' + WORKSPACE + '/project/' + PMDesigner.project.id + '/file-manager/' + response.prf_uid + '/upload', true);
                xhr.setRequestHeader('Authorization', 'Bearer ' + PMDesigner.project.keys.access_token);
                xhr.onload = function () {
                    if (this.status === 200) {
                        formUploadField.reset();
                        windowUpload.close();
                        if (processFileManagerOptionPath == "templates") {
                            PMDesigner.msgFlash('File uploaded successfully'.translate(), gridTemplate);
                            loadTemplate();
                        }
                        if (processFileManagerOptionPath == "public") {
                            PMDesigner.msgFlash('File uploaded successfully'.translate(), gridPublic);
                            loadPublic();
                        }
                    }
                };
                xhr.send(fd);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        })).executeRestClient();
    }
    function styleApp () {
        try {
            gridFilesManager.dom.toolbar.style.display = 'none';
            gridTemplate.dom.toolbar.getElementsByTagName('input')[0].style.visibility = 'hidden';
            gridPublic.dom.toolbar.getElementsByTagName('input')[0].style.visibility = 'hidden';

        } catch (e) {
        }
    }
    function disableAllFields () {
        windowFilesManager.getItems()[0].setVisible(false);

    }
    function openFolder () {
        disableAllFields();
        styleApp();

        if (processFileManagerOptionPath == "templates") {
            windowFilesManager.setTitle("Templates".translate());
            loadTemplate();
            if (flagGridTemplate) {
                windowFilesManager.addItem(gridTemplate);
                flagGridTemplate = false;
            }

            var buttonsTemplate = document.createElement("div");
            buttonsTemplate.id="buttonsTemplate";
            buttonsTemplate.style.display = "inlineBlock";
            buttonsTemplate.style.float = "right";

            buttonsTemplate.appendChild(buttonUpload.getHTML());
            buttonsTemplate.appendChild(buttonNew.getHTML());
            //buttonsTemplate.appendChild(buttonBack.getHTML());

            buttonUpload.defineEvents();
            buttonNew.defineEvents();
            //buttonBack.defineEvents();

            gridTemplate.dom.toolbar.appendChild(buttonsTemplate);
            gridTemplate.setVisible(true);
            gridTemplate.dom.toolbar.getElementsByTagName('input')[0].style.visibility = 'visible';
            buttonNew.getHTML().style.top = '-3px';
        }
        if (processFileManagerOptionPath == "public") {
            windowFilesManager.setTitle("Public Files".translate());
            loadPublic();
            if (flagGridPublic) {
                windowFilesManager.addItem(gridPublic);
                flagGridPublic = false;
            }
            var buttonsPublic = document.createElement("div");
            buttonsPublic.id="buttonsPublic";
            buttonsPublic.style.display = "inlineBlock";
            buttonsPublic.style.float = "right";

            buttonsPublic.appendChild(buttonUpload.getHTML());
            buttonsPublic.appendChild(buttonPublicCreate.getHTML());
            //buttonsPublic.appendChild(buttonBack.getHTML());

            buttonUpload.defineEvents();
            buttonPublicCreate.defineEvents();
            //buttonBack.defineEvents();

            gridPublic.dom.toolbar.appendChild(buttonsPublic);
            gridPublic.dom.toolbar.getElementsByTagName('input')[0].style.visibility = 'visible';
            gridPublic.setVisible(true);
            buttonPublicCreate.getHTML().style.top = '-3px';
        }
    }

    if (optionCreation == "CREATION_NORMAL") {
        windowFilesManager.open();
        openFolder();
    } else {
        windowFilesManager.open();
        openFolder();
        newfile();
    }
};

PMDesigner.ProcessFilesManager.createFirst = function (processFileManagerOptionPath, optionCreation)
{
    PMDesigner.ProcessFilesManager(processFileManagerOptionPath, optionCreation);
};

(function () {
    PMDesigner.assigmentRules = function (event) {
        var formAssignmentRules,
            tabPanelAssignmentRules,
            windowAssignmentRules,
            dataProperties,
            activity = event,
            pageSizeAssignment = 9,
            pageSizeAssignmentAD = 9,
            quickMessageWindow = new QuickMessageWindow(),
            arrayObjectUserList = [],
            arrayObjectUserList2 = [],
            arrayObjectUsers = [],
            arrayObjectUsers2 = [],
            arrayObjectAdhocUser = [],
            arrayObjectAdhocUser2 = [],
            arrayObjectAdhocUserList = [],
            arrayObjectAdhocUserList2 = [],
			flashMessage = new PMUI.ui.FlashMessage({
				message: '',
				appendTo: document.body,
				duration: 1000,
				severity : "success"
			});;

        var warningMessageWindowDirty = new PMUI.ui.MessageWindow({
                id: 'warningMessageWindowDirty',
                windowMessageType: 'warning',
                width: 490,
                bodyHeight: 'auto',
                title: 'Routing Rule'.translate(),
                message: 'Are you sure you want to discard your changes?'.translate(),
                footerItems: [{
                        id: 'warningMessageWindowDirtyButtonNo',
                        text: 'No'.translate(),
                        visible: true,
                        handler: function () {
                            warningMessageWindowDirty.close();
                        },
                        buttonType : "error"
                       },{
                        id: 'warningMessageWindowDirtyButtonYes',
                        text: 'Yes'.translate(),
                        visible: true,
                        handler: function () {
                            warningMessageWindowDirty.close();
                            windowAssignmentRules.close();
                        },
                        buttonType : "success"
                    }]
        });


        var formAssignmentRules = new PMUI.form.Form({
            id: 'formAssignmentRules',
            visibleHeader: false,
            buttonPanelPosition: 'top',
            width: 910,
            items: [
                new PMUI.field.RadioButtonGroupField({
                    id: 'formTasAssignType',
                    name: 'tas_assign_type',
                    label: 'Case assignment method'.translate(),
                    required: false,
                    controlPositioning: 'horizontal',
                    maxDirectionOptions: 3,
                    options: [{
                            id: 'formTasAssignTypeCyclical',
                            label: 'Cyclical Assignment'.translate(),
                            value: 'BALANCED',
                            selected: true
                        }, {
                            id: 'formTasAssignTypeManual',
                            label: 'Manual Assignment'.translate(),
                            value: 'MANUAL'
                        }, {
                            id: 'formTasAssignTypeValue',
                            label: 'Value Based Assignment'.translate(),
                            value: 'EVALUATE'
                        }, {
                            id: 'formTasAssignTypeReports',
                            label: 'Reports to'.translate(),
                            value: 'REPORT_TO'
                        }, {
                            id: 'formTasAssignTypeSelf',
                            label: 'Self Service'.translate(),
                            value: 'SELF_SERVICE'
                        }, {
                            id: 'formTasAssignTypeSelfValue',
                            label: 'Self Service Value Based Assignment'.translate(),
                            value: 'SELF_SERVICE_EVALUATE'
                        }, {
                            id: 'formTasAssignTypeParallel',
                            label: 'Parallel Assignment'.translate(),
                            value: 'MULTIPLE_INSTANCE'
                        }, {
                            id: 'formTasAssignTypeParallel',
                            label: 'Value Based Assignment'.translate(),
                            value: 'MULTIPLE_INSTANCE_VALUE_BASED'
                        }
                        ],
                    onChange: function (newVal, oldVal) {
                        changeRadioButtons(newVal);
                    },
                }), new CriteriaField({
                    id: 'formAssignmentRulesVariable',
                    pmType: 'text',
                    name: 'tas_assign_variable',
                    valueType: 'string',
                    label: 'Variable for Value Based Assignment'.translate(),
                    controlsWidth: DEFAULT_WINDOW_WIDTH - 527
                }), new CriteriaField({
                    id: 'formAssignmentRulesVariableSelf',
                    pmType: 'text',
                    name: 'tas_group_variable',
                    valueType: 'string',
                    label: 'Variable for Self Service Value Based Assignment'.translate(),
                    controlsWidth: DEFAULT_WINDOW_WIDTH - 527
                }), {
                    id: 'formAssignmentRulesSetTimeout',
                    pmType: 'checkbox',
                    name: 'tas_selfservice_timeout',
                    label: 'Set a timeout'.translate(),
                    options: [{
                            id: 'formAssignmentRulesSetTimeoutOption',
                            label: '',
                            value: '1'
                        }
                    ],
                    onChange: function (val) {
                        visibleService(this.controls[0].selected);
                    }
                }, {
                    id: 'formAssignmentRulesTime',
                    pmType: 'text',
                    name: 'tas_selfservice_time',
                    valueType: 'string',
                    label: 'Time'.translate(),
                    required: true,
                    validators: [{
                                    pmType: "regexp",
                                    criteria: /^[0-9]*$/,
                                    errorMessage: "Please enter a numeric value".translate()
                                }]
                }, {
                    id: 'formAssignmentRulesTimeUnit',
                    pmType: 'dropdown',
                    name: 'tas_selfservice_time_unit',
                    label: 'Time unit'.translate(),
                    options: [{
                            id: 'formAssignmentRulesTimeUnitOption1',
                            label: 'Hours'.translate(),
                            value: 'HOURS'
                        }, {
                            id: 'formAssignmentRulesTimeUnitOption2',
                            label: 'Days'.translate(),
                            value: 'DAYS'
                        }, {
                            id: 'formAssignmentRulesTimeUnitOption3',
                            label: 'Minutes'.translate(),
                            value: 'MINUTES'
                    }]
                }, {
                    id: 'formAssignmentRulesTrigger',
                    pmType: 'dropdown',
                    name: 'tas_selfservice_trigger_uid',
                    label: 'Trigger to execute'.translate(),
                    required: true,
                    options: [{
                            id: 'formAssignmentRulesTriggerOption1',
                            value: '',
                            label: ''.translate()
                        }]
                }, {
                    id: 'formAssignmentRulesTriggerExecute',
                    pmType: 'dropdown',
                    name: 'tas_selfservice_execution',
                    label: 'Execute Trigger'.translate(),
                    options: [{
                            id: 'formAssignmentRulesTriggerExecute1',
                            label: 'Every time scheduled by cron'.translate(),
                            value: 'EVERY_TIME'
                        }, {
                            id: 'formAssignmentRulesTriggerExecute2',
                            label: 'Once'.translate(),
                            value: 'ONCE'
                    }]
                }
            ]
        });


        var restClient = new PMRestClient({
            endpoint: 'projects',
            typeRequest: 'get',
            messageError: "There are problems, please try again.".translate(),
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        });


        var assigmentPanelGlobal = new PMUI.core.Panel({
            id: "assigmentPanelGlobal",
            layout: "hbox",
            width: DEFAULT_WINDOW_WIDTH
        });
        var assigmentPanelUser = new PMUI.core.Panel({
            id: "assigmentPanelUser",
            layout: "vbox",
            width: "60%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            }
        });
        var panelTitleUser = new PMUI.core.Panel({
            id: "panelTitleUser",
            layout: "hbox"
        });
        var titleUser = new PMUI.ui.TextLabel({
            id: "titleUser",
            label: " ",
            textMode: 'plain',
            text: 'Available users list'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelGridUser = new PMUI.core.Panel({
            id: "panelGridUser",
            layout: "hbox",
            style: {
                cssClasses: ["mafe-panel"]
            }
        });
        var buttonsUsers = new PMUI.field.RadioButtonGroupField({
            id: "buttonsUsers",
            controlPositioning: 'horizontal',
            maxDirectionOptions: 3,
            options: [{
                    id: 'buttonAllAv',
                    label: 'View all'.translate(),
                    value: 'all',
                    selected: true
                },{
                    id: 'buttonUsersAv',
                    label: 'View users'.translate(),
                    value: 'user'
                },{
                    id: 'buttonGroupsAv',
                    label: 'View groups'.translate(),
                    value: 'group'
            }],
            onChange: function (newVal, oldVal) {
				switch (newVal){
					case "user" :
						gridUsers.typeList = "user";
					break;
					case "group":
						gridUsers.typeList = "group";
					break;
					default:
						gridUsers.typeList = "";
					break;
				}
				gridUsers.goToPage(0);
            }
        });
        var gridUsers = new PMUI.grid.GridPanel({
            id: "gridUsers",
            pageSize: pageSizeAssignment - 1,
            edges: 2,
			behavior: 'dragdropsort',
            displayedPages: 2,
            filterable: true,
            filterPlaceholder: 'Search ...'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
			customDataRest : function(data){
				var i;
				for ( i=0;i<data.length;i+=1 ) {
					if (data[i].aas_type == "group") {
						data[i]["available"] = data[i].aas_name;
					} else {
						data[i]["available"] = data[i].aas_name + " "+  data[i].aas_lastname + " ("+data[i].aas_username+")";
					}
				}
				return data; 
			},
			dynamicLoad: {
				keys : {
					server : HTTP_SERVER_HOSTNAME,
					projectID : PMDesigner.project.projectId,
					workspace : WORKSPACE,
					accessToken : PMDesigner.project.tokens.access_token,
					endPoint : 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/available-assignee/paged'
				}
			},
            columns: [{	
                    id: 'gridUsersButtonLabel',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonLabel: function (row, data) {
                        return data.fullName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
						var option, select;
						select = document.createElement("span");
						select.id = "list-usersIngroup";
						option = document.createElement("span");
						option.id = "list-usersIngroup-iem"
						
                        if (row.getData()["aas_type"] === 'group') {
							var restClient = new PMRestClient({
								typeRequest: 'get',
								functionSuccess: function (xhr, response) {
									var optionClone;
									for (var i = 0; i < response.length; i++) {
										if ( i == 10 ) {
											optionClone = option.cloneNode(false);
											optionClone.innerHTML = "<b style='float: right'>. . .<b>";
											select.appendChild(optionClone);	
										} else {
											optionClone = option.cloneNode(false);
											optionClone.textContent = "- "+response[i].usr_firstname + ' ' + response[i].usr_lastname;
											optionClone.title = response[i].usr_firstname + ' ' + response[i].usr_lastname;
											select.appendChild(optionClone);
										}
									}
									if(!optionClone){
										optionClone = option.cloneNode(false);
										optionClone.textContent = "No users".translate();
										select.appendChild(optionClone);
									}

									quickMessageWindow.show($(row.html).find('a')[0], select);
								},
								functionFailure: function (xhr, response)
								{
									PMDesigner.msgWinError(response.error.message);
								},
								messageError: 'There are problems saving the assigned user, please try again.'.translate()
							});
							restClient.setBaseEndPoint('group/' + row.getData()["aas_uid"]+ '/users?start=0&limit=11');
							restClient.executeRestClient();
                        }
                    }
                },
                {
                    title: "",
                    dataType: 'string',
                    columnData: "available",
                    alignmentCell: "left",
                    width: "330px"
                },
                {
                    id: 'gridUsersButtonAssign',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit-assign'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        var sw = row.getData()["aas_type"] === 'user';
                        row.getCells()[0].content.style.addClasses([sw ? 'button-icon-user' : 'button-icon-group']);
                        return ''.translate();
                    },
                    onButtonClick: function (row, grid) {
						var  dataRow = {};
                        grid = (grid != null) ? grid : gridUsers;
						assignee(row);
						gridUserList.goToPage(gridUserList.currentPage);
						grid.goToPage(0);
						gridUserList.goToPage(0);
						flashMessage.setMessage("Assignee saved successfully".translate());
						flashMessage.setAppendTo(windowAssignmentRules.getHTML());
						flashMessage.show();
                    }
                }],
            onDropOut: function (item, origin, destiny) {
            },
            onDrop: function (a, row) {
				grid = this;
				remove(row);
				gridUserList.goToPage(gridUserList.currentPage);
				grid.goToPage(grid.currentPage);
				flashMessage.setMessage("The user/group was successfully removed".translate());
				flashMessage.setAppendTo(windowAssignmentRules.getHTML());
				flashMessage.show();
				return false;
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });
        var assigmentPanelUserList = new PMUI.core.Panel({
            id: "assigmentPanelUserList",
            layout: "vbox",
            width: "60%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            }
        });
        var panelTitleUserList = new PMUI.core.Panel({
            id: "panelTitleUserList",
            layout: "hbox"
        });
        var titleUserList = new PMUI.ui.TextLabel({
            id: "titleUserList",
            textMode: 'plain',
            text: 'Assigned users list'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelGridUserList = new PMUI.core.Panel({
            id: "panelGridUserList",
            layout: "hbox",
            style: {
                cssClasses: ["mafe-panel"]
            }
        });
        var buttonsUserList = new PMUI.field.RadioButtonGroupField({
            id: "buttonsUserList",
            controlPositioning: 'horizontal',
            maxDirectionOptions: 3,
            options: [{
                    id: 'buttonAllAs',
                    label: 'View all'.translate(),
                    value: 'all',
                    selected: true
                },{
                    id: 'buttonUsersAs',
                    label: 'View users'.translate(),
                    value: 'user'
                },{
                    id: 'buttonGroupsAs',
                    label: 'View groups'.translate(),
                    value: 'group'
            }],
            onChange: function (newVal, oldVal) {
				switch (newVal){
					case "user" :
						gridUserList.typeList = "user";
					break;
					case "group":
						gridUserList.typeList = "group";
					break;
					default:
						gridUserList.typeList = "";
					break;
				}
				gridUserList.goToPage(0);
            }
        });
        var gridUserList = new PMUI.grid.GridPanel({
            id: "gridUserList",
            pageSize: pageSizeAssignment - 1,
            edges: 2,
            displayedPages: 2,
            behavior: 'dragdropsort',
            filterable: true,
            nextLabel: 'Next'.translate(),
            filterPlaceholder: 'Search ...'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            emptyMessage: function () {
                var div = document.createElement('div');
                var span = document.createElement('span');
                div.appendChild(span);
                div.className = "mafe-grid-panel-empty";
                div.style.height = gridUserList.dom.tableContainer.style.height;
                div.style.width = gridUserList.dom.tableContainer.style.width;
                span.innerHTML = 'Drag & Drop a User or a Group here'.translate();
                return div;
            },
            onEmpty: function () {
                gridUserList.dom.tableContainer.style.overflow = "hidden";
            },
			dynamicLoad: {
				keys : {
					server : HTTP_SERVER_HOSTNAME,
					projectID : PMDesigner.project.projectId,
					workspace : WORKSPACE,
					accessToken : PMDesigner.project.tokens.access_token,
					endPoint : 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/assignee/paged'
				}
			},
			customDataRest : function(data){
				var i;
				for ( i=0;i<data.length;i+=1 ) {
					if (data[i].aas_type == "group") {
						data[i]["assignment"] = data[i].aas_name;
					} else {
						data[i]["assignment"] = data[i].aas_name + " "+  data[i].aas_lastname+ " ("+data[i].aas_username+")";
					}
				}
				return data; 
			},
            columns: [
                {
                    id: 'gridUserListButtonLabel',
                    title: "",
                    width: "10%",
                    dataType: 'button',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
						var option, select;
						select = document.createElement("span");
						select.id = "list-usersIngroup";
						option = document.createElement("span");
						option.id = "list-usersIngroup-iem";

						if (row.getData()["aas_type"] === "group") {
							var restClient = new PMRestClient({
								typeRequest: 'get',
								functionSuccess: function (xhr, response) {
									var optionClone;
									for (var i = 0; i < response.length; i++) {
										if ( i == 10 ) {
											optionClone = option.cloneNode(false);
											optionClone.innerHTML = "<b style='float: right'>. . .<b>";
											select.appendChild(optionClone);	
										} else {
											optionClone = option.cloneNode(false);
											optionClone.textContent = "- "+response[i].usr_firstname + ' ' + response[i].usr_lastname;
											optionClone.title = response[i].usr_firstname + ' ' + response[i].usr_lastname;
											select.appendChild(optionClone);
										}
									}
									if(!optionClone){
										optionClone = option.cloneNode(false);
										optionClone.textContent = "No users".translate();
										select.appendChild(optionClone);
									}

									quickMessageWindow.show($(row.html).find('a')[0], select);
								},
								functionFailure: function (xhr, response)
								{
									PMDesigner.msgWinError(response.error.message);
								},
								messageError: 'There are problems saving the assigned user, please try again.'.translate()
							});
							restClient.setBaseEndPoint("group/" + row.getData()["aas_uid"] + "/users?start=0&limit=11");
							restClient.executeRestClient();
						}
                    }
                },
                {
                    title: '',
                    dataType: 'string',
                    columnData: "assignment",
                    alignmentCell: "left",
					width: "330px"
                },
                {
                    id: 'gridUserListButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete-assign'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        var sw = row.getData()["aas_type"] === 'user';
                        row.getCells()[0].content.style.addClasses([sw ? 'button-icon-user' : 'button-icon-group']);
                        return ''.translate();
                    },
                    onButtonClick: function (row, grid) {
						var  dataRow = {};
                        grid = (grid != null) ? grid : gridUserList;
						remove(row);
						gridUserList.goToPage(gridUserList.currentPage);
						grid.goToPage(0);
						gridUsers.goToPage(0);
						flashMessage.setMessage("The user/group was successfully removed".translate());
						flashMessage.setAppendTo(windowAssignmentRules.getHTML());
						flashMessage.show();
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
            },
            onDrop: function (grid, row) {
				var  dataRow = {};
				grid = this;
				assignee(row);
				gridUsers.goToPage(gridUsers.currentPage);
				grid.goToPage(grid.currentPage);
				flashMessage.setMessage("Assignee saved successfully".translate());
				flashMessage.setAppendTo(windowAssignmentRules.getHTML());
				flashMessage.show();
				return false;
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });


        var assigmentPanelGlobalAD = new PMUI.core.Panel({
            id: "assigmentPanelGlobalAD",
            layout: "hbox",
            width: DEFAULT_WINDOW_WIDTH

        });
        var assigmentPanelUserAD = new PMUI.core.Panel({
            id: "assigmentPanelUserAD",
            layout: "vbox",
            width: "60%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            }
        });
        var panelTitleUserAD = new PMUI.core.Panel({
            id: "panelTitleUserAD",
            layout: "hbox"
        });
        var titleUserAD = new PMUI.ui.TextLabel({
            id: "titleUserAD",
            label: " ",
            textMode: 'plain',
            text: 'Available users list'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelSearchUserAD = new PMUI.core.Panel({
            id: "panelSearchUserAD",
            layout: "hbox"
        });
        var searchGridUserAD = new PMUI.field.TextField({
            id: "searchGridUserAD",
            label: " ",
            placeholder: 'Search ...'.translate(),
            style: {
                cssClasses: [
                    'mafe-assigment-search'
                ]
            }
        });
        var panelGridUserAD = new PMUI.core.Panel({
            id: "panelGridUserAD",
            layout: "hbox",
            style: {
                cssClasses: ["mafe-panel"]
            }
        });
        var buttonsUsersAD = new PMUI.field.RadioButtonGroupField({
            id: "buttonsUsersAD",
            controlPositioning: 'horizontal',
            maxDirectionOptions: 3,
            options: [{
                    id: 'buttonAllAv',
                    label: 'View all'.translate(),
                    selected: true,
                    value: 'all'
                },{
                    id: 'buttonUsersAv',
                    label: 'View users'.translate(),
                    value: 'user'
                },{
                    id: 'buttonGroupsAv',
                    label: 'View groups'.translate(),
                    value: 'group'
            }],
            onChange: function (newVal, oldVal) {
				switch (newVal){
					case "user" :
						gridUsersAD.typeList = "user";
					break;
					case "group":
						gridUsersAD.typeList = "group";
					break;
					default:
						gridUsersAD.typeList = "";
					break;
				}
				gridUsersAD.goToPage(0);
            }
        });
        var gridUsersAD = new PMUI.grid.GridPanel({
            id: "gridUsersAD",
            pageSize: pageSizeAssignmentAD - 1,
            filterable: true,
            behavior: 'dragdropsort',
            filterPlaceholder: 'Search ...'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
			dynamicLoad: {
				keys : {
					server :HTTP_SERVER_HOSTNAME,
					projectID : PMDesigner.project.projectId,
					workspace : WORKSPACE,
					accessToken : PMDesigner.project.tokens.access_token,
					endPoint : 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/adhoc-available-assignee/paged'
				}
			},
			customDataRest : function(data){
				var i;
				for ( i=0;i<data.length;i+=1 ) {
					if (data[i].ada_type == "group") {
						data[i]["available"] = data[i].ada_name;
					} else {
						data[i]["available"] = data[i].ada_name + " "+  data[i].ada_lastname + " ("+data[i].ada_username+")";
					}
				}
				return data; 
			},
            columns: [
                {
                    id: 'gridUsersADButtonLabel',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
						var option, select;
						select = document.createElement("span");
						select.id = "list-usersIngroup";
						option = document.createElement("span");
						option.id = "list-usersIngroup-iem";
						if (row.getData()["ada_type"] === "group") {
							var restClient = new PMRestClient({
								typeRequest: 'get',
								functionSuccess: function (xhr, response) {
									var optionClone;
									for (var i = 0; i < response.length; i++) {
										if ( i == 10 ) {
											optionClone = option.cloneNode(false);
											optionClone.innerHTML = "<b style='float: right'>. . .<b>";
											select.appendChild(optionClone);	
										} else {
											optionClone = option.cloneNode(false);
											optionClone.textContent = "- "+response[i].usr_firstname + ' ' + response[i].usr_lastname;
											optionClone.title = response[i].usr_firstname + ' ' + response[i].usr_lastname;
											select.appendChild(optionClone);
										}
									}
									if(!optionClone){
										optionClone = option.cloneNode(false);
										optionClone.textContent = "No users".translate();
										select.appendChild(optionClone);
									}

									quickMessageWindow.show($(row.html).find('a')[0], select);
								},
								functionFailure: function (xhr, response)
								{
									PMDesigner.msgWinError(response.error.message);
								},
								messageError: 'There are problems saving the assigned user, please try again.'.translate()
							});
							restClient.setBaseEndPoint("group/" + row.getData()["ada_uid"] + "/users?start=0&limit=11");
							restClient.executeRestClient();
						}
                    }
                },
                {
                    title: "",
                    dataType: 'string',
                    columnData: "available",
                    alignmentCell: "left",
					width: "330px"
                },
                {
                    id: 'gridUsersADButtonAssign',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit-assign'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        var sw = row.getData()["ada_type"] === 'user';
                        row.getCells()[0].content.style.addClasses([sw ? 'button-icon-user' : 'button-icon-group']);
                        return ''.translate();
                    },
                    onButtonClick: function (row, grid) {
						var  dataRow = {};
                        grid = (grid != null) ? grid : gridUsersAD;
						assigneeAD(row);
						grid.goToPage(gridUsersAD.currentPage);
						gridUserListAD.goToPage(0);
						flashMessage.setMessage("Assignee saved successfully".translate());
						flashMessage.setAppendTo(windowAssignmentRules.getHTML());
						flashMessage.show();
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                formAssignmentRules.dirty = true;
                grid =  gridUsersAD;
                grid.sort('fullName', 'asc');
                buttonsUserListAD.setValue(buttonsUsersAD.getValue());
                groupRows(gridUsersAD, 'all');
                groupRows(gridUserListAD, 'all');
                arrayObjectAdhocUserList.push(item);
                index = arrayObjectAdhocUser.indexOf(item);
                if(index > -1){
                    arrayObjectAdhocUser.splice(index, 1);
                }
            },
            onDrop: function (a, row) {
				grid = this;
				removeAD(row);
				gridUserListAD.goToPage(gridUserListAD.currentPage);
				grid.goToPage(grid.currentPage);
				flashMessage.setMessage("The user/group was successfully removed".translate());
				flashMessage.setAppendTo(windowAssignmentRules.getHTML());
				flashMessage.show();
				return false;
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });
        var assigmentPanelUserListAD = new PMUI.core.Panel({
            id: "assigmentPanelUserListAD",
            layout: "vbox",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            },
            width: "60%"
        });
        var panelTitleUseListAD = new PMUI.core.Panel({
            id: "panelTitleUseListAD",
            layout: "hbox"
        });
        var titleUserListAD = new PMUI.ui.TextLabel({
            id: "titleUserListAD",
            textMode: 'plain',
            text: 'Assigned users list'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelGridUserListAD = new PMUI.core.Panel({
            id: "panelGridUserListAD",
            layout: "hbox",
            style: {
                cssClasses: ["mafe-panel"]
            }
        });
        var buttonsUserListAD = new PMUI.field.RadioButtonGroupField({
            id: "buttonsUserListAD",
            controlPositioning: 'horizontal',
            maxDirectionOptions: 3,
            options: [{
                    id: 'buttonAllAs',
                    label: 'View all'.translate(),
                    value: 'all',
                    selected: true
                },{
                    id: 'buttonUsersAs',
                    label: 'View users'.translate(),
                    value: 'user'
                },{
                    id: 'buttonGroupsAs',
                    label: 'View groups'.translate(),
                    value: 'group'
            }],
            onChange: function (newVal, oldVal) {
			   	switch (newVal){
					case "user" :
						gridUserListAD.typeList = "user";
					break;
					case "group":
						gridUserListAD.typeList = "group";
					break;
					default:
						gridUserListAD.typeList = "";
					break;
				}
				gridUserListAD.goToPage(0);
            }
        });
        var gridUserListAD = new PMUI.grid.GridPanel({
            id: "gridUserListAD",
            pageSize: pageSizeAssignmentAD - 1,
            behavior: 'dragdropsort',
            filterable: true,
            filterPlaceholder: 'Search ...'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            emptyMessage: function () {
                var div = document.createElement('div');
                var span = document.createElement('span');
                div.appendChild(span);
                div.className = "mafe-grid-panel-empty";
                div.style.height = gridUserListAD.dom.tableContainer.style.height;
                div.style.width  = gridUserListAD.dom.tableContainer.style.width;
                span.innerHTML   = 'Drag & Drop a User or a Group here'.translate();
                return div;
            },
            onEmpty: function (grid, cell) {
                gridUserListAD.dom.tableContainer.style.overflow = "hidden";
            },
			dynamicLoad: {
				keys : {
					server : HTTP_SERVER_HOSTNAME,
					projectID : PMDesigner.project.projectId,
					workspace : WORKSPACE,
					accessToken : PMDesigner.project.tokens.access_token,
					endPoint : 'project/' + PMDesigner.project.id + '/activity/' + activity.id + '/adhoc-assignee/paged'
				}
			},
			customDataRest : function(data){
				var i;
				for ( i=0;i<data.length;i+=1 ) {
					if (data[i].ada_type == "group") {
						data[i]["assignee"] = data[i].ada_name;
					} else {
						data[i]["assignee"] = data[i].ada_name + " "+  data[i].ada_lastname + " ("+data[i].ada_username+")";
					}
				}
				return data; 
			},
            columns: [
                {
                    id: 'gridUserListADButtonLabel',
                    title: "",
                    width: "13%",
                    dataType: 'button',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
						var option, select;
						select = document.createElement("span");
						select.id = "list-usersIngroup";
						option = document.createElement("span");
						option.id = "list-usersIngroup-iem";
						if (row.getData()["ada_type"]  === "group") {
							var restClient = new PMRestClient({
								typeRequest: 'get',
								functionSuccess: function (xhr, response) {
									var optionClone;
									for (var i = 0; i < response.length; i++) {
										if ( i == 10 ) {
											optionClone = option.cloneNode(false);
											optionClone.innerHTML = "<b style='float: right'>. . .<b>";
											select.appendChild(optionClone);	
										} else {
											optionClone = option.cloneNode(false);
											optionClone.textContent = "- "+response[i].usr_firstname + ' ' + response[i].usr_lastname;
											optionClone.title = response[i].usr_firstname + ' ' + response[i].usr_lastname;
											select.appendChild(optionClone);
										}
									}
									if(!optionClone){
										optionClone = option.cloneNode(false);
										optionClone.textContent = "No users".translate();
										select.appendChild(optionClone);
									}

									quickMessageWindow.show($(row.html).find('a')[0], select);
								},
								functionFailure: function (xhr, response)
								{
									PMDesigner.msgWinError(response.error.message);
								},
								messageError: 'There are problems saving the assigned user, please try again.'.translate()
							});
							restClient.setBaseEndPoint("group/" + row.getData()["ada_uid"] + "/users?start=0&limit=11");
							restClient.executeRestClient();
						}
                    }
                },
                {
                    title: '',
                    dataType: 'string',
                    columnData: "assignee",
                    alignmentCell: "left",
					width: "330px"
                },
                {
                    id: 'gridUserListADButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: "10%",
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete-assign'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        var sw = row.getData()["ada_type"] === 'user';
                        row.getCells()[0].content.style.addClasses([sw ? 'button-icon-user' : 'button-icon-group']);
                        return ''.translate();
                    },
                    onButtonClick: function (row, grid) {
						var  dataRow = {};
                        grid = (grid != null) ? grid : gridUserListAD;
						removeAD(row);
						grid.goToPage(grid.currentPage);
						gridUsersAD.goToPage(gridUsersAD.currentPage);
						flashMessage.setMessage("The user/group was successfully removed".translate());
						flashMessage.setAppendTo(windowAssignmentRules.getHTML());
						flashMessage.show();
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
            },
            onDrop: function (a, row) {
				grid = this;
				assigneeAD(row);
				gridUsersAD.goToPage(gridUsersAD.currentPage);
				grid.goToPage(grid.currentPage);
				flashMessage.setMessage("Assignee saved successfully".translate());
				flashMessage.setAppendTo(windowAssignmentRules.getHTML());
				flashMessage.show();
				return false;
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });


        var panelContainerRules = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH - 55,
            height: "auto",
            fieldset: true,
            items: [
                formAssignmentRules
            ]
        });
        var panelContainerUsers = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH,
            height: "auto",
            fieldset: true,
            items: [
                assigmentPanelGlobal
            ]
        });
        var panelContainerUsersAdHoc = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH,
            height: "auto",
            fieldset: true,
            items: [
                assigmentPanelGlobalAD
            ]
        });


        var tabPanelAssignmentRules = new PMUI.panel.TabPanel({
            id: 'tabPanelAssignmentRules',
            width: "100%",
			height : "auto",
            items: [
                {
                    id: 'tabUsers',
                    title: 'Users'.translate(),
                    panel: panelContainerUsers
                },
                {
                    id: 'tabUsersAdHoc',
                    title: 'Ad Hoc Users'.translate(),
                    panel: panelContainerUsersAdHoc
                }
            ],
            onTabClick: function (item) {
                quickMessageWindow.close();
                switch (item.id) {
                    case 'tabRules':
                        break;
                    case 'tabUsers':
                        applyStyles();
						gridUsers.goToPage(0);
						gridUserList.goToPage(0);
                        break;
                    case 'tabUsersAdHoc':
                        applyStylesAD();
						gridUsersAD.goToPage(0);
                        gridUserListAD.goToPage(0);
                        break;
                }
            }
        });


        var windowAssignmentRules = new PMUI.ui.Window({
            id: 'windowAssignmentRules',
            title: 'Assignment Rules'.translate() + ': ' + activity.act_name,
            height: DEFAULT_WINDOW_HEIGHT,
            width: DEFAULT_WINDOW_WIDTH,
            footerItems: [
				{
					id: 'windowConnectionsButtonCancel',
					text: 'Close'.translate(),
                    handler: function () {
						if (formAssignmentRules.isDirty()) {
							warningMessageWindowDirty.open();
							warningMessageWindowDirty.showFooter();
						} else {
							windowAssignmentRules.close();
						}
					},
					buttonType: 'error'
				},
				{
					buttonType: 'success',
					id: 'windowPropertiesButtonSave',
					text: "Save".translate(),
					handler: function () {
						saveData();
					}
				}
			],
            visibleFooter: true,
            buttonPanelPosition: 'bottom',
            footerAlign : "right",
            onBeforeClose : function(){
				if (formAssignmentRules.isDirty()) {
					warningMessageWindowDirty.open();
					warningMessageWindowDirty.showFooter();
				} else {
					windowAssignmentRules.close();
				}
            }
        });


        var loadTrigger = function (response) {
            var field = formAssignmentRules.getField('tas_selfservice_trigger_uid');
            field.clearOptions();
            field.addOption({
                value: '',
                label: '- Select Trigger -'.translate()
            });
            for (var i = 0; i < response.length; i++) {
                field.addOption({
                    value: response[i].tri_uid,
                    label: response[i].tri_title
                });
            }
        };


        var loadFormData = function (response) {
            dataProperties = response.properties;
            formAssignmentRules.getField('tas_assign_type').setValue(dataProperties.tas_assign_type);
            formAssignmentRules.getField('tas_assign_variable').setValue(dataProperties.tas_assign_variable);
            formAssignmentRules.getField('tas_group_variable').setValue(dataProperties.tas_group_variable);
            changeRadioButtons(formAssignmentRules.getField('tas_assign_type').getValue());
            formAssignmentRules.getField('tas_selfservice_timeout').controls[0].deselect();
            if (dataProperties.tas_selfservice_timeout === 1) {
                formAssignmentRules.getField('tas_selfservice_timeout').controls[0].select();
            }
            formAssignmentRules.getField('tas_selfservice_time').setValue(dataProperties.tas_selfservice_time);
            formAssignmentRules.getField('tas_selfservice_time_unit').setValue(dataProperties.tas_selfservice_time_unit);
            formAssignmentRules.getField('tas_selfservice_trigger_uid').setValue(dataProperties.tas_selfservice_trigger_uid);
            formAssignmentRules.getField('tas_selfservice_execution').setValue(dataProperties.tas_selfservice_execution);
            visibleService(dataProperties.tas_selfservice_timeout === 1);
        };


        var loadServerData = function () {
            var restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'project/' + PMDesigner.project.id + '/activity/' + activity.id,
                            method: 'GET'
                        }, {
                            url: 'project/' + PMDesigner.project.id + '/triggers',
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    loadTrigger(response[1].response);
                    loadFormData(response[0].response);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.setBaseEndPoint('');
            restClient.executeRestClient();
        };
        var loadFreeUsers = function (response) {
            gridUsers.clearItems();
            for (var i = 0; i < response.length; i++) {
                gridUsers.addDataItem({fullName: response[i].aas_name + " " + response[i].aas_lastname, ass_uid: response[i].aas_uid, ass_type: response[i].aas_type});
            }
        };
        var loadAssignmentUsers = function (response) {
            gridUserList.clearItems();
            for (var i = 0; i < response.length; i++) {
                gridUserList.addDataItem({fullName: response[i].aas_name + " " + response[i].aas_lastname, ass_uid: response[i].aas_uid, ass_type: response[i].aas_type});
            }
        };
        var loadAdHocFreeUsers = function (response) {
            gridUsersAD.clearItems();
            for (var i = 0; i < response.length; i++) {
                gridUsersAD.addDataItem({fullName: response[i].ada_name + " " + response[i].ada_lastname, ada_uid: response[i].ada_uid, ass_type: response[i].ada_type});
            }
        };
        var loadAdHocAssignmentUsers = function (response) {
            gridUserListAD.clearItems();
            for (var i = 0; i < response.length; i++) {
                gridUserListAD.addDataItem({fullName: response[i].ada_name + " " + response[i].ada_lastname, ada_uid: response[i].ada_uid, ass_type: response[i].ada_type});
            }
        };
        var updateRules = function () {
            (new PMRestClient({
                endpoint: 'activity/' + activity.id,
                typeRequest: 'update',
                messageError: ' '.translate(),
                data: {
                    definition: {},
                    properties: dataProperties
                },
                messageSuccess: 'Assignment Rules saved successfully'.translate(),
                flashContainer: document.body,
                functionSuccess: function (){
                    formAssignmentRules.dirty = false;
                    windowAssignmentRules.close();
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            })).executeRestClient();
        };
        var allHidden = function () {
            formAssignmentRules.getField('tas_assign_variable').setVisible(false);
            formAssignmentRules.getField('tas_group_variable').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_timeout').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_timeout').controls[0].deselect();
            formAssignmentRules.getField('tas_selfservice_time').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_time_unit').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_trigger_uid').setVisible(false);
            formAssignmentRules.getField('tas_selfservice_execution').setVisible(false);
        };
        var changeRadioButtons = function (newVal) {
            allHidden();
            tabPanelAssignmentRules.setVisible(true);
            switch (newVal) {
                case 'EVALUATE':
                    formAssignmentRules.getField('tas_assign_variable').setVisible(true);
                    if (dataProperties.tas_assign_variable === "" || dataProperties.tas_assign_variable === null) {
                        formAssignmentRules.getField('tas_assign_variable').setValue('@@SYS_NEXT_USER_TO_BE_ASSIGNED');
                    } else {
                        formAssignmentRules.getField('tas_assign_variable').setValue(dataProperties.tas_assign_variable);
                    }
                    break;
                case 'SELF_SERVICE':
                    formAssignmentRules.getField('tas_selfservice_timeout').setVisible(true);
                    break;
                case 'SELF_SERVICE_EVALUATE':
                    formAssignmentRules.getField('tas_group_variable').setVisible(true);
                    if (dataProperties.tas_group_variable === "@@SYS_GROUP_TO_BE_ASSIGNED" || dataProperties.tas_group_variable === "" || dataProperties.tas_group_variable === null) {
                        formAssignmentRules.getField('tas_group_variable').setPlaceholder('@@ARRAY_OF_USERS or @@GROUP_UID');
                    } else {
                        formAssignmentRules.getField('tas_group_variable').setValue(dataProperties.tas_group_variable);
                    }
                    formAssignmentRules.getField('tas_selfservice_timeout').setVisible(true);
                    break;
                case 'REPORT_TO':
                    break;
                case 'MULTIPLE_INSTANCE_VALUE_BASED':
                    formAssignmentRules.getField('tas_assign_variable').setLabel("Array of users".translate());
                    if(formAssignmentRules.getField('tas_assign_variable').getValue() == "@@SYS_NEXT_USER_TO_BE_ASSIGNED" || formAssignmentRules.getField('tas_assign_variable').getValue() == ""){
                        formAssignmentRules.getField('tas_assign_variable').setValue('');
                        formAssignmentRules.getField('tas_assign_variable').setPlaceholder('@@ARRAY_OF_USERS');
                    }
                    formAssignmentRules.getField('tas_assign_variable').setVisible(true);
                    if(activity.act_loop_type == "PARALLEL") {
                        tabPanelAssignmentRules.setVisible(false);
                    }
                    break;    
                default:
                    break;
            }
        };
        var visibleService = function (value) {
            var a = formAssignmentRules.getField('tas_assign_type').getValue();
            if (a === 'SELF_SERVICE' || a === 'SELF_SERVICE_EVALUATE') {
                formAssignmentRules.getField('tas_selfservice_time').setVisible(value);
                formAssignmentRules.getField('tas_selfservice_time_unit').setVisible(value);
                formAssignmentRules.getField('tas_selfservice_trigger_uid').setVisible(value);
                formAssignmentRules.getField('tas_selfservice_execution').setVisible(value);
            }
        };
        var hiddenTab = function (value) {
            tabPanelAssignmentRules.showTab(2);
        };
        var saveData = function () {
            var tas_selfservice_timeout = formAssignmentRules.getField('tas_selfservice_timeout').getValue() === '["1"]';
            if (!tas_selfservice_timeout) {
                //validation because getData method do not work in IE
                if (navigator.userAgent.indexOf("MSIE") !== -1 || navigator.userAgent.indexOf("Trident") !== -1) {
                    var data = getData2PMUI(formAssignmentRules.html);
                    var b = data["tas_assign_variable"];
                }else{
                   var b = formAssignmentRules.getField('tas_assign_variable').getValue();
                }
                var a = formAssignmentRules.getField('tas_assign_type').getValue();
                var c = formAssignmentRules.getField('tas_group_variable').getValue();
                var d = formAssignmentRules.getField('tas_group_variable').getValue();
                formAssignmentRules.getField('tas_assign_type').setValue(a);
                formAssignmentRules.getField('tas_assign_variable').setValue(b);
                formAssignmentRules.getField('tas_group_variable').setValue(c);
                formAssignmentRules.getField('tas_selfservice_timeout').setValue(d);
                formAssignmentRules.getField('tas_selfservice_time').setValue('');
                formAssignmentRules.getField('tas_selfservice_time_unit').setValue('');
                formAssignmentRules.getField('tas_selfservice_trigger_uid').setValue('');
                formAssignmentRules.getField('tas_selfservice_execution').setValue('');
            } else {
                if (!formAssignmentRules.isValid()) {
                    return;
                }
            }
            dataProperties.tas_assign_type = formAssignmentRules.getField('tas_assign_type').getValue();
            dataProperties.tas_assign_variable = formAssignmentRules.getField('tas_assign_variable').getValue() === '' ? '@@SYS_NEXT_USER_TO_BE_ASSIGNED' : formAssignmentRules.getField('tas_assign_variable').getValue();
            dataProperties.tas_group_variable = formAssignmentRules.getField('tas_group_variable').getValue() === '' ? '@@SYS_GROUP_TO_BE_ASSIGNED' : formAssignmentRules.getField('tas_group_variable').getValue();
            dataProperties.tas_selfservice_timeout = tas_selfservice_timeout ? 1 : 0;
            dataProperties.tas_selfservice_time = formAssignmentRules.getField('tas_selfservice_time').getValue() !== ""? parseInt(formAssignmentRules.getField('tas_selfservice_time').getValue(),10): 0;
            dataProperties.tas_selfservice_time_unit = formAssignmentRules.getField('tas_selfservice_time_unit').getValue();
            dataProperties.tas_selfservice_trigger_uid = formAssignmentRules.getField('tas_selfservice_trigger_uid').getValue();
            dataProperties.tas_selfservice_execution = formAssignmentRules.getField('tas_selfservice_execution').getValue();
            updateRules();
            //saveOrUpdateUserAndAdHocUsers();
        };
        var saveOrUpdateUserAndAdHocUsers = function () {
            //Assigne and Remove (users)
            if(gridUserList.getItems().length > 0){
                grid = gridUserList;
                for (var i = 0; i < arrayObjectUserList.length; i++) {
                    b = arrayObjectUserList[i];
                    if(arrayObjectUserList2.indexOf(b) == -1){
                        assignee(b);
                    }
                };
            }
            if(gridUsers.getItems().length > 0){
                for (var i = 0; i < arrayObjectUsers.length; i++) {
					b = arrayObjectUsers[i];
					if(arrayObjectUsers2.indexOf(b) == -1){
						remove(arrayObjectUsers[i]);
					}
                };
            }
            //Assigne and Remove (AdHocUsers)
            if(gridUserListAD.getItems().length > 0){
                grid = gridUserListAD;
                for (var i = 0; i < arrayObjectAdhocUserList.length; i++) {
                    b = arrayObjectAdhocUserList[i];
                    if(arrayObjectAdhocUserList2.indexOf(b) == -1){
                        assigneeAD(b);
                    }
                };
            }
            if(gridUsersAD.getItems().length > 0){
                for (var i = 0; i < arrayObjectAdhocUser.length; i++) {
                        b = arrayObjectAdhocUser[i];
                        if(arrayObjectAdhocUser2.indexOf(b) == -1){
                            removeAD(arrayObjectAdhocUser[i]);
                        }
                };
            }
        };
        var applyStyles = function () {
            gridUsers.dom.toolbar.appendChild(buttonsUsers.getHTML());
			buttonsUsers.defineEvents();
            gridUsers.dom.toolbar.style.height = "76px";
            gridUserList.dom.toolbar.appendChild(buttonsUserList.getHTML());
			buttonsUserList.defineEvents();
            gridUserList.dom.toolbar.style.height = "76px";
            buttonsUsers.dom.labelTextContainer.style.display = "none";
            buttonsUserList.dom.labelTextContainer.style.display = "none";
            gridUsers.hideHeaders();
            gridUserList.hideHeaders();
            assigmentPanelUserList.setHeight('100%');
            gridUsers.filterControl.html.style.width = "300px";
            gridUserList.filterControl.html.style.width = "300px";
        };
        var applyStylesAD = function () {
            gridUsersAD.dom.toolbar.appendChild(buttonsUsersAD.getHTML());
			buttonsUsersAD.defineEvents();
            gridUsersAD.dom.toolbar.style.height = "76px";
			
            gridUserListAD.dom.toolbar.appendChild(buttonsUserListAD.getHTML());
			buttonsUserListAD.defineEvents();
            gridUserListAD.dom.toolbar.style.height = "76px";
            buttonsUsersAD.dom.labelTextContainer.style.display = "none";
            buttonsUserListAD.dom.labelTextContainer.style.display = "none";
            gridUsersAD.hideHeaders();
            gridUserListAD.hideHeaders();
            assigmentPanelUserListAD.setHeight('100%');
            gridUsersAD.filterControl.html.style.width = "300px";
            gridUserListAD.filterControl.html.style.width = "300px";
        };
        var assignee = function (row) {
            restClient.setTypeRequest("post");
            restClient.setEndpoint("activity/" + activity.id + "/assignee");
			restClient.setData({aas_uid: row.getData()["aas_uid"], aas_type: row.getData()["aas_type"]});
            restClient.functionSuccess = function (xhr, response) {
            };
            restClient.executeRestClient();
        };
        var remove = function (row) {
            restClient.setTypeRequest("remove");
			restClient.setEndpoint("activity/" + activity.id + "/assignee/" + row.getData().aas_uid);
            restClient.functionSuccess = function (xhr, response) {
            };
            restClient.executeRestClient();
        };
        var assigneeAD = function (row) {
			restClient.setTypeRequest("post");
            restClient.setEndpoint("activity/" + activity.id + "/adhoc-assignee");
            restClient.setData({ada_uid: row.getData()["ada_uid"], ada_type: row.getData()["ada_type"]});
            restClient.functionSuccess = function (xhr, response) {
            };
            restClient.executeRestClient();
        };
        var removeAD = function (row) {
            restClient.setTypeRequest("remove");
            restClient.setEndpoint("activity/" + activity.id + "/adhoc-assignee/" + row.getData()["ada_uid"]);
            restClient.functionSuccess = function (xhr, response) {
            };
            restClient.executeRestClient();
        };
        var groupRows = function (grid, value) {
            if (grid.memorystack === undefined) {
                grid.memorystack = [];
            }
            var i, items = grid.getItems();
            while (grid.memorystack.length > 0) {
                grid.addItem(grid.memorystack.pop());
            }
            if (value !== 'all') {
                for (i = 0; i < items.length; i++) {
                    if (items[i].getData().ass_type !== value) {
                        grid.memorystack.push(items[i]);
                        grid.removeItem(items[i]);
                    }
                }
            }
            grid.sort('fullName', 'asc');
        };        

        function onchangeRadio(grid,fieldName){
            var radioButTrat = document.getElementsByName(fieldName);
            for (var i=0; i<radioButTrat.length; i++){
                if (radioButTrat[i].checked == true){
                    quickMessageWindow.close();
                    groupRows(grid, radioButTrat[i].value);
                }
            }
        }
        
        function domSettings() {
            if(activity.act_loop_type == "PARALLEL") {
                $(formAssignmentRules.getField("tas_assign_type").controls[0].html).parent().hide();
                $(formAssignmentRules.getField("tas_assign_type").controls[1].html).parent().hide();
                $(formAssignmentRules.getField("tas_assign_type").controls[2].html).parent().hide();
                $(formAssignmentRules.getField("tas_assign_type").controls[3].html).parent().hide();
                $(formAssignmentRules.getField("tas_assign_type").controls[4].html).parent().hide();
                $(formAssignmentRules.getField("tas_assign_type").controls[5].html).parent().hide();
                $(formAssignmentRules.getField("tas_assign_type").controls[6].html).parent().show();
                $(formAssignmentRules.getField("tas_assign_type").controls[7].html).parent().show();
                if(formAssignmentRules.getField('tas_assign_type').getValue() == "MULTIPLE_INSTANCE_VALUE_BASED"){
                    formAssignmentRules.getField('tas_assign_type').setValue("MULTIPLE_INSTANCE_VALUE_BASED");
                } else {
                    formAssignmentRules.getField('tas_assign_type').setValue("MULTIPLE_INSTANCE");
                }
            } else {
                $(formAssignmentRules.getField("tas_assign_type").controls[0].html).parent().show();
                $(formAssignmentRules.getField("tas_assign_type").controls[1].html).parent().show();
                $(formAssignmentRules.getField("tas_assign_type").controls[2].html).parent().show();
                $(formAssignmentRules.getField("tas_assign_type").controls[3].html).parent().show();
                $(formAssignmentRules.getField("tas_assign_type").controls[4].html).parent().show();
                $(formAssignmentRules.getField("tas_assign_type").controls[5].html).parent().show();
                $(formAssignmentRules.getField("tas_assign_type").controls[6].html).parent().hide();
                $(formAssignmentRules.getField("tas_assign_type").controls[7].html).parent().hide();
                if(formAssignmentRules.getField('tas_assign_type').getValue() == "MULTIPLE_INSTANCE_VALUE_BASED"){
                    formAssignmentRules.getField('tas_assign_type').setValue("BALANCED");
                    formAssignmentRules.getField('tas_assign_variable').setVisible(false);
                }
            }
        };

        panelTitleUser.addItem(titleUser);
        panelGridUser.addItem(gridUsers);
        assigmentPanelUser.addItem(panelTitleUser);
        assigmentPanelUser.addItem(panelGridUser);
        assigmentPanelGlobal.addItem(assigmentPanelUser);
        panelTitleUserList.addItem(titleUserList);
        panelGridUserList.addItem(gridUserList);
        assigmentPanelUserList.addItem(panelTitleUserList);
        assigmentPanelUserList.addItem(panelGridUserList);
        assigmentPanelGlobal.addItem(assigmentPanelUserList);

        panelTitleUserAD.addItem(titleUserAD);
        panelSearchUserAD.addItem(searchGridUserAD);
        panelGridUserAD.addItem(gridUsersAD);
        assigmentPanelUserAD.addItem(panelTitleUserAD);
        assigmentPanelUserAD.addItem(panelGridUserAD);
        assigmentPanelGlobalAD.addItem(assigmentPanelUserAD);
        panelTitleUseListAD.addItem(titleUserListAD);
        panelGridUserListAD.addItem(gridUserListAD);
        assigmentPanelUserListAD.addItem(panelTitleUseListAD);
        assigmentPanelUserListAD.addItem(panelGridUserListAD);
        assigmentPanelGlobalAD.addItem(assigmentPanelUserListAD);

        if(formAssignmentRules.dirty == null){
           formAssignmentRules.dirty = false;
        }
        windowAssignmentRules.addItem(formAssignmentRules);
        windowAssignmentRules.addItem(tabPanelAssignmentRules);
        windowAssignmentRules.open();
        applyStyleWindowForm(windowAssignmentRules);
        windowAssignmentRules.body.style.overflowY = 'auto';
        windowAssignmentRules.body.style.overflowX = 'hidden';
        windowAssignmentRules.defineEvents();
		buttonsUsers.defineEvents();
        tabPanelAssignmentRules.itemClick(0);
        loadServerData();
        domSettings();
        //array for Users
        usersgrid = gridUsers;
        for (var i = 0; i < usersgrid.getItems().length; i++) {
            arrayObjectUsers2[i] = usersgrid.getItems()[i];
        };
        userslist = gridUserList; 
        for (var i = 0; i < userslist.getItems().length; i++) {
            arrayObjectUserList2[i] = userslist.getItems()[i];
        };
        //array for AdHocUsers
        usersgrid = gridUsersAD;
        for (var i = 0; i < usersgrid.getItems().length; i++) {
            arrayObjectAdhocUser2[i] = usersgrid.getItems()[i];
        };
        userslist = gridUserListAD; 
        for (var i = 0; i < userslist.getItems().length; i++) {
            arrayObjectAdhocUserList2[i] = userslist.getItems()[i];
        };
        formAssignmentRules.html.style.marginLeft = '30px';
        formAssignmentRulesSetTimeoutOption;
        document.getElementById("formAssignmentRulesSetTimeoutOption").childNodes[0].onchange = function() { visibleService(this.checked); };
        $(".pmui-field-control-table").css("border", "0px");
        $(".pmui-field-label").css("padding", "0px");
        $(".mafe-designer-assigment-title").css("margin-top", "25px");
        $("#formTasAssignType").append("<hr style=' border: 0; border-top: 1px solid #eee;'>");
        $(".pmui-gridpanel-footer").addClass("pmui-gridpanel-footer-dinamic");
    };
}());
(function () {
    PMDesigner.assigmentSupervisors = function (event) {
        var assigmentWindow = null,
                pageSizeAssignment = 8,
                quickMessageWindow = new QuickMessageWindow();

        var assigmentWindow = new PMUI.ui.Window({
            id: 'assigmentUserWindow',
            title: 'Assign Users and Groups as Supervisors'.translate(),
            width: DEFAULT_WINDOW_WIDTH+1,
            height: DEFAULT_WINDOW_HEIGHT,
            footerHeight: 'auto',
            bodyHeight: 'auto',
            modal: true
        });
        var restClient = new PMRestClient({
            endpoint: 'projects',
            typeRequest: 'get',
            messageError: 'There are problems, please try again.'.translate(),
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        });

        var assigmentPanelUser = new PMUI.core.Panel({
            layout: "vbox",
            width:"49%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            }
        });
        var assigmentPanelUserList = new PMUI.core.Panel({
            layout: "vbox",
            width:"50%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-smooth'
                ]
            }
        });
        var assigmentPanelGlobal = new PMUI.core.Panel({
            layout: 'hbox',
            width:DEFAULT_WINDOW_WIDTH,
            style: {
                cssClasses: [
                    'mafe-assigment-panel-global'
                ]
            }
        });

        var panelTitleUser = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var titleUser = new PMUI.ui.TextLabel({
            id: 'titleUser',
            label: ' ',
            textMode: 'plain',
            text: 'Available Users List'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelSearchUser = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var searchGridUser = new PMUI.field.TextField({
            id: 'searchGridUser',
            label: ' ',
            placeholder: 'Search ...'.translate()
        });
        var panelGridUser = new PMUI.core.Panel({layout: 'hbox'});
        var buttonsUsers = new PMUI.field.OptionsSelectorField({
            id: 'buttonsUsers',
            orientation: 'horizontal',
            items: [{
                    text: 'All'.translate(),
                    selected: true,
                    value: 'all',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                }, {
                    text: 'Users'.translate(),
                    value: 'user',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                }, {
                    text: 'Groups'.translate(),
                    value: 'group',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }
            ],
            listeners: {
                select: function (item, event) {
                    groupRows(gridUsers, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUsers = new PMUI.grid.GridPanel({
            id: 'gridUsers',
            pageSize: pageSizeAssignment,
            behavior: 'dragdropsort',
            filterable: true,
            filterPlaceholder: 'Search ...'.translate(),
            emptyMessage : 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            columns: [{
                    id: 'gridUsersButtonLabel',
                    title: '',
                    dataType: 'button',
                    width: '10%',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        if (row.data.customKeys.obj_type === 'group') {
                            restClient.setTypeRequest('get');
                            restClient.functionSuccess = function (xhr, response) {
                                var stringUsers = '';
                                for (var i = 0; i < response.length; i++) {
                                    stringUsers = stringUsers + response[i].usr_firstname + ' ' + response[i].usr_lastname + ', ';
                                }
                                stringUsers = stringUsers.substring(0, stringUsers.length - 2);
                                if (stringUsers === '') {
                                    stringUsers = 'No users';
                                }
                                quickMessageWindow.show($(row.html).find('a')[0], stringUsers);
                            };
                            restClient.setBaseEndPoint('group/' + row.data.customKeys.sup_uid + '/users');
                            restClient.executeRestClient();
                        }
                    }
                }, {
                    title: '',
                    dataType: 'string',
                    columnData: 'sup_name',
                    alignmentCell: 'left',
                    width: '80%'
                }, {
                    id: 'gridUsersButtonAssign',
                    title: '',
                    dataType: 'button',
                    width: '19%',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        row.getCells()[0].content.style.addClasses([row.data.customKeys.obj_type === 'user' ? 'button-icon-user' : 'button-icon-group']);
                        return 'Assign'.translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        grid.sort('sup_name', 'asc');
                        gridUserList.addItem(row);
                        buttonsUserList.setValue(buttonsUsers.getValue());
                        groupRows(gridUserList, buttonsUsers.getValue());
                        assignee(row);
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                assignee(item);
            },
            onDrop: function (a, row) {
                buttonsUsers.setValue(buttonsUserList.getValue());
                groupRows(gridUsers, buttonsUserList.getValue());
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });

        var panelTitleUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var titleUserList = new PMUI.ui.TextLabel({
            id: 'titleUserList',
            textMode: 'plain',
            text: 'Assigned Users List'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelSearchUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var searchGridUserList = new PMUI.field.TextField({
            id: 'searchGridUserList',
            label: ' ',
            placeholder: 'Search ...'.translate()
        });
        var panelGridUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var buttonsUserList = new PMUI.field.OptionsSelectorField({
            id: 'buttonsUserList',
            orientation: 'horizontal',
            items: [{
                    text: 'All'.translate(),
                    value: 'all',
                    selected: true,
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                }, {
                    text: 'Users'.translate(),
                    value: 'user',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                }, {
                    text: 'Groups'.translate(),
                    value: 'group',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }

            ],
            listeners: {
                select: function (item, event) {
                    groupRows(gridUserList, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUserList = new PMUI.grid.GridPanel({
            id: 'gridUserList',
            pageSize: pageSizeAssignment,
            behavior: 'dragdropsort',
            filterPlaceholder: 'Search ...'.translate(),
            filterable:true,
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            emptyMessage: function () {
                var div = document.createElement('div');
                var span = document.createElement('span');
                div.appendChild(span);
                div.className = 'mafe-grid-panel-empty';
                //div.style.height = gridUserList.dom.tableContainer.style.height;
                //div.style.width = gridUserList.dom.tableContainer.style.width;
                span.innerHTML = 'Drag & Drop a User or a Group here'.translate();
                return div;
            },
            onEmpty: function (grid, cell) {
                gridUserList.dom.tableContainer.style.overflow = 'hidden';
            },
            columns: [{
                    id: 'gridUserListButtonLabel',
                    title: '',
                    width: '10%',
                    dataType: 'button',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
                        if (row.data.customKeys.obj_type === 'group') {
                            restClient.setTypeRequest('get');
                            restClient.functionSuccess = function (xhr, response) {
                                var stringUsers = '';
                                for (var i = 0; i < response.length; i++) {
                                    stringUsers = stringUsers + response[i].usr_firstname + ' ' + response[i].usr_lastname + ', ';
                                }
                                stringUsers = stringUsers.substring(0, stringUsers.length - 2);
                                if (stringUsers === '') {
                                    stringUsers = 'No users';
                                }
                                quickMessageWindow.show($(row.html).find('a')[0], stringUsers);
                            };
                            restClient.setBaseEndPoint('group/' + row.data.customKeys.sup_uid + '/users');
                            restClient.executeRestClient();
                        }
                    }
                }, {
                    title: '',
                    dataType: 'string',
                    columnData: 'sup_name',
                    width: '80%',
                    alignmentCell: 'left'
                }, {
                    id: 'gridUserListButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: '10%',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        row.getCells()[0].content.style.addClasses([row.data.customKeys.obj_type === 'user' ? 'button-icon-user' : 'button-icon-group']);
                        return 'Remove'.translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid.removeItem(row);
                        grid.sort('sup_name', 'asc');
                        gridUsers.addItem(row);
                        buttonsUsers.setValue(buttonsUserList.getValue());
                        groupRows(gridUsers, buttonsUserList.getValue());
                        remove(row);
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
                remove(item);
            },
            onDrop: function (a, row) {
                buttonsUserList.setValue(buttonsUsers.getValue());
                groupRows(gridUserList, buttonsUsers.getValue());
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });

        var applyStyles = function () {
            gridUsers.dom.toolbar.appendChild(buttonsUsers.getHTML());
            gridUsers.dom.toolbar.style.height = "76px";
            gridUserList.dom.toolbar.appendChild(buttonsUserList.getHTML());
            gridUserList.dom.toolbar.style.height = "76px";
            buttonsUsers.dom.labelTextContainer.style.display = "none";
            buttonsUserList.dom.labelTextContainer.style.display = "none";
            gridUsers.hideHeaders();
            gridUserList.hideHeaders();
            assigmentPanelUserList.setHeight('100%');
            gridUsers.filterControl.html.style.width = "300px";
            gridUserList.filterControl.html.style.width = "300px";
        };
        var loadServerData = function () {
            var restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    calls: [
                        {
                            url: 'project/' + PMDesigner.project.id + '/available-process-supervisors',
                            method: 'GET'
                        }, {
                            url: 'project/' + PMDesigner.project.id + '/process-supervisors',
                            method: 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    loadUsers(response[0].response);
                    loadUsersList(response[1].response);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.setBaseEndPoint('');
            restClient.executeRestClient();
        };
        var loadUsers = function (response) {
            for (var i = 0; i < response.length; i++) {
                if (response[i].obj_type === 'user') {
                    gridUsers.addDataItem({
                        sup_uid: response[i].usr_uid,
                        sup_name: response[i].usr_firstname + ' ' + response[i].usr_lastname,
                        obj_type: response[i].obj_type
                    });
                }
                if (response[i].obj_type === 'group') {
                    gridUsers.addDataItem({
                        sup_uid: response[i].grp_uid,
                        sup_name: response[i].grp_name,
                        obj_type: response[i].obj_type
                    });
                }
            }
            gridUsers.sort('sup_name', 'asc');
        };
        var loadUsersList = function (response) {
            for (var i = 0; i < response.length; i++) {
                if (response[i].pu_type === 'SUPERVISOR') {
                    gridUserList.addDataItem({
                        sup_uid: response[i].usr_uid,
                        sup_name: response[i].usr_firstname + ' ' + response[i].usr_lastname,
                        obj_type: 'user',
                        pu_type: response[i].pu_type,
                        pu_uid: response[i].pu_uid
                    });
                }
                if (response[i].pu_type === 'GROUP_SUPERVISOR') {
                    gridUserList.addDataItem({
                        sup_uid: response[i].grp_uid,
                        sup_name: response[i].grp_name,
                        obj_type: 'group',
                        pu_type: response[i].pu_type,
                        pu_uid: response[i].pu_uid
                    });
                }
            }
            gridUserList.sort('sup_name', 'asc');
        };
        var groupRows = function (grid, value) {
            if (grid.memorystack === undefined) {
                grid.memorystack = [];
            }
            var i, items = grid.getItems();
            while (grid.memorystack.length > 0) {
                grid.addItem(grid.memorystack.pop());
            }
            if (value !== 'all') {
                for (i = 0; i < items.length; i++) {
                    if (items[i].getData().obj_type !== value) {
                        grid.memorystack.push(items[i]);
                        grid.removeItem(items[i]);
                    }
                }
            }
            grid.sort('sup_name', 'asc');
        };
        var assignee = function (row) {
            var restClient = new PMRestClient({
                endpoint: 'process-supervisor',
                typeRequest: 'post',
                data: {
                    usr_uid: row.data.customKeys.sup_uid,
                    pu_type: row.data.customKeys.obj_type === 'group' ? 'GROUP_SUPERVISOR' : 'SUPERVISOR'
                },
                functionSuccess: function (xhr, response) {
                    row.data.customKeys.pu_type = response.pu_type;
                    row.data.customKeys.pu_uid = response.pu_uid;
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: 'There are problems saving the assigned user, please try again.'.translate()
            });
            restClient.executeRestClient();
        };
        var remove = function (row) {
            var restClient = new PMRestClient({
                endpoint: 'process-supervisor/' + row.data.customKeys.pu_uid,
                typeRequest: 'remove',
                functionSuccess: function () {
                },
                functionComplete: function () {
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.executeRestClient();
        };

        assigmentWindow.open();

        panelTitleUser.addItem(titleUser);
        panelTitleUserList.addItem(titleUserList);
        assigmentWindow.body.style.overflow = "hidden";

        //panelSearchUser.addItem(searchGridUser);
        //panelSearchUserList.addItem(searchGridUserList);

        panelGridUser.addItem(gridUsers);
        panelGridUserList.addItem(gridUserList);

        assigmentPanelGlobal.addItem(assigmentPanelUser);
        assigmentPanelGlobal.addItem(assigmentPanelUserList);
        assigmentWindow.addItem(assigmentPanelGlobal);

        assigmentPanelUser.addItem(panelTitleUser);
        assigmentPanelUser.addItem(panelSearchUser);
        assigmentPanelUser.addItem(buttonsUsers);
        assigmentPanelUser.addItem(panelGridUser);

        assigmentPanelUserList.addItem(panelTitleUserList);
        assigmentPanelUserList.addItem(panelSearchUserList);
        assigmentPanelUserList.addItem(buttonsUserList);
        assigmentPanelUserList.addItem(panelGridUserList);

        assigmentWindow.defineEvents();
        applyStyles();


        loadServerData();
    };
}());
(function () {
    PMDesigner.assigmentSupervisors = function (event) {
        var assigmentWindow = null,
                pageSizeAssignment = 8,
                flagEdit = 0,
                index = 0,
                quickMessageWindow = new QuickMessageWindow(),                
                arrayObjectUserList = new Array(),
                arrayObjectUsers = new Array(),
                arrayObjectUserList2 = new Array(),
                arrayObjectUsers2 = new Array(),
                arrayDynaformInputDocumentID = new Array(),
                arrayDynaformInputDocumentObject = new Array(),
                arrayObjectRemovedSteps = new Array(),
				flashMessage = new PMUI.ui.FlashMessage({
					message: '',
					appendTo: document.body,
					duration: 1000,
					severity : "success"
				});;
        var assigmentWindow = new PMUI.ui.Window({
            id: 'assigmentUserWindow',
            title: 'Supervisors'.translate(),
            width: DEFAULT_WINDOW_WIDTH+1,
            height: DEFAULT_WINDOW_HEIGHT,
            footerHeight: 'auto',
            bodyHeight: 'auto',
            modal: true,
            onBeforeClose: function () {
                if(flagEdit != 0){
                    message_window.open();
                    message_window.showFooter();
                }else{
                    assigmentWindow.close();
                }
            },
            footerItems : [
                {
                    text: "Cancel",
                    handler : function () {
                        if(flagEdit != 0){
                            message_window.open();
                            message_window.showFooter();
                        }else{
                            assigmentWindow.close();
                        }
                    },
                    buttonType : 'error'
                },
                {
                    text: 'Save',
                    handler: function() {
                        if(flagEdit != 0){
                            //save Configuration Supervisors and Steps(Dyanform - Inputs Documents)                            
                            if(gridUserList.getItems().length>0){
                                grid = gridUserList;
                                for (var i = 0; i < arrayObjectUserList.length; i++) {
                                    b = arrayObjectUserList[i];                                  
                                    grid.removeItem(b);
                                    grid.sort('sup_name', 'asc');
                                    gridUserList.addItem(b);
                                    radioUsersList.setValue(radioUsers.getValue());
                                    groupRows(gridUserList, radioUsers.getValue());
                                    if(arrayObjectUserList2.indexOf(b) == -1){
                                        assignee(b);
                                    }
                                };
                            }
                            if(gridUsers.getItems().length > 0){
                                for (var i = 0; i < arrayObjectUsers.length; i++) {
                                        b = arrayObjectUsers[i];
                                        if(arrayObjectUsers2.indexOf(b) == -1){
                                            remove(arrayObjectUsers[i]);
                                        }
                                };
                            }

                            index = 0;
                            for (var i = 0; i < gridPanelObjects.getItems().length; i++) {
                                idObject = gridPanelObjects.getItems()[i].getData().obj_uid;
                                index = arrayDynaformInputDocumentID.indexOf(idObject);
                                if(index <= -1){
                                    saveItemDyanformInputDocuments(gridPanelObjects.getItems()[i]);
                                }else{
                                    updateItem(gridPanelObjects.getItems()[i],i);
                                }
                            };

                            for (var i = 0; i < arrayObjectRemovedSteps.length; i++) {
                                for (var j = 0; j < arrayDynaformInputDocumentObject.length; j++) {
                                    index = (arrayObjectRemovedSteps[i] == arrayDynaformInputDocumentObject[j].obj_uid) ? 0 : 1;
                                    if (index == 0) {
                                        objType = arrayDynaformInputDocumentObject[j].obj_type.toLowerCase();
                                        baseEndPointID = (objType ==="dynaform")? arrayDynaformInputDocumentObject[j].pud_uid : arrayDynaformInputDocumentObject[j].pui_uid;
                                        restClient = new PMRestClient({
                                            typeRequest: 'post',
                                            multipart: true,
                                            data: {
                                                "calls": [
                                                    {
                                                        "url": 'process-supervisor/' + objType + '/' + baseEndPointID,  
                                                        "method": 'DELETE'
                                                    }
                                                ]
                                            },
                                            functionSuccess: function (xhr, response) {},
                                            functionFailure: function (xhr, response) {}
                                        });
                                        restClient.executeRestClient();
                                        break;
                                    }
                                };
                            };

                            assigmentWindow.close();
                        }
                        else{
                            assigmentWindow.close();
                        }
                    },
                    buttonType : "success"
                }
            ],
            visibleFooter : true,
            buttonPanelPosition : "bottom",
            footerAlign : "right"
        });       
        
        var message_window = new PMUI.ui.MessageWindow({
            id: "messageWindowCancel",
            width: 490,
            title: "Supervisors".translate(),
            windowMessageType: "warning",
            bodyHeight: "auto",
            message: 'Are you sure you want to discard your changes?'.translate(),
            footerItems: [{
                    id: "messageWindowNo",
                    text: "No".translate(),
                    handler: function ()
                    {
                        message_window.close();
                    },
                    buttonType: "error"
                },
                {
                    id: "messageWindowYes",
                    text: "Yes".translate(),
                    handler: function ()
                    { 
                        message_window.close();
                        assigmentWindow.close();
                    },
                    buttonType: "success"
                }
            ]
        });

        var restClient = new PMRestClient({
            endpoint: 'projects',
            typeRequest: 'get',
            messageError: 'There are problems, please try again.'.translate(),
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        });

        var assigmentPanelUser = new PMUI.core.Panel({
            layout: "vbox",
            width:"49%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-white'
                ]
            }
        });
        var assigmentPanelUserList = new PMUI.core.Panel({
            layout: "vbox",
            width:"50%",
            style: {
                cssClasses: [
                    'mafe-panel-assignment-smooth'
                ]
            }
        });
        var assigmentPanelGlobal = new PMUI.core.Panel({
            layout: 'hbox',
            width:DEFAULT_WINDOW_WIDTH,
            style: {
                cssClasses: [
                    'mafe-assigment-panel-global'
                ]
            }
        });

        var panelTitleUser = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var titleUser = new PMUI.ui.TextLabel({
            id: 'titleUser',
            label: ' ',
            textMode: 'plain',
            text: 'Available Users List'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelSearchUser = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var searchGridUser = new PMUI.field.TextField({
            id: 'searchGridUser',
            label: ' ',
            placeholder: 'Search ...'.translate()
        });
        var panelGridUser = new PMUI.core.Panel({layout: 'hbox'});
        var buttonsUsers = new PMUI.field.OptionsSelectorField({
            id: 'buttonsUsers',
            orientation: 'horizontal',
            items: [{
                    text: 'All'.translate(),
                    selected: true,
                    value: 'all',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                }, {
                    text: 'Users'.translate(),
                    value: 'user',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                }, {
                    text: 'Groups'.translate(),
                    value: 'group',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }
            ],
            listeners: {
                select: function (item, event) {
                    groupRows(gridUsers, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUsers = new PMUI.grid.GridPanel({
            id: 'gridUsers',
            pageSize: pageSizeAssignment,
            behavior: 'dragdropsort',
            filterable: true,
            filterPlaceholder: 'Search ...'.translate(),
            emptyMessage : 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
			dynamicLoad: {
				keys : {
					server : HTTP_SERVER_HOSTNAME,
					projectID : PMDesigner.project.projectId,
					workspace : WORKSPACE,
					accessToken : PMDesigner.project.tokens.access_token,
					endPoint : 'project/' + PMDesigner.project.id +'/available-process-supervisors/paged'
				}
			},
			customDataRest : function(data){
				var i;
				for ( i=0;i<data.length;i+=1 ) {
					if (data[i].obj_type == "group") {
						data[i].available = data[i].grp_name;
					} else {
						data[i].available = data[i]["usr_firstname"] + " "+ data[i]["usr_lastname"] +" ("+data[i]["usr_username"]+")";
					}
				}
				return data; 
			},
			columns: [{
                    id: 'gridUsersButtonLabel',
                    title: '',
                    dataType: 'button',
                    width: '10%',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
						var option, select;
						select = document.createElement("span");
						select.id = "list-usersIngroup";
						option = document.createElement("span");
						option.id = "list-usersIngroup-iem"
						if (row.getData()["obj_type"] === 'group') {
							var restClient = new PMRestClient({
								typeRequest: 'get',
								functionSuccess: function (xhr, response) {
									var optionClone;
									for (var i = 0; i < response.length; i++) {							
										if ( i == 10 ) {
											optionClone = option.cloneNode(false);
											optionClone.innerHTML = "<b style='float: right'>. . .<b>";
											select.appendChild(optionClone);	
										} else {
											optionClone = option.cloneNode(false);
											optionClone.textContent = "- "+response[i].usr_firstname + ' ' + response[i].usr_lastname;
											optionClone.title = response[i].usr_firstname + ' ' + response[i].usr_lastname;
											select.appendChild(optionClone);
										}
									}
									if(!optionClone){
										optionClone = option.cloneNode(false);
										optionClone.textContent = "No users".translate();
										select.appendChild(optionClone);
									}

									quickMessageWindow.show($(row.html).find('a')[0], select);
								},
								functionFailure: function (xhr, response)
								{
									PMDesigner.msgWinError(response.error.message);
								},
								messageError: 'There are problems saving the assigned user, please try again.'.translate()
							});
							restClient.setBaseEndPoint('group/' + row.getData()["grp_uid"]+ '/supervisor-users?start=0&limit=11');
							restClient.executeRestClient();
						}
					}
                }, {
                    title: '',
                    dataType: 'string',
                    columnData: 'available',
                    alignmentCell: 'left',
                    width: '330px'
                }, {
                    id: 'gridUsersButtonAssign',
                    title: '',
                    dataType: 'button',
                    width: '19%',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-edit-assign'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        row.getCells()[0].content.style.addClasses([row.getData()["obj_type"] === 'user' ? 'button-icon-user' : 'button-icon-group']);
                        return ''.translate();
                    },
                    onButtonClick: function (row, grid) {
                        grid = (grid != null) ? grid : gridUsers;						
                        assignee(row);
						gridUserList.goToPage(gridUserList.currentPage);
						grid.goToPage(grid.currentPage);
						flashMessage.setMessage("The user/group was successfully removed".translate());
						flashMessage.setAppendTo(assigmentWindow.getHTML());
						flashMessage.show();
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
            },
            onDrop: function (a, row) {
				grid = this;
				remove(row);
				gridUserList.goToPage(gridUserList.currentPage);
				grid.goToPage(grid.currentPage);
				flashMessage.setMessage("The user/group was successfully removed".translate());
				flashMessage.setAppendTo(assigmentWindow.getHTML());
				flashMessage.show();
				return false;
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });

        var panelTitleUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var titleUserList = new PMUI.ui.TextLabel({
            id: 'titleUserList',
            textMode: 'plain',
            text: 'Assigned supervisors list'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });
        var panelSearchUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var searchGridUserList = new PMUI.field.TextField({
            id: 'searchGridUserList',
            label: ' ',
            placeholder: 'Search ...'.translate()
        });
        var panelGridUserList = new PMUI.core.Panel({
            layout: 'hbox'
        });
        var radioUsersList = new PMUI.field.RadioButtonGroupField({
            id:'idRadioUsersList',
            controlPositioning: 'horizontal',
            maxDirectionOptions: 3,
            options: [
                {
                    label: "View all".translate(),
                    value: "all"
                },
                {
                    label: "View users".translate(),
                    value: "user"
                },
                {
                    label: "View groups".translate(),
                    value: "group"
                }
            ],
            onChange: function(newVal, oldVal) {
				switch (newVal){
					case "user" :
						gridUserList.typeList = "user".translate();
					break;
					case "group":
						gridUserList.typeList = "group".translate();
					break;
					default:
						gridUserList.typeList = "";
					break;
				}
				gridUserList.goToPage(0);
            },
            required: true,
            value: "all"
        });
        var buttonsUserList = new PMUI.field.OptionsSelectorField({
            id: 'buttonsUserList',
            orientation: 'horizontal',
            items: [{
                    text: 'All'.translate(),
                    value: 'all',
                    selected: true,
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-all'
                        ]
                    }
                }, {
                    text: 'Users'.translate(),
                    value: 'user',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-user'
                        ]
                    }
                }, {
                    text: 'Groups'.translate(),
                    value: 'group',
                    style: {
                        cssClasses: [
                            'pmui-switch-icon-group'
                        ]
                    }
                }

            ],
            listeners: {
                select: function (item, event) {                    
                    groupRows(gridUserList, item.value);
                }
            },
            style: {
                cssClasses: [
                    'mafe-assigment-buttons'
                ]
            }
        });
        var gridUserList = new PMUI.grid.GridPanel({
            id: 'gridUserList',
            pageSize: pageSizeAssignment,
            behavior: 'dragdropsort',
            filterPlaceholder: 'Search ...'.translate(),
            filterable:true,
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar : function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            emptyMessage: function () {
                var div = document.createElement('div');
                var span = document.createElement('span');
                div.appendChild(span);
                div.className = 'mafe-grid-panel-empty';
                span.innerHTML = 'Drag & Drop a User or a Group here'.translate();
                return div;
            },
            onEmpty: function (grid, cell) {
                gridUserList.dom.tableContainer.style.overflow = 'hidden';
            },
			dynamicLoad: {
				keys : {
					server : HTTP_SERVER_HOSTNAME,
					projectID : PMDesigner.project.projectId,
					workspace : WORKSPACE,
					accessToken : PMDesigner.project.tokens.access_token,
					endPoint : 'project/' + PMDesigner.project.id + '/process-supervisors/paged'
				}
			},
			customDataRest : function(data){
				var i;
				for ( i=0;i<data.length;i+=1 ) {
					if (data[i].pu_type == "GROUP_SUPERVISOR") {
						data[i].assignee = data[i].grp_name;
					} else {
						data[i].assignee = data[i]["usr_firstname"] + " "+ data[i]["usr_lastname"] +" ("+data[i]["usr_username"]+")";
					}
				}
				return data; 
			},
            columns: [{
                    id: 'gridUserListButtonLabel',
                    title: '',
                    width: '10%',
                    dataType: 'button',
                    buttonLabel: function (row, data) {
                        return data.lastName;
                    },
                    buttonStyle: {
                        cssClasses: [
                            'mafe-grid-button'
                        ]
                    },
                    onButtonClick: function (row, grid) {
						var option, select;
						select = document.createElement("span");
						select.id = "list-usersIngroup";
						option = document.createElement("span");
						option.id = "list-usersIngroup-iem"
						if (row.getData()["pu_type"] === "GROUP_SUPERVISOR") {
							var restClient = new PMRestClient({
								typeRequest: 'get',
								functionSuccess: function (xhr, response) {
									var optionClone;
									for (var i = 0; i < response.length; i++) {
										if ( i == 10 ) {
											optionClone = option.cloneNode(false);
											optionClone.innerHTML = "<b style='float: right'>. . .<b>";
											select.appendChild(optionClone);	
										} else {
											optionClone = option.cloneNode(false);
											optionClone.textContent = "- "+response[i].usr_firstname + ' ' + response[i].usr_lastname;
											optionClone.title = response[i].usr_firstname + ' ' + response[i].usr_lastname;
											select.appendChild(optionClone);
										}
									}
									if(!optionClone){
										optionClone = option.cloneNode(false);
										optionClone.textContent = "No users".translate();
										select.appendChild(optionClone);
									}

									quickMessageWindow.show($(row.html).find('a')[0], select);
								},
								functionFailure: function (xhr, response)
								{
									PMDesigner.msgWinError(response.error.message);
								},
								messageError: 'There are problems saving the assigned user, please try again.'.translate()
							});
							restClient.setBaseEndPoint('group/' + row.getData()["grp_uid"]+ '/supervisor-users?start=0&limit=11');
							restClient.executeRestClient();
						}
                    }
                }, {
                    title: '',
                    dataType: 'string',
                    columnData: 'assignee',
                    width: '330px',
                    alignmentCell: 'left'
                }, {
                    id: 'gridUserListButtonDelete',
                    title: '',
                    dataType: 'button',
                    width: '10%',
                    buttonStyle: {
                        cssClasses: [
                            'mafe-button-delete-assign'
                        ]
                    },
                    buttonLabel: function (row, data) {
                        row.getCells()[0].content.style.addClasses([row.getData()["pu_type"] === "SUPERVISOR" ? 'button-icon-user' : 'button-icon-group']);
                        return ''.translate();
                    },
                    onButtonClick: function (row, grid) {			
                        grid = (grid != null) ? grid : gridUsers;						
                        remove(row);
						gridUsers.goToPage(gridUsers.currentPage);
						grid.goToPage(grid.currentPage);
						flashMessage.setMessage("Assignee saved successfully".translate());
						flashMessage.setAppendTo(assigmentWindow.getHTML());
						flashMessage.show();
                    }
                }
            ],
            onDropOut: function (item, origin, destiny) {
            },
            onDrop: function (grid, row) {
				var  dataRow = {};
				grid = this;
				assignee(row);
				gridUsers.goToPage(gridUsers.currentPage);
				grid.goToPage(grid.currentPage);
				flashMessage.setMessage("Assignee saved successfully".translate());
				flashMessage.setAppendTo(assigmentWindow.getHTML());
				flashMessage.show();
				return false;
            },
            style: {
                cssClasses: [
                    'mafe-designer-assigment-grid'
                ]
            }
        });
        var radioUsers = new PMUI.field.RadioButtonGroupField({
            id:'idRadioUsers',
            controlPositioning: 'horizontal',
            maxDirectionOptions: 3,
            options: [
                {
                    label: "View all".translate(),
                    value: "all"
                },
                {
                    label: "View users".translate(),
                    value: "user"
                },
                {
                    label: "View groups".translate(),
                    value: "group"
                }
            ],
            onChange: function(newVal, oldVal) {
				switch (newVal){
					case "user" :
						gridUsers.typeList = "user";
					break;
					case "group":
						gridUsers.typeList = "group";
					break;
					default:
						gridUsers.typeList = "";
					break;
				}
				gridUsers.goToPage(0);
            },
            required: true,
            value: "all",
            style: {
                cssProperties :{
                    'margin-top':'15px'
                }
            }
        });
        var applyStylesRadioButtonGroupField = function () {
            $('#idRadioUsers .pmui-field-control-table').css("border", "none");
            $('#idRadioUsers').css("margin-top", "12px");
            radioUsers.defineEvents();

            $('#idRadioUsersList .pmui-field-control-table').css("border", "none");
            $('#idRadioUsersList').css("margin-top", "12px");
            radioUsersList.defineEvents();             
        };

        var applyStylesForToolbar = function (){
            $('.pmui-gridpanel-toolbar')[0].childNodes[0].style.width="300px";
            $('.pmui-gridpanel-toolbar')[1].childNodes[0].style.width="300px";
            $('.pmui-gridpanel-toolbar')[0].childNodes[0].style.backgroundColor="#f5f5f5";
            $('.pmui-gridpanel-toolbar')[1].childNodes[0].style.backgroundColor="#f5f5f5";
            $('#assigmentUserWindow')[0].childNodes[1].childNodes[0].childNodes[1].style.backgroundColor="white";
            $('#gridUserList')[0].style.backgroundColor="white";
            $('#gridUserList').css("width", "452px");
            $('#gridUsers').css({"width" : "452px", "height" : "175px"});
            $('.pmui-window-body .pmui-panel:eq(9)').css({'width':'1000px','border-top':'1px solid #cdd2d5','margin-top':'36px','height':'80px'});
        }; 

        var applyStyles = function () { 
            applyStylesRadioButtonGroupField();
            gridUsers.dom.toolbar.appendChild(radioUsers.getHTML());
            gridUsers.dom.toolbar.style.height = "76px";
            gridUserList.dom.toolbar.appendChild(radioUsersList.getHTML());
            gridUserList.dom.toolbar.style.height = "76px";
            radioUsers.dom.labelTextContainer.style.display = "none";
            radioUsersList.dom.labelTextContainer.style.display = "none";
            gridUsers.hideHeaders();
            gridUserList.hideHeaders();
            assigmentPanelUserList.setHeight('100%');
            gridUsers.filterControl.html.style.width = "300px";
            gridUserList.filterControl.html.style.width = "300px";
            assigmentWindow.getItems()[0].getItems()[0].html.style.borderRight="1px solid #cdd2d5";
            assigmentWindow.getItems()[0].getItems()[0].html.style.borderBottom="1px solid #cdd2d5";
            assigmentWindow.getItems()[0].getItems()[1].html.style.borderBottom="1px solid #cdd2d5";
            assigmentWindow.getItems()[0].getItems()[0].html.style.height="415px";
            assigmentWindow.getItems()[0].getItems()[1].html.style.height="415px";
            assigmentWindow.getItems()[0].getItems()[1].html.style.paddingLeft="10px";
            $('#gridPanelObjects .pmui-gridpanel-tableContainer').css({'height':'245px'});
            $(".pmui-gridpanel-footer").addClass("pmui-gridpanel-footer-dinamic");
        };
        var loadUsers = function (response) {
            for (var i = 0; i < response.length; i++) {
                if (response[i].obj_type === 'user') {
                    gridUsers.addDataItem({
                        sup_uid: response[i].usr_uid,
                        sup_name: response[i].usr_firstname + ' ' + response[i].usr_lastname,
                        obj_type: response[i].obj_type
                    });
                }
                if (response[i].obj_type === 'group') {
                    gridUsers.addDataItem({
                        sup_uid: response[i].grp_uid,
                        sup_name: response[i].grp_name,
                        obj_type: response[i].obj_type
                    });
                }
            }
            gridUsers.sort('sup_name', 'asc');            
        };
        var loadUsersList = function (response) {
            for (var i = 0; i < response.length; i++) {
                if (response[i].pu_type === 'SUPERVISOR') {
                    gridUserList.addDataItem({
                        sup_uid: response[i].usr_uid,
                        sup_name: response[i].usr_firstname + ' ' + response[i].usr_lastname,
                        obj_type: 'user',
                        pu_type: response[i].pu_type,
                        pu_uid: response[i].pu_uid
                    });
                }
                if (response[i].pu_type === 'GROUP_SUPERVISOR') {
                    gridUserList.addDataItem({
                        sup_uid: response[i].grp_uid,
                        sup_name: response[i].grp_name,
                        obj_type: 'group',
                        pu_type: response[i].pu_type,
                        pu_uid: response[i].pu_uid
                    });
                }
            }
            gridUserList.sort('sup_name', 'asc');            
        };
        var groupRows = function (grid, value) {
            if (grid.memorystack === undefined) {
                grid.memorystack = [];
            }
            var i, items = grid.getItems();
            while (grid.memorystack.length > 0) {
                grid.addItem(grid.memorystack.pop());
            }
            if (value !== 'all') {
                for (i = 0; i < items.length; i++) {
                    if (items[i].getData().obj_type !== value) {
                        grid.memorystack.push(items[i]);
                        grid.removeItem(items[i]);
                    }
                }
            }
            grid.sort('sup_name', 'asc');
        };
        var assignee = function (row) {
            var restClient = new PMRestClient({
                endpoint: 'process-supervisor',
                typeRequest: 'post',
                data: {
                    usr_uid: row.getData()["obj_type"]=="group"? row.getData()["grp_uid"] : row.getData()["usr_uid"],
                    pu_type: row.getData()["obj_type"] === 'group' ? 'GROUP_SUPERVISOR' : 'SUPERVISOR'
                },
                functionSuccess: function (xhr, response) {
                    row.data.customKeys.pu_type = response.pu_type;
                    row.data.customKeys.pu_uid = response.pu_uid;
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: 'There are problems saving the assigned user, please try again.'.translate()
            });
            restClient.executeRestClient();
        };
        var remove = function (row) {
            var restClient = new PMRestClient({
                endpoint: 'process-supervisor/' + row.getData()["pu_uid"],
                typeRequest: 'remove',
                functionSuccess: function () {
                },
                functionComplete: function () {
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.executeRestClient();
        };

        //steps Dynaforms and InputDocuments
        titleTreeObjects = new PMUI.ui.TextLabel({
            id: "titleTreeObjects",
            textMode: 'plain',
            text: 'Available Objects'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ]
            }
        });

        titleGridObjects = new PMUI.ui.TextLabel({
            id: "titleGridObjects",
            textMode: 'plain',
            text: 'Assigned objects'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-assigment-title'
                ],
                cssProperties: {
                    'left': 40
                }
            }
        });

        panelLabelObjects = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            fieldset: true,
            items: [
                titleTreeObjects,
                titleGridObjects
            ],
            style: {
                cssProperties: {
                    'margin-bottom': 2,
                    'margin-left': 50
                }
            },
            layout: "hbox"
        });

        panelObjects = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            height: 30,
            fieldset: true,
            items: [
                panelLabelObjects
            ],
            layout: "vbox"
        });

        //Objects
        orderDataTree = function (data) {
            var items = [];
            var type = ['DYNAFORM', 'INPUT-DOCUMENT'];
            var label = ['Dynaform', 'Input Document'];
            for (var i = 0; i < type.length; i++) {
                items = [];
                for (var j = 0; j < data.length; j++) {
                    if (type[i] === data[j].obj_type) {
                        if(data[j].obj_type=="DYNAFORM"){
                            items.push({
                                step_type_obj: label[i].translate(),
                                obj_label: label[i].translate(),
                                obj_title: data[j]['dyn_title'],
                                obj_type: data[j]['obj_type'],
                                obj_uid: data[j]['obj_uid'],
                                dyn_uid: data[j]['dyn_uid']
                            });
                        }else{ 
                            if(data[j].obj_type=="INPUT-DOCUMENT"){
                                items.push({
                                    step_type_obj: label[i].translate(),
                                    obj_label: label[i].translate(),
                                    obj_title: data[j]['inp_doc_title'],
                                    obj_type: data[j]['obj_type'],
                                    obj_uid: data[j]['obj_uid'],
                                    obj_uid: data[j]['obj_uid'],
                                    inp_uid: data[j]['inp_doc_uid']
                                });
                            }
                        }
                    }
                }
                if (items.length === 0) {
                    dataTree.push({
                        obj_title: label[i].translate(),
                        items: [{obj_title: 'N/A'.translate(), obj_uid: ''}]
                    });
                } else {
                    dataTree.push({
                        obj_title: label[i].translate(),
                        items: items
                    });
                }
            }
        };

        loadGridCaseTacker = function (data) {
            dataOrder = new Array();
            for (var i = 0; i < data.length; i++) {
                for (var j = 0; j < data.length; j++) {
                    positionIndex = (data[j]['obj_type'] == 'DYNAFORM') ? data[j].pud_position : data[j].pui_position;
                    if(positionIndex == (i+1)){
                        dataOrder.push(data[j]);
                        switch (dataOrder[i]['obj_type']) {
                            case 'DYNAFORM':
                                label = dataOrder[i]['dyn_title'].translate();
                                break;
                            case 'INPUT-DOCUMENT':
                                label = dataOrder[i]['input_doc_title'].translate();
                                break;
                            default:
                                break;
                        }
                        dataOrder[i]['obj_title'] = label;
                        break;
                    }
                }                
            }
            gridPanelObjects.setDataItems(dataOrder);
        };        

        getValuesAssignmentSteps = function () {
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    "calls": [
                        {
                            "url": "process-supervisor/available-assignmentsteps",
                            "method": 'GET'
                        },
                        {
                            "url": "process-supervisor/assignmentsteps",
                            "method": 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    dataTree = [];
                    orderDataTree(response[0].response);
                    treePanelObjects.setDataItems(dataTree);
                    loadGridCaseTacker(response[1].response);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.executeRestClient();
        };

        var treePanelObjects = new PMUI.panel.TreePanel({
            id: 'treePanelObjects',
            proportion: 0.5,
            filterable: true,
            filterPlaceholder: 'Text to search'.translate(),
            emptyMessage: 'No records found'.translate(),
            style: {cssClasses: ['itemsSteps']},
            nodeDefaultSettings: {
                behavior: "drag",
                labelDataBind: 'obj_title',
                itemsDataBind: 'items',
                collapsed: false,
                childrenDefaultSettings: {
                    labelDataBind: 'obj_title',
                    autoBind: true
                },
                autoBind: true
            }
        });

        //Save Item (Drop)
        saveItemDyanformInputDocuments = function (rowStep) {
            rowStep = rowStep.getData();
            if(rowStep.obj_type === "DYNAFORM"){
                data = {
                    "dyn_uid": rowStep.obj_uid,
                    "pud_position": rowStep.obj_position
                };                
            }else{
                data = {
                    "inp_doc_uid": rowStep.obj_uid,
                    "pui_position": rowStep.obj_position
                };
            }          

            restClient = new PMRestClient({
                endpoint: 'process-supervisor/' + rowStep.obj_type.toLowerCase(),
                typeRequest: 'post',
                data: data,
                functionSuccess: function (xhr, response) {},
                functionFailure: function (xhr, response) {}
            });
            restClient.executeRestClient();
            return data;
        };

        //Update SORT tree
        updateItem = function (rowStep,i) {
            rowStep = rowStep.getData();
            rowStep.obj_position = i + 1;
            var objType = rowStep.obj_type.toLowerCase(), baseEndPointType, baseEndPointID;
            baseEndPointType = (objType ==="dynaform")? 'dynaforms' : 'input-documents';
            baseEndPointID = (objType ==="dynaform")? rowStep.pud_uid : rowStep.pui_uid;
            if(objType ==="dynaform"){
                rowStep.pud_position = rowStep.obj_position;
            }else{
                rowStep.pui_position = rowStep.obj_position;
            }

            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    "calls": [
                        {
                            "url": 'process-supervisor/' + objType + "/" + baseEndPointID,
                            "method": 'PUT',
                            "data": rowStep
                        }/*
                        {
                            "url": 'process-supervisor/' + baseEndPointType,
                            "method": 'GET'
                        }*/
                    ]
                },
                functionSuccess: function (xhr, response) {},
                functionFailure: function (xhr, response) {}
            });
            restClient.executeRestClient();
        };

        var gridPanelObjects = new PMUI.grid.GridPanel({
            id: 'gridPanelObjects',
            proportion: 1.5,
            visibleFooter: false,
            filterable: false,
            style: {
                cssClasses: ['itemsSteps']
            },
            filterPlaceholder: 'Search ...'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            behavior: 'dragdropsort',
            columns: [
                {
                    title: 'Title'.translate(),
                    dataType: 'string',
                    width: 330,
                    alignment: "left",
                    columnData: "obj_title",
                    sortable: false,
                    alignmentCell: 'left'
                },
                {
                    title: 'Type'.translate(),
                    dataType: 'string',
                    width: 120,
                    alignment: "left",
                    columnData: "obj_type",
                    sortable: false,
                    alignmentCell: 'left'
                },/*
                {
                    id: 'gridPanelObjectsButtonProperties',
                    title: '',
                    dataType: 'button',
                    buttonLabel: " ".translate(),
                    iconPosition: "center",
                    buttonStyle: {cssClasses: ['mafe-button-edit']},
                    buttonTooltip: 'Edit Properties'.translate(),
                    onButtonClick: function (row, grid) {
                    }
                },*/
                {
                    id: 'gridPanelObjectsButtonDelete',
                    title: '',
                    dataType: 'button',
                    buttonLabel: "".translate(),
                    buttonStyle: {cssClasses: ['mafe-button-delete-assign']},
                    buttonTooltip: 'Remove Object'.translate(),
                    onButtonClick: function (row, grid) {
                        flagEdit = 1;
                        index = arrayDynaformInputDocumentID.indexOf(row.getData().obj_uid);
                        var rowStep = row.getData();
                        var treePanelItems = treePanelObjects.getItems();

                        if (index > -1) {
                            arrayObjectRemovedSteps.push(row.getData().obj_uid);
                            arrayDynaformInputDocumentID.splice(index, 1);
                        }
                        function removeRowClass (treeNode) {
                            var childNodeEl = $(treeNode.html).find('.pmui-gridpanelrow');
                            childNodeEl.removeClass('pmui-gridpanelrow');
                        }
                        function removeEmptyNode (indexNode) {
                            var parentNode = treePanelItems[indexNode];
                            if (parentNode.getItems().length == 1 &&
                                parentNode.getItems()[0].getData()['obj_uid'] == "") {
                                parentNode.removeItem(0);
                            }
                            parentNode.addItem(row);
                            removeRowClass(parentNode);
                        }
                        if(rowStep.obj_type === "DYNAFORM"){
                            removeEmptyNode(0);
                        }else{
                            removeEmptyNode(1);
                        }
                        grid.removeItem(row);
                    }
                }
            ],
            onDrop: function (grid, item, index) {
                if (item.getData()['obj_uid'] == ""){
                    return false;

                }
                var parentItems = item.parent.getItems();
                if (parentItems.length == 1 && item.getData()['obj_uid'] != "") {
                    item.parent.addDataItem(
                        {obj_title: 'N/A'.translate(), obj_uid: ''}
                    );
                    item.parent.behaviorObject.draggedObject = item;
                }
                flagEdit = 1;
                rowStep = item.getData();
                rowStep.obj_position = index + 1;
                item.setData(rowStep);
                index = arrayObjectRemovedSteps.indexOf(item.getData().obj_uid);

                if (index > -1) {
                    arrayDynaformInputDocumentID.push(item.getData().obj_uid);
                    arrayObjectRemovedSteps.splice(index, 1);
                }
            },
            onSort: function (grid, item, index) {
                flagEdit = 1;
                rowStep = item.getData();
                rowStep.obj_position = index + 1;
            }
        });

        //principal Container Steps
        var panelContainerObjects = new PMUI.core.Panel({
            id:"panelContainerObjects",
            width: DEFAULT_WINDOW_WIDTH,
            height: 250,
            fieldset: true,
            items: [treePanelObjects,gridPanelObjects],
            layout: "hbox",
            style: {
                cssProperties :{
                    'margin-top':'-40px'
                }
            }
        });

        assigmentWindow.open();
        panelTitleUser.addItem(titleUser);
        panelTitleUserList.addItem(titleUserList);
        assigmentWindow.body.style.overflowX = "hidden";

        panelGridUser.addItem(gridUsers);
        panelGridUserList.addItem(gridUserList);

        assigmentPanelGlobal.addItem(assigmentPanelUser);
        assigmentPanelGlobal.addItem(assigmentPanelUserList);
        assigmentWindow.addItem(assigmentPanelGlobal);

        assigmentWindow.addItem(panelObjects);
        assigmentWindow.addItem(panelContainerObjects);
        getValuesAssignmentSteps();
       
        gridPanelObjects.style.addProperties({overflow: 'auto'});
        gridPanelObjects.style.addProperties({float: 'right'});
        gridPanelObjects.setWidth(630);
        gridPanelObjects.setHeight(250);
        $('#gridPanelObjects').css("margin-right", "32px");
        $('#treePanelObjects').css("margin-left", "10px");

        assigmentPanelUser.addItem(panelTitleUser);
        assigmentPanelUser.addItem(panelSearchUser);
        assigmentPanelUser.addItem(radioUsers);
        assigmentPanelUser.addItem(panelGridUser);

        assigmentPanelUserList.addItem(panelTitleUserList);
        assigmentPanelUserList.addItem(panelSearchUserList);
        assigmentPanelUserList.addItem(radioUsersList);
        assigmentPanelUserList.addItem(panelGridUserList);
		gridUsers.dom.tableContainer.style.height = "245px";
		gridUserList.dom.tableContainer.style.height = "245px";
		gridUsers.goToPage(0);
		gridUserList.goToPage(0);
        assigmentWindow.defineEvents();
        applyStyles();
        treePanelObjects.style.addProperties({overflow: 'auto'});
        
        //loadServerData();

        applyStylesForToolbar(); 
        usersgrid = gridUsers;
        for (var i = 0; i < usersgrid.getItems().length; i++) {
            arrayObjectUsers2[i] = usersgrid.getItems()[i];
        };
        userslist = gridUserList; 
        for (var i = 0; i < userslist.getItems().length; i++) {
            arrayObjectUserList2[i] = userslist.getItems()[i];
        }; 
        gridpanelobj = gridPanelObjects; 
        for (var i = 0; i < gridpanelobj.getItems().length; i++) {
            arrayDynaformInputDocumentID[i] = gridpanelobj.getItems()[i].getData().obj_uid;
            arrayDynaformInputDocumentObject[i] = gridpanelobj.getItems()[i].getData();
        };     
    };
}());
(
    function(){
        PMDesigner.propertiesProcess = function () {
            var responseProperties = null, clickedClose;

            getValuesProperties = function () {
                restClient = new PMRestClient({
                    typeRequest : 'post',
                    multipart: true,
                    data : {
                        "calls": [
                            {
                                "url" : "project/" + PMDesigner.project.id + "/dynaforms",
                                "method" : 'GET'
                            },
                            {
                                "url" : "calendars",
                                "method" : 'GET'
                            },
                            {
                                "url" : "project/categories",
                                "method" : 'GET'
                            },
                            {
                                "url" : "project/" + PMDesigner.project.id + "/file-manager?path=templates",
                                "method" : 'GET'
                            },
                            {
                                "url" : "project/" + PMDesigner.project.id + "/triggers",
                                "method" : 'GET'
                            },
                            {
                                "url" : "project/" + PMDesigner.project.id + "/process",
                                "method" : 'GET'
                            }
                        ]
                    },
                    functionSuccess : function (xhr, response) {
                        loadDynaforms(response[0].response);
                        loadCalendar(response[1].response);
                        loadCategory(response[2].response);
                        loadTemplate(response[3].response);
                        loadTriggers(response[4].response);
                        loadTypeProcess(response[5].response);
                        loadProperties(response[5].response);
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);
                    }
                });
                restClient.setBaseEndPoint('');
                restClient.executeRestClient();
            };
			isDirtyFormProcess = function (){
				if (formEditProcess.isDirty()){
					var message_window = new PMUI.ui.MessageWindow({
						id: "cancelMessageTriggers",
						windowMessageType: 'warning',
						width: 490,
						title: "Edit process".translate(),
						message: 'Are you sure you want to discard your changes?'.translate(),
						footerItems: [
							{
								text: "No".translate(),
								handler: function() {
									message_window.close();
								},
								buttonType : "error"
							},
							{
								text: "Yes".translate(),
								handler: function() {
									message_window.close();
									propertiesWindow.close();
								},
								buttonType : "success"
							}
						]
					});
					message_window.open();
					message_window.showFooter();
				} else {
					propertiesWindow.close();
				}
			};
            saveProperties = function (data) {
                restClient = new PMRestClient({
                    typeRequest : 'update',
                    data : data,
                    messageSuccess : "Properties saved successfully".translate(),
                    functionSuccess: function (xhr, response) {
                        propertiesWindow.close();

                        PMDesigner.project.setProjectName(data.pro_title);
                        PMDesigner.project.setDescription(data.pro_description);
                        PMDesigner.project.dirty = true;
                    },
                    functionFailure: function (xhr, response)
                    {
                        PMDesigner.msgWinError(response.error.message);

                        PMDesigner.project.dirty = false;
                    }
                });
                restClient.setEndpoint("process");
                restClient.executeRestClient();
            }

            propertiesWindow = new PMUI.ui.Window({
                id:"propertiesProcessWindow",
                title: "Edit process".translate(),
                width: DEFAULT_WINDOW_WIDTH,
                height: DEFAULT_WINDOW_HEIGHT,
                footerHeight: 'auto',
                bodyHeight: "auto",
                modal:true,
                buttonPanelPosition: "bottom",
                footerAlign : "right",
				onBeforeClose : function (){
					clickClose = true;
					isDirtyFormProcess();
				},
                buttons: [
                    {
                        id:'outputWindowDocButtonCancel',
                        text: "Cancel".translate(),
                        buttonType:"error",
                        handler: function() {
							clickedClose = false;
							isDirtyFormProcess();
                        }
                    },
                    {
                        id:'outputWindowDocButtonSave',
                        text: "Save".translate(),
                        buttonType:"success",
                        handler: function() {
                            if (!formEditProcess.isValid()) {
                                return;
                            }
                            if ( (navigator.userAgent.indexOf("MSIE")!=-1) || (navigator.userAgent.indexOf("Trident")!=-1) ){
                                var dataForm = getData2PMUI(formEditProcess.html);
                            } else {
                                var dataForm = formEditProcess.getData();
                            }
                            dataForm.pro_debug = checkDebug.controls[0].selected?1:0;
                            dataForm.pro_show_message = checkHideCase.controls[0].selected?1:0;
                            dataForm.pro_subprocess =checkSubProcess.controls[0].selected?1:0;
                            functionAssignmentUsers = function (xhr, response) {
                            };

                            saveProperties(dataForm);
                         }
                    }
                ]
            });

            textTitle = new PMUI.field.TextField({
                label: "Title".translate(),
                id:'textTitle',
                name: 'pro_title',
                labelWidth: "35%",
                placeholder: 'a text here'.translate(),
                controlsWidth:"300px",
                required: true
            });

            textDescription = new PMUI.field.TextAreaField({
                id:'textDescription',
                name: 'pro_description',
                label: "Description".translate(),
                labelWidth: "35%",
                controlsWidth:"500px",
                //maxLength: 2,
                rows: 150,
                style: {cssClasses: ['mafe-textarea-resize']}
            });

            dropCalendar = new PMUI.field.DropDownListField({
                id: "dropCalendar",
                name: "pro_calendar",
                labelWidth: "35%",
                label: "Calendar".translate(),
                controlsWidth:"300px",
                valueType: 'string',
                onChange: function (newValue, prevValue){
                }
            });

            dropProcessCat = new PMUI.field.DropDownListField({
                id: "dropProcessCat",
                name: "pro_category",
                controlsWidth:"300px",
                labelWidth: "35%",
                label: "Process Category".translate(),
                valueType: 'string',
                onChange: function (newValue, prevValue){
                }
            });

            dropDynaform = new PMUI.field.DropDownListField({
                id: "dropDynaform",
                name: "pro_summary_dynaform",
                controlsWidth:"300px",
                labelWidth: "35%",
                label: "Dynaform to show a case summary".translate(),
                valueType: 'string',
                onChange: function (newValue, prevValue){
                }
            });

            dropRouting = new PMUI.field.DropDownListField({
                id: "dropRouting",
                name: "pro_derivation_screen_tpl",
                controlsWidth:"300px",
                labelWidth: "35%",
                label: "Routing Screen Template".translate(),
                valueType: 'string',
                onChange: function (newValue, prevValue){
                }
            });

            checkDebug = new PMUI.field.CheckBoxGroupField({
                id : 'checkDebug',
                labelWidth: "35%",
                label: "Debug".translate(),
                name:"pro_debug",
                value: '1',
                controlPositioning: 'vertical',
                options : [
                    {
                       id: 'pro_debug',
                       disabled: false,
                       value: '1',
                       selected :false
                    }
                ],
                 onChange: function(newVal, oldVal) {
                }
            });

            checkHideCase = new PMUI.field.CheckBoxGroupField({
                id : 'checkHideCase',
                labelWidth: "35%",
                label: "Hide the case number and the case title in the steps".translate(),
                value: '1',
                name:"pro_show_message",
                controlPositioning: 'vertical',
                options : [
                    {
                       disabled: false,
                       value: '1',
                       selected :false
                    }
                ],
                 onChange: function(newVal, oldVal) {
                }
            });

            checkSubProcess = new PMUI.field.CheckBoxGroupField({
                id :'checkSubProcess',
                labelWidth: "35%",
                label: "This a sub-process".translate(),
                value: '1',
                name:"pro_subprocess",
                controlPositioning: 'vertical',
                options : [
                    {
                       disabled: false,
                       value: '1',
                       selected :false
                    }
                ],
                 onChange: function(newVal, oldVal) {
                }
            });

            dropCaseDeleted = new PMUI.field.DropDownListField({
                id: "dropCaseDeleted",
                name: "pro_tri_deleted",
                labelWidth: "35%",
                label: "Execute a trigger when a case is deleted".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            dropCaseCancelled = new PMUI.field.DropDownListField({
                id: "dropCaseCancelled",
                name: "pro_tri_canceled",
                labelWidth: "35%",
                label: "Execute a trigger when a case is cancelled".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            dropCasePaused = new PMUI.field.DropDownListField({
                id: "dropCasePaused",
                name: "pro_tri_paused",
                labelWidth: "35%",
                label: "Execute a trigger when a case is paused".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            dropCaseReassigned = new PMUI.field.DropDownListField({
                id: "dropCaseReassigned",
                name: "pro_tri_reassigned",
                labelWidth: "35%",
                label: "Execute a trigger when a case is reassigned".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            dropCaseOpen = new PMUI.field.DropDownListField({
                id: "dropCaseOpen",
                name: "pro_tri_open",
                label: "Execute a trigger when a case is opened".translate(),
                labelWidth: "35%",
                valueType: "string",
                controlsWidth: "300px",

                onChange: function (newValue, prevValue)
                {
                }
            });

            dropTypeProcess = new PMUI.field.DropDownListField({
                id: "dropTypeProcess",
                name: "pro_type_process",
                labelWidth: "35%",
                label: "Process Design Access: Public / Private (Owner)".translate(),
                valueType: 'string',
                controlsWidth:"300px",
                onChange: function (newValue, prevValue){
                }
            });

            proCost = new PMUI.field.TextField({
                id:'proCost',
                name: 'pro_cost',
                labelWidth: "35%",
                value: 0,
                placeholder: 'a cost here'.translate(),
                label: "Cost".translate(),
                valueType: 'integer',
                controlsWidth:"300px",
                required: window.enterprise === "1" ? true : false,
                style : {
                    cssProperties : {
                        float : "left"
                    }
                }
            });

            proUnitCost = new PMUI.field.TextField({
                id:'proUnitCost',
                name: 'pro_unit_cost',
                labelWidth: "35%",
                value: '$',
                placeholder: 'a unit cost here'.translate(),
                controlsWidth:"300px",
                label: "Units".translate(),
                valueType: 'string',
                required: window.enterprise === "1" ? true : false,
                style : {
                    cssProperties : {
                        float : "left"
                    }
                }
            });

            formEditProcess = new PMUI.form.Form({
                id:'formEditProcess',
                fieldset: true,
                title: "Process Information".translate(),
                width: DEFAULT_WINDOW_WIDTH - DEFAULT_WINDOW_WIDTH*0.10,
                items: [
                    textTitle,
                    textDescription,
                    dropCalendar,
                    dropProcessCat,
                    dropDynaform,
                    dropRouting,
                    checkDebug,
                    checkHideCase,
                    checkSubProcess,
                    dropCaseDeleted,
                    dropCaseCancelled,
                    dropCasePaused,
                    dropCaseReassigned,
                    dropCaseOpen,
                    dropTypeProcess,
                    proCost,
                    proUnitCost
                ]
            });

            //Load Dynaforms
            loadDynaforms = function (response) {
                dropDynaform.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++) {
                    dropDynaform.addOption({
                        label: response[i].dyn_title,
                        value: response[i].dyn_uid,
                        select: false
                    });
                }
            };

            //Load calendar
            loadCalendar = function (response) {
                dropCalendar.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++){
                    dropCalendar.addOption({
                        label: response[i].cal_name,
                        value: response[i].cal_uid,
                        select: false
                    });
                }
            };

            //Load category
            loadCategory = function (response) {
                dropProcessCat.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++){
                    dropProcessCat.addOption({
                        label: response[i].cat_name,
                        value: response[i].cat_uid,
                        select: false
                    });
                }
            };

            //Load Templates
            loadTemplate = function (response) {
                dropRouting.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                for (var i=0 ; i< response.length ; i++){
                    if(response[i].prf_filename != "alert_message.html") {
                        dropRouting.addOption({
                            label: response[i].prf_filename,
                            value: response[i].prf_filename,
                            select: false
                        });
                    }
                }
            };

            //Load triggers
            loadTriggers = function (response) {
                dropCaseDeleted.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                dropCaseCancelled.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                dropCasePaused.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });
                dropCaseReassigned.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });

                dropCaseOpen.addOption({
                    label: "None".translate(),
                    value: "",
                    select: false
                });

                for (var i=0 ; i< response.length ; i++){
                    dropCaseDeleted.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });
                    dropCaseCancelled.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });
                    dropCasePaused.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });
                    dropCaseReassigned.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });

                    dropCaseOpen.addOption({
                        label: response[i].tri_title,
                        value: response[i].tri_uid,
                        select: false
                    });
                }
            };

            // Load type of process
            loadTypeProcess = function (response) {
                dropTypeProcess.addOption({
                    label: "Public".translate(),
                    value: "PUBLIC",
                    select: false
                });
                dropTypeProcess.addOption({
                    label: "Private".translate(),
                    value: "PRIVATE",
                    select: false
                });
            };

            // Load properties of process
            loadProperties = function (response) {
                propertiesWindow.addItem(formEditProcess);
                propertiesWindow.open();
                formEditProcess.getField("pro_type_process").hideColon();
                formEditProcess.reset();
                responseProperties = response;
                textTitle.setValue(response.pro_title);
                textDescription.setValue(response.pro_description);
                dropDynaform.setValue(response.pro_summary_dynaform);
                dropCaseCancelled.setValue(response.pro_tri_canceled);
                dropCaseDeleted.setValue(response.pro_tri_deleted);
                dropCasePaused.setValue(response.pro_tri_paused);
                dropCaseReassigned.setValue(response.pro_tri_reassigned);
                dropCaseOpen.setValue(response.pro_tri_open);
                dropRouting.setValue(response.pro_derivation_screen_tpl);
                dropCalendar.setValue(response.pro_calendar);
                dropProcessCat.setValue(response.pro_category);
                dropTypeProcess.setValue(response.pro_type_process);
                checkHideCase.setHeight(57)
                if(response.pro_debug == 1) {
                    checkDebug.getControls()[0].select();
                }
                if(response.pro_show_message == 1) {
                    checkHideCase.getControls()[0].select();
                }
                if(response.pro_subprocess == 1) {
                    checkSubProcess.getControls()[0].select();
                }
                proCost.setValue(response.pro_cost);
                if (response.pro_unit_cost != null && response.pro_unit_cost != '' ) {
                    proUnitCost.setValue(response.pro_unit_cost);
                }
            };

            getValuesProperties();

            propertiesWindow.showFooter();
            propertiesWindow.defineEvents();
            applyStyleWindowForm(propertiesWindow);
            formEditProcess.getField('pro_title').setFocus();
            formEditProcess.getField("pro_type_process").html.style.float="left";

            dropCaseCancelled.style.addProperties({"float":"left"});
            dropCasePaused.style.addProperties({"float":"left"});
            dropCaseReassigned.style.addProperties({"float":"left"});
            dropCaseOpen.style.addProperties({"float": "left"});

            $("#dropCaseCancelled,#dropCasePaused,#dropCaseReassigned,#dropTypeProcess,#dropCaseOpen").find("select:eq(0)").css("z-index",1);

            if (window.enterprise === "1") {
                proCost.setVisible(true);
                proUnitCost.setVisible(true);
            } else {
                proCost.setVisible(false);
                proUnitCost.setVisible(false);
            }
        };

    }()
);
(function () {
    PMDesigner.caseTracker = function () {
        var caseTrackerForm,
                index,
                flagEdit = 0,
                caseTrackerWindow,
                dataCaseTracker,
                dataTree,
				conditionform,
				conditionWindows,
				disableAllItems,
                arrayObjectDropAssignedObjects = new Array(),
                arrayObjectAvailableObjects = new Array(),
                arrayObjectStepsCaseTracker = new Array();

        disableAllItems = function () {
            caseTrackerWindow.getItems()[0].setVisible(false);
            caseTrackerWindow.getItems()[1].setVisible(false);
            caseTrackerWindow.hideFooter();
        };
		var formIsDirty = function (){
			if (caseTrackerForm.isDirty() || flagEdit == 1) {
				var message_window = new PMUI.ui.MessageWindow({
					id: "cancelMessageTriggers",
					windowMessageType: 'warning',
					width: 490,
					title: "Case Tracker".translate(),
					message: 'Are you sure you want to discard your changes?'.translate(),
					footerItems: [
						{
							text: "No".translate(),
							handler: function () {
								message_window.close();
							},
							buttonType : "error"
						},
						{
							text: "Yes".translate(),
							handler: function () {
								message_window.close();
								caseTrackerWindow.close();
							},
							buttonType : "success"
						}
					]
				});
				message_window.open();
				message_window.showFooter();
			} else {
				caseTrackerWindow.close();
			}
		};
		
		var conditionformIsDirty = function (){
			if (conditionform.isDirty()) {
				var message_window = new PMUI.ui.MessageWindow({
					id: "cancelMessageTriggers",
					windowMessageType: 'warning',
					width: 490,
					title: "Case Tracker".translate(),
					message: 'Are you sure you want to discard your changes?'.translate(),
					footerItems: [
						{
							text: "No".translate(),
							handler: function () {
								message_window.close();
							},
							buttonType : "error"
						},
						{
							text: "Yes".translate(),
							handler: function () {
								message_window.close();
								conditionWindows.close();
							},
							buttonType : "success"
						}
					]
				});
				message_window.open();
				message_window.showFooter();
			} else {
				conditionWindows.close();
			}
		
		};
        orderDataTree = function (data) {
            var items = [];
            var type = ['DYNAFORM', 'INPUT_DOCUMENT', 'OUTPUT_DOCUMENT', 'EXTERNAL_STEP'];
            var label = ['Dynaform', 'Input Document', 'OutPut Document', 'External Step'];
            for (var i = 0; i < type.length; i++) {
                items = [];
                for (var j = 0; j < data.length; j++) {
                    if (type[i] === data[j].obj_type) {
                        items.push({
                            step_type_obj: label[i].translate(),
                            obj_label: label[i].translate(),
                            obj_title: data[j]['obj_title'],
                            obj_type: data[j]['obj_type'],
                            obj_uid: data[j]['obj_uid']
                        });
                    }
                }
                if (items.length === 0) {
                    dataTree.push({
                        obj_title: label[i].translate(),
                        items: []
                    });
                } else {
                    dataTree.push({
                        obj_title: label[i].translate(),
                        items: items
                    });
                }
            }
        };

        //Properties
        loadPropertiesCaseTracker = function () {
            dataCaseTracker = [];
            restClient = new PMRestClient({
                endpoint: 'case-tracker/property',
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    dataCaseTracker = response;
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.executeRestClient();
        };

        updateCaseTrackerPropertiesAndObjects = function (data) {
            //save steps Objects Case Tracker
            index = 0;
            for (var i = 0; i < gridPanelObjects.getItems().length; i++) {
                idObject = (typeof gridPanelObjects.getItems()[i].getData().cto_uid_obj != 'undefined') ? gridPanelObjects.getItems()[i].getData().cto_uid_obj : gridPanelObjects.getItems()[i].getData().obj_uid;
                index = arrayObjectStepsCaseTracker.indexOf(idObject);
                if(index <= -1){
                    saveItem(gridPanelObjects.getItems()[i]);
                }else{
                    updateItem(gridPanelObjects.getItems()[i],i);
                }
            };
            for (var i = 0; i < arrayObjectAvailableObjects.length; i++) {
                for (var j = 0; j < arrayObjectDropAssignedObjects.length; j++) {
                    index = (arrayObjectAvailableObjects[i] == arrayObjectDropAssignedObjects[j].cto_uid_obj) ? 0 : 1;
                    if (index == 0) {
                        restClient = new PMRestClient({
                            typeRequest: 'post',
                            multipart: true,
                            data: {
                                "calls": [
                                    {
                                        "url": 'case-tracker/object/' + arrayObjectDropAssignedObjects[j].cto_uid,
                                        "method": 'DELETE'
                                    }
                                ]
                            },
                            functionSuccess: function (xhr, response) {},
                            functionFailure: function (xhr, response) {}
                        });
                        restClient.executeRestClient();
                        break;
                    }
                };                
            };

            //save Properties Case Tracker
            data ['map_type'] = data ['map_type'] == '["1"]' ? "PROCESSMAP" : "NONE"; 
            data ['routing_history'] = data ['routing_history'] == '["1"]' ? 1 : 0;
            data ['message_history'] = data ['message_history'] == '["1"]' ? 1 : 0;
            restClient = new PMRestClient({
                endpoint: 'case-tracker/property',
                typeRequest: 'update',
                data: data,
                functionSuccess: function (xhr, response) {
                    caseTrackerWindow.close();
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: "There are problems updating the Case Tracker, please try again.".translate(),
                messageSuccess: 'Case Tracker updated successfully'.translate(),
                flashContainer: document.body
            });
            restClient.executeRestClient();
        };

        caseTrackerForm = new PMUI.form.Form({
            id: 'caseTrackerForm',
            fieldset: true,
            title: "",
            width: DEFAULT_WINDOW_WIDTH - 70,
            height: 30,
            layout: "hbox",
            items: [                    
                {
                    pmType: "annotation",
                    text: "Display :".translate(),
                    id: "DisplayMessage",
                    name: "DisplayMessage"
                },
                {
                    id: 'map_type',
                    pmType: 'checkbox',
                    labelVisible: false,
                    options: [
                        {
                            label: 'Processmap'.translate(),
                            value: '1'
                        }
                    ]
                },
                {
                    id: 'routing_history',
                    pmType: 'checkbox',
                    labelVisible: false,
                    options: [
                        {
                            label: 'Routing History'.translate(),
                            value: '1'
                        }
                    ]
                },
                {
                    id: 'message_history',
                    pmType: 'checkbox',
                    labelVisible: false,
                    options: [
                        {
                            id: 'message_history',
                            label: 'Messages'.translate(),
                            value: '1'
                        }
                    ]
                }
            ],
            style: {
                cssProperties: {
                    'margin-bottom' : '70px'
                }
            }
        });

        //objects
        loadGridCaseTacker = function (data) {
            for (var i = 0; i < data.length; i++) {
                switch (data[i]['cto_type_obj']) {
                    case 'DYNAFORM':
                        label = 'Dynaform'.translate();
                        break;
                    case 'INPUT_DOCUMENT':
                        label = 'Input Document'.translate();
                        break;
                    case 'OUTPUT_DOCUMENT':
                        label = 'OutPut Document'.translate();
                        break;
                    case 'EXTERNAL_STEP':
                        label = 'External Step'.translate();
                        break;
                    default:
                        label = data[i]['tri_type'];
                        break;
                }
                data[i]['obj_label'] = label;
            }
            gridPanelObjects.setDataItems(data);
        };

        getValuesCaseTrackerObjects = function () {
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    "calls": [
                        {
                            "url": "case-tracker/available-objects",
                            "method": 'GET'
                        },
                        {
                            "url": "case-tracker/objects",
                            "method": 'GET'
                        }
                    ]
                },
                functionSuccess: function (xhr, response) {
                    dataTree = [];
                    orderDataTree(response[0].response);
                    treePanelObjects.setDataItems(dataTree);
                    loadGridCaseTacker(response[1].response);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.executeRestClient();
        };
        saveItem = function (rowStep) {
            rowStep = rowStep.getData();
            data = {
                "cto_type_obj": rowStep.obj_type,
                "cto_uid_obj": rowStep.obj_uid,
                "cto_condition": (typeof rowStep.cto_condition != 'undefined') ? rowStep.cto_condition : '',
                "cto_position": rowStep.cto_position
            };
            restClient = new PMRestClient({
                endpoint: 'case-tracker/object',
                typeRequest: 'post',
                data: data,
                functionSuccess: function (xhr, response) {
                    data = response;
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                },
                messageError: "There are problems saved, please try again.".translate()
            });
            restClient.executeRestClient();
            return data;
        };

        updateItem = function (rowStep,i) {
            rowStep = rowStep.getData();
            rowStep.cto_position = i + 1;
            restClient = new PMRestClient({
                typeRequest: 'post',
                multipart: true,
                data: {
                    "calls": [
                        {
                            "url": 'case-tracker/object/' + rowStep.cto_uid,
                            "method": 'PUT',
                            "data": rowStep
                        }/*,
                        {
                            "url": "case-tracker/objects",
                            "method": 'GET'
                        }*/
                    ]
                },
                functionSuccess: function (xhr, response) {
                    //loadGridCaseTacker(response[0].response);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                }
            });
            restClient.executeRestClient();
        };

        treePanelObjects = new PMUI.panel.TreePanel({
            id: 'treePanelObjects',
            proportion: 0.5,
            filterable: true,
            filterPlaceholder: 'Search ...'.translate(),
            emptyMessage: 'No records found'.translate(),
            style: {cssClasses: ['itemsSteps']},
            nodeDefaultSettings: {
                behavior: "drag",
                labelDataBind: 'obj_title',
                itemsDataBind: 'items',
                collapsed: false,
                childrenDefaultSettings: {
                    labelDataBind: 'obj_title',
                    autoBind: true
                },
                autoBind: true
            }
        });

        editCondition = function () {
            var visible;

            conditionform = new PMUI.form.Form({
                id: 'conditionform',
                title: "",
                fieldset: true,
                visibleHeader: false,
                width: 500,
                items: [
                    new CriteriaField({
                        id: 'cto_condition',
                        pmType: 'textarea',
                        name: 'cto_condition',
                        valueType: 'string',
                        label: 'Condition'.translate(),
                        placeholder: 'Insert a condition'.translate(),
                        rows: 200,
                        width: 250,
                        controlsWidth: 285,
                        renderType: 'textarea'
                    })
                ]
            });

            if (rowStep != '' && rowStep != undefined) {
                var dataEdit = conditionform.getFields( );
                dataEdit[0].setValue(rowStep['cto_condition']);
            }

            conditionWindows = new PMUI.ui.Window({
                id: 'conditionWindows',
                title: 'Condition'.translate(),
                width: 500,
                height: 'auto',
                footerHeight: 'auto',
                bodyHeight: 'auto',
                modal: true,
                buttonPanelPosition: 'bottom',
                footerAlign : "right",
				onBeforeClose : conditionformIsDirty,
                buttons: [
					{
						id: 'conditionObjectWindowButtonClose',
						text: "Cancel".translate(),
						handler: conditionformIsDirty,
                        buttonType: 'error'
					},                          
					{
						id: 'conditionObjectWindowButtonSave',
						text: "Save".translate(),
						handler: function () {
							if (conditionform.isValid( )) {
								idrowStep = (typeof rowStep.cto_uid_obj != 'undefined') ? rowStep.cto_uid_obj : rowStep.obj_uid;
                                for (var i = 0; i < gridPanelObjects.getItems().length; i++) {
                                    item = gridPanelObjects.getItems()[i].getData();
                                    idObj = (typeof item.cto_uid_obj != 'undefined') ? item.cto_uid_obj : item.obj_uid;                                    
                                    if(idObj == idrowStep){
                                        rowStep.cto_condition = conditionform.getData()['cto_condition'];
                                        gridPanelObjects.getItems()[i].setData(rowStep);
                                        break;
                                    }
                                };
								conditionWindows.close();
							}
						  },
						  buttonType: 'success'
					  }
				]
            });
            conditionWindows.addItem(conditionform);
            conditionWindows.open();
            conditionWindows.showFooter();
            applyStyleWindowForm(conditionWindows);
            conditionWindows.defineEvents();
            conditionWindows.footer.html.style.textAlign = 'right';
            conditionform.setFocus();
            style = $('#cto_condition .pmui-field-label').attr("style");
            style = style + ' float: left;';
            $('#cto_condition .pmui-field-label').attr("style", style);
        };

        gridPanelObjects = new PMUI.grid.GridPanel({
            id: 'gridPanelObjects',
            proportion: 1.5,
            visibleFooter: false,
            filterable: false,
            width: '640px',
            style: {cssClasses: ['itemsSteps']},
            filterPlaceholder: 'Search ...'.translate(),
            emptyMessage: 'No records found'.translate(),
            nextLabel: 'Next'.translate(),
            previousLabel: 'Previous'.translate(),
            customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
                return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
            },
            behavior: 'dragdropsort',
            columns: [
                {
                    title: 'Title'.translate(),
                    dataType: 'string',
                    width: 330,
                    alignment: "left",
                    columnData: "obj_title",
                    sortable: false,
                    alignmentCell: 'left'
                },
                {
                    title: 'Type'.translate(),
                    dataType: 'string',
                    width: 120,
                    alignment: "left",
                    columnData: "obj_label",
                    sortable: false,
                    alignmentCell: 'left'
                },
                {
                    id: 'gridPanelObjectsButtonProperties',
                    title: '',
                    dataType: 'button',
                    buttonLabel: "Condition".translate(),
                    iconPosition: "center",
                    buttonStyle: {cssClasses: ['mafe-button-editstep']},
                    buttonTooltip: 'Edit Properties'.translate(),
                    onButtonClick: function (row, grid) {
                        rowStep = row.getData();
                        editCondition();
                    }
                },
                {
                    id: 'gridPanelObjectsButtonDelete',
                    title: '',
                    dataType: 'button',
                    buttonLabel: "".translate(),
                    buttonStyle: {cssClasses: ['mafe-button-delete-assign']},
                    buttonTooltip: 'Remove Object'.translate(),
                    onButtonClick: function (row, grid) {
                        flagEdit = 1;
                        rowStep = row.getData();
                        index = (row.getData().cto_uid_obj != 'undefined') ? arrayObjectStepsCaseTracker.indexOf(row.getData().cto_uid_obj) : arrayObjectStepsCaseTracker.indexOf(row.getData().obj_uid);
                        if (index > -1) {
                            arrayObjectAvailableObjects.push(row.getData().cto_uid_obj);
                            arrayObjectStepsCaseTracker.splice(index, 1);
                        }
                        objType = (typeof row.getData().cto_type_obj != 'undefined') ? row.getData().cto_type_obj : row.getData().obj_type;
                        grid.removeItem(row);
                        switch (objType) {
                            case 'DYNAFORM':
                                treePanelObjects.getItems()[0].addItem(row);
                                break;
                            case 'INPUT_DOCUMENT':
                                treePanelObjects.getItems()[1].addItem(row);
                                break;
                            case 'OUTPUT_DOCUMENT':
                                treePanelObjects.getItems()[2].addItem(row);
                                break;
                            case 'EXTERNAL_STEP':
                                treePanelObjects.getItems()[3].addItem(row);
                                break;
                            default:
                                break;
                        }
                    }
                }
            ],
            onDrop: function (grid, item, index) {
                flagEdit = 1;
                if (item.data.customKeys.obj_uid === '') {
                    return false;
                }
                rowStep = item.getData();
                rowStep.cto_position = index + 1;
                item.setData(rowStep);

                index = (typeof item.getData().cto_uid_obj != 'undefined') ? arrayObjectAvailableObjects.indexOf(item.getData().cto_uid_obj) : arrayObjectAvailableObjects.indexOf(item.getData().obj_uid);

                if (index > -1) {
                    itemPush = (typeof item.getData().cto_uid_obj != 'undefined') ? item.getData().cto_uid_obj : item.getData().obj_uid;
                    arrayObjectStepsCaseTracker.push(itemPush);
                    arrayObjectAvailableObjects.splice(index, 1);
                }  
            },
            onSort: function (grid, item, index) {
                rowStep = item.getData();
                //rowStep.cto_position = index + 1;
            }
        });

        titleTreeObjects = new PMUI.ui.TextLabel({
            id: "titleTreeObjects",
            textMode: 'plain',
            text: 'Available Objects'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-steps-tree'
                ]
            }
        });

        titleGridObjects = new PMUI.ui.TextLabel({
            id: "titleGridObjects",
            textMode: 'plain',
            text: 'Assigned objects'.translate(),
            style: {
                cssClasses: [
                    'mafe-designer-stesp-grid'
                ]
            }
        });

        panelLabelObjects = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            fieldset: true,
            items: [
                titleTreeObjects,
                titleGridObjects
            ],
            style: {
                cssProperties: {
                    'margin-bottom': 4,
                    'margin-top': 4,
                    'margin-left': 4
                }
            },
            layout: "hbox"
        });

        panelContainerObjects = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            height: 320,
            fieldset: true,
            items: [
                treePanelObjects,
                gridPanelObjects
            ],
            layout: "hbox"
        });

        panelObjects = new PMUI.core.Panel({
            width: DEFAULT_WINDOW_WIDTH * 0.94,
            height: DEFAULT_WINDOW_HEIGHT * 0.70,
            fieldset: true,
            items: [
                panelLabelObjects,
                panelContainerObjects
            ],
            layout: "vbox"
        });

        caseTrackerWindow = new PMUI.ui.Window({
            id: 'caseTrackerWindow',
            title: "Case Tracker".translate(),
            width: DEFAULT_WINDOW_WIDTH,
            height: DEFAULT_WINDOW_HEIGHT,
            footerHeight: 'auto',
            bodyHeight: 'auto',
            modal: true,
            buttonPanelPosition: "bottom",
			onBeforeClose : formIsDirty,
            visibleFooter: false,
            footerAling : "right",
            footerItems: [{
                	id: 'btnCloseCaseTracker',
                    text: 'Cancel'.translate(),
                    buttonType: "error",
                    handler: formIsDirty,
                },
                {
                    id: 'btnSaveCaseTracker',
                    text: "Save".translate(),
                    buttonType: "success",
                    handler: function () {
                        if (caseTrackerForm.isValid( )) {
                            data = caseTrackerForm.getData();
                            updateCaseTrackerPropertiesAndObjects(data);
                        }
                    }
                }
            ],
            spaceButtons: 30
        });
		
        caseTrackerWindow.addItem(caseTrackerForm);
        caseTrackerWindow.addItem(panelObjects);
        caseTrackerWindow.open();
        caseTrackerWindow.showFooter();
        applyStyleWindowForm(caseTrackerWindow);
        caseTrackerWindow.defineEvents();
        caseTrackerWindow.footer.html.style.textAlign = 'right';
        caseTrackerForm.setFocus();

        applyStylesWindow = function () {
            $('#gridPanelObjects .pmui-gridpanel-tableContainer').css({'height':'auto'});
            $('#caseTrackerForm :eq(2)').css({'padding':'0px 10px 0px 10px'});
            $('#caseTrackerForm :eq(0)').remove();
            items = caseTrackerWindow.getItems()[0].getItems();  
            $(items[1].getHTML()).find('table').css('border','none');
            $(items[2].getHTML()).find('table').css('border','none');
            $(items[3].getHTML()).find('table').css('border','none');
        };

        showObjects = function () {
            disableAllItems();

            loadPropertiesCaseTracker();
            caseTrackerWindow.getItems()[0].setVisible(true);
            caseTrackerWindow.showFooter();
            caseTrackerWindow.setTitle("Case Tracker Properties".translate());

            if (dataCaseTracker != '') {
                var dataEdit = caseTrackerForm.getFields( );
                dataEdit[1].setValue((dataCaseTracker['map_type'] == 'PROCESSMAP') ? '["1"]' : '[]');
                dataEdit[2].setValue((dataCaseTracker['routing_history'] == 1) ? '["1"]' : '[]');
                dataEdit[3].setValue((dataCaseTracker['message_history'] == 1) ? '["1"]' : '[]');
            }


            getValuesCaseTrackerObjects();
            caseTrackerWindow.getItems()[1].setVisible(true);
            caseTrackerWindow.setTitle("Case Tracker".translate());

            caseTrackerWindow.body.style.overflow = 'initial';

            gridPanelObjects.style.addProperties({overflow: 'auto'});
            gridPanelObjects.style.addProperties({float: 'right'});
            gridPanelObjects.setWidth(640);
            gridPanelObjects.setHeight(270);
            applyStylesWindow();
            treePanelObjects.style.addProperties({float: 'left'});
            treePanelObjects.style.addProperties({overflow: 'auto'});
            treePanelObjects.setWidth(200);
            treePanelObjects.setHeight(270);
            
            applyStyleTreePanel(treePanelObjects);

            panelLabelObjects.setHeight(15);
            caseTrackerWindow.defineEvents();

            caseTrackerWindow.setBodyPadding(5);

            panelObjects.style.addProperties({marginLeft: '15px'});  
            for (var i = 0; i < gridPanelObjects.getItems().length; i++) {
                arrayObjectStepsCaseTracker[i] = gridPanelObjects.getItems()[i].getData().cto_uid_obj;
                arrayObjectDropAssignedObjects[i] = gridPanelObjects.getItems()[i].getData();
            };          
        };

    };

    PMDesigner.caseTracker.showObjects = function () {
        PMDesigner.caseTracker();
        showObjects();
    };

}());
PMDesigner.RoutingRule = function (shape) {
    var formRoutingRule,
            formPanelSelected,
            arrayShapeIdRemoved = [],
            buttonAdd,
            windowConnections,
            warningMessageWindowDelete,
            containerLabels,
            deleteButton,
            buttonSave,
            buttonCancel,
            labelNextTask,
            labelCondition,
            dataRouteGroup = [];

    var arrayElementName = [];

    var warningMessageWindowDelete = new PMUI.ui.MessageWindow({
        id: 'warningMessageWindowDelete',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title : 'Routing Rule'.translate(),
        message: 'Do you want to delete this routing rule?'.translate(),
        footerItems: [
			{
                id: 'warningMessageWindowDeleteButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDelete.close();
                },
				buttonType : "error"
            },
			{
                id: 'warningMessageWindowDeleteButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    deleteRow();
                    warningMessageWindowDelete.close();
                },
				buttonType : "success"
            }
        ]
    });
    var warningMessageWindowDirty = new PMUI.ui.MessageWindow({
        id: 'warningMessageWindowDirty',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title: 'Routing Rule'.translate(),
        message: 'Are you sure you want to discard your changes?'.translate(),
        footerItems: [
			{
                id: 'warningMessageWindowDirtyButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDirty.close();
                },
				buttonType : "error"
            },{
                id: 'warningMessageWindowDirtyButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDirty.close();
                    windowConnections.close();
                },
				buttonType : "success"
            }
        ]
    });

    buttonAdd = new PMUI.ui.Button({
        id: 'routingRuleButtonAdd',
        text: 'Add Routing Rule'.translate(),
        style: {
            cssProperties: {
                marginLeft: '50px',
                marginTop: '10px',
                marginBottom: '10px',
                padding : "5px"
            }
        },
        buttonType: 'success',
        handler: function () {
            var item, btnDel;
            if (countActivities() > 0) {
                item = addRow();
                item.getItems()[2].style.addProperties({display: 'none'});
                item.getItems()[2].controls[0].button.setButtonType('error');
                $(item.getItems()[2].getHTML()).find("a").css({
                	padding : "5px"
                })
                formRoutingRule.addItem(item);
                for (var i = 0; i < formRoutingRule.getItems().length; i++) {
                    formRoutingRule.getItems()[i].style.addProperties({'padding': 'initial'});
                }
                item.getItems()[0].dom.labelTextContainer.style.display = 'none';
                item.getItems()[1].dom.labelTextContainer.style.display = 'none';
                item.getField('flo_condition').setValue(true);

            } else {
                PMDesigner.msgFlash('There are no items.'.translate(), windowConnections.footer);
            }
            enableSorting();
        }
    });
    buttonSave = new PMUI.ui.Button({
        id: 'windowConnectionsButtonSave',
        text: 'Save'.translate(),
        handler: function () {
            //validate routing rules form
            if (isValidRoutingRules()) {
                //remove all flows an get points
                var allPoints = removeConnectionsIntoCanvas();
                saveConnections(allPoints);
            }

        },
        buttonType: 'success'
    });
    buttonCancel = new PMUI.ui.Button({
        id: 'windowConnectionsButtonCancel',
        text: 'Cancel'.translate(),
        buttonType: 'error',
        handler: function () {
            if (formRoutingRule.isDirty()) {
                warningMessageWindowDirty.open();
                warningMessageWindowDirty.showFooter();
            } else {
                windowConnections.close();
            }
        }
    });

    labelNextTask = new PMUI.ui.TextLabel({
        text: 'Next Task'.translate()
    });
    labelNextTask.setWidth(382);
    labelNextTask.style.addProperties({padding: '5px 0px 0px 50px'});

    labelCondition = new PMUI.ui.TextLabel({
        text: 'Condition'.translate()
    });
    labelCondition.setWidth(410);
    labelCondition.style.addProperties({padding: '5px 0px 0px 5px'});
    labelCondition.style.addProperties({marginLeft: '31%'});

    containerLabels = new PMUI.core.Panel({
        layout: 'hbox',
        width: 'auto',
        height: 29,
        style: {
            cssProperties: {
                'border-bottom': '1px solid #c0c0c0'
            }
        }
    });
    containerLabels.addItem(labelNextTask);
    containerLabels.addItem(labelCondition);
    containerLabels.style.addProperties({'border-bottom': '1px solid #e7e7e7'});

    formRoutingRule = new PMUI.form.Form({
        id: 'formRoutingRule',
        visibleHeader: false,
        width: DEFAULT_WINDOW_WIDTH - 60,
        height: 'auto',
        items: [],
        style: {
            cssProperties: {
                'margin-left': '35px'
            }
        }
    });
    formRoutingRule.hideFooter();

    windowConnections = new PMUI.ui.Window({
        id: 'windowConnections',
        title: 'Routing Rule'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        footerAlign: 'right',
        buttonPanelPosition: 'bottom',
        items: [
            buttonAdd
        ],
        buttons: [
            buttonCancel,
            buttonSave
        ]
    });

    typeShapeValueText = (shape.gat_type == 'EXCLUSIVE') ? 'EXCLUSIVE'.translate() : 'INCLUSIVE'.translate();
    windowConnections.setTitle('Routing Rule'.translate() + ' - ' + typeShapeValueText);
    windowConnections.showFooter();
    windowConnections.addItem(containerLabels);
    if(formRoutingRule.dirty == null){
      formRoutingRule.dirty = false;
    }
    windowConnections.addItem(formRoutingRule);
    windowConnections.open();

    loadConnections();
    enableSorting();

    function countActivities () {
        //Important! Any changes to synchronize the assessment of the condition
        //of the functions: countActivities and loadActivities
        var n = 0;
        var dt = PMDesigner.project.getDirtyObject().diagrams[0].activities;
        for (var i = 0; i < dt.length; i++) {
            n = n + 1;
        }

        var dt = PMDesigner.project.getDirtyObject().diagrams[0].events;
        for (var i = 0; i < dt.length; i++) {
            if (dt[i].evn_type !== 'START') {
                n = n + 1;
            }
        }
        return n;
    }

    function addRow () {
        var dropDownControl, criteriaField, deleteButton, newRow;
        newRow = new PMUI.form.FormPanel({
            layout: 'hbox'
        });

        dropDownControl = new PMUI.field.DropDownListField({
            id: 'dropdownNextTask',
            name: 'act_name',
            valueType: 'string',
            label: 'Next Task'.translate(),
            labelPosition: 'top',
            labelVisible: false,
            value: '',
            readOnly: false,
            controlsWidth: 360,
            proportion: 0.9,
            style: {
                cssProperties: {
                    'vertical-align': 'top'
                }
            }
        });
        criteriaField = new CriteriaField({
            id: 'textCondition',
            pmType: 'text',
            renderType: 'textarea',
            name: 'flo_condition',
            valueType: 'string',
            label: 'Condition'.translate(),
            labelPosition: 'top',
            labelVisible: false,
            controlsWidth: 345,
            required: false,
            style: {
                cssProperties: {
                    'vertical-align': 'top'
                }
            }
        });
        deleteButton = new PMUI.field.ButtonField({
            id: 'buttonDelete',
            value: 'Delete'.translate(),
            handler: function (e, a) {
                formPanelSelected = this.getParent();
                warningMessageWindowDelete.open();
                warningMessageWindowDelete.dom.titleContainer.style.height = '17px';
                warningMessageWindowDelete.showFooter();
                enableSorting();
            },
            name: 'delete',
            labelVisible: false,
            buttonAling: 'left',
            controlsWidth: 60,
            proportion: 0.1,
            style: {
                cssProperties: {
                    'vertical-align': 'top'
                }
            }
        });

        newRow.addItem(dropDownControl);
        newRow.addItem(criteriaField);
        newRow.addItem(deleteButton);

        loadOptions(dropDownControl);

        return newRow;
    }

    function loadOptions (dropdown) {
        var i,
            customShapes,
            element,
            nameGroup,
            evnLabelMap;
        //Important! Any changes to synchronize the assessment of the condition
        //of the functions: countActivities and loadActivities
        dropdown.clearOptions();
        dropdown.setUID = function (uid) {
            this.uid = uid;
        };
        dropdown.getUID = function () {
            return this.uid;
        };
        dropdown.addOptionGroup({
            label: 'Task'.translate(),
            selected: true,
            options: []
        });
        dropdown.addOptionGroup({
            label: 'Sub-process'.translate(),
            options: []
        });
        dropdown.addOptionGroup({
            label: 'Event'.translate(),
            options: []
        });
        dropdown.addOptionGroup({
            label: 'Gateway'.translate(),
            options: []
        });
        customShapes =  PMUI.getActiveCanvas().getCustomShapes();

        for (i = 0; i < customShapes.getSize(); i += 1) {
            element = customShapes.get(i);
            // verify pool and participant
            if(element.getType() !== 'PMParticipant' && element.getType()  !== 'PMPool') {
                //itself verify and same parent
                if (shape.getID() !== element.getID()
                    && element.businessObject
                    && shape.businessObject
                    && shape.businessObject.elem.$parent
                    && element.businessObject.elem.$parent
                    && element.businessObject.elem.$parent.id ===  shape.businessObject.elem.$parent.id) {
                    switch(element.type) {
                    case 'PMActivity':
                        nameGroup = element.act_type === 'TASK' ? 'Task'.translate() : 'Sub-process'.translate();
                        dropdown.addOption({
                            value: element.act_uid,
                            label: element.act_name
                        }, nameGroup);
                        arrayElementName[element.act_uid] = element.act_name;
                        break;
                    case 'PMEvent':
                        evnLabelMap =  {
                            'END': 'End Event'.translate(),
                            'INTERMEDIATE': 'Intermediate Event'.translate()
                        };

                        if (element.evn_type !== 'START') {
                            dropdown.addOption({
                                value: element.evn_uid,
                                label: element.evn_name || evnLabelMap[element.evn_type]
                            }, 'Event'.translate());

                            arrayElementName[element.evn_uid] = element.evn_name || evnLabelMap[element.evn_type];
                        }
                        break;
                    case 'PMGateway':
                        dropdown.addOption({
                            value: element.gat_uid,
                            label: element.gat_name || 'Gateway'.translate()
                        }, 'Gateway');
                        arrayElementName[element.gat_uid] = element.gat_name || 'Gateway'.translate();
                        break;
                    }
                }
            }
        }
    }

    function removeConnectionsIntoCanvas () {
        var shapeDest, connection, dt, allPoints = {};
        for (var j = 0; j < arrayShapeIdRemoved.length; j++) {
            shapeDest = PMUI.getActiveCanvas().getCustomShapes().find('id', arrayShapeIdRemoved[j]);
            dt = shape.getPorts().asArray();
            for (var i = 0; i < dt.length; i++) {
                connection = dt[i].getConnection();
                if (shape.getID() === connection.getSrcPort().getParent().getID() &&
                        shapeDest.getID() === connection.getDestPort().getParent().getID()) {
                    //caching points
                    allPoints[shapeDest.getID()] = getPoints(connection);
                    removeConnection(connection);

                    break;
                }
            }
        }
        arrayShapeIdRemoved = [];
        return allPoints;
    }

    /**
     * to remove a individual connection and getting points
     * @param connection
     */
    function removeConnection(connection) {

        PMUI.getActiveCanvas().emptyCurrentSelection();
        PMUI.getActiveCanvas().setCurrentConnection(connection);
        PMUI.getActiveCanvas().removeElements();
        connection.saveAndDestroy();
        PMUI.getActiveCanvas().removeConnection(connection);
    }

    /**
     * gets conenctions inital and final points
     * @param connection
     */
    function getPoints(connection){
        var result = [];
        result[0] = connection.points[0];
        result[1] = connection.points[connection.points.length - 1];
        return result;
    }

    function editShapeDestConnection (shapeDest, oldShape) {
        var connection, canvas = PMUI.getActiveCanvas();
        connection = isConnection(shape, oldShape);
        oldShape.removePort(connection.destPort);
        shapeDest.addPort(connection.destPort, 100, 100,
                false, connection.srcPort);

        connection.canvas.commandStack.add(new PMUI.command.CommandConnect(connection));
        connection.connect();
        canvas.triggerPortChangeEvent(connection.destPort);
    }

    function createEndShape () {
        //referer /processmaker/vendor/colosa/pmUI/src/behavior/ContainerDrop.js
        //method ContainerDropBehavior.prototype.onDrop line 94-105.
        var customShape, canvas = PMUI.getActiveCanvas(), command;
        customShape = canvas.shapeFactory('END');

        var x = shape.getX() + shape.getWidth();
        var y = shape.getY() + shape.getHeight() + 20;

        canvas.addElement(customShape, x, y,
                customShape.topLeftOnCreation);

        //since it is a new element in the designer, we triggered the
        //custom on create element event
        canvas.updatedElement = customShape;

        // create the command for this new shape
        command = new PMUI.command.CommandCreate(customShape);
        canvas.commandStack.add(command);
        command.execute();
        return customShape;
    }

    /**
     * new method to validate routing rules
     * @returns {boolean}
     */
    function isValidRoutingRules () {
        var result = true,
            arrayAux = [],
            i,
            max,
            id,
            dt = formRoutingRule.getItems();
        if (!formRoutingRule.isValid()) {
            result = false;
            return;
        }

        for (i = 0, max = dt.length; i < max; i += 1) {
            id = dt[i].getField("act_name").getValue();
            if (typeof(arrayAux[id]) === "undefined") {
                arrayAux[id] = "1";
            } else {
                result = false;
                PMDesigner.msgWinError("The routing rule to \"{0}\" already exists".translate([arrayElementName[id]]));
                return;
            }
        }
        return result;
    }

    function saveConnections (allPoints) {
        var dt = formRoutingRule.getItems(),
            id,
            i,
            oldId,
            shapeDest,
            oldShapeDest,
            connection,
            newConnection,
            newPoints;

        for (i = 0; i < dt.length; i++) {
            id = dt[i].getField('act_name').getValue();
            oldId = dt[i].getField('act_name').getUID();
            if (id !== '0') {
                dataRouteGroup.push(id);
                if (dt[i].getField('flo_condition').getValue() == "") {
                    dt[i].getField('flo_condition').setValue(true);
                }
                if (oldId === undefined) {
                    shapeDest = PMUI.getActiveCanvas().getCustomShapes().find('id', id);
                    //getting current connection

                    newPoints = allPoints[id];

                    newConnection = createConnection(shape, shapeDest, newPoints);
                    newConnection.setFlowCondition(dt[i].getField('flo_condition').getValue());
                }
                if (oldId !== undefined && id === oldId) {
                    shapeDest = PMUI.getActiveCanvas().getCustomShapes().find('id', id);
                    connection = isConnection(shape, shapeDest);

                    if (typeof(connection) != "object") {
                        connection = createConnection(shape, shapeDest);
                    }

                    connection.setFlowCondition(dt[i].getField('flo_condition').getValue());
                }
                if (oldId !== undefined && id !== oldId) {
                    shapeDest = PMUI.getActiveCanvas().getCustomShapes().find('id', id);
                    oldShapeDest = PMUI.getActiveCanvas().getCustomShapes().find('id', oldId);
                    connection = isConnection(shape, oldShapeDest);

                    if (typeof(connection) != "object") {
                        connection = createConnection(shape, shapeDest);
                    }

                    connection.setFlowCondition(dt[i].getField('flo_condition').getValue());

                    if (typeof(connection) != "object") {
                        connection = createConnection(shape, shapeDest);
                    }

                    connection.setFlowCondition(dt[i].getField('flo_condition').getValue());

                    editShapeDestConnection(shapeDest, oldShapeDest);
                }
            } else {
                var customShape = createEndShape();
                createConnection(shape, customShape);
            }
        }
        
        /*update routing order*/
        var dataRouteAll = [];
        for(var i = 0; i < dataRouteGroup.length; i++) {
            var dataRoute = {
                'rou_case': parseInt(i)+1,
                'rou_next_task': dataRouteGroup[i],
                'pro_uid': PMDesigner.project.id
            };
            dataRouteAll.push(dataRoute);
        }
        var restClient = new PMRestClient({
            endpoint: 'update-route-order',
            typeRequest: 'update',
            data: dataRouteAll,
            functionSuccess: function () {
                PMDesigner.msgFlash('Saved correctly'.translate(), document.body, 'success',3000, 5);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
                PMDesigner.msgFlash('There are problems updating the routing rule, please try again.'.translate(), document.body, 'error',3000, 5);
            }
        });
        restClient.executeRestClient();
        /*end update routing order*/
        
        windowConnections.close();
        PMDesigner.msgFlash('Saved correctly'.translate(), document.body);
        PMDesigner.project.dirty = true;
        PMDesigner.project.setDirty(true);
    }

    function createConnection (sourceShape, shape, points) {
        //referer to /processmaker/vendor/colosa/MichelangeloFE/src/connectiondrop.js
        //method PMConnectionDropBehavior.prototype.onDrop
        var sourcePort, endPort, connection, canvas = PMUI.getActiveCanvas(), points;
        sourcePort = new PMUI.draw.Port({
            width: 10,
            height: 10
        });
        endPort = new PMUI.draw.Port({
            width: 10,
            height: 10
        });
        if (!points){
            points = findBestPorts(sourceShape, shape);
        }

        //sourceShape.addPort(sourcePort, 100, 100);
        sourceShape.addPort(sourcePort, points[0].x - sourceShape.getZoomX(), points[0].y - sourceShape.getZoomY());
        //shape.addPort(endPort, 100, 100, false, sourcePort);
        shape.addPort(endPort, points[1].x - shape.getZoomX(), points[1].y - shape.getZoomY(), false, sourcePort);

        //add ports to the canvas array for regularShapes
        //shape.canvas.regularShapes.insert(sourcePort).insert(endPort);
        //create the connection
        connection = new PMFlow({
            srcPort: sourcePort,
            destPort: endPort,
            segmentColor: new PMUI.util.Color(0, 0, 0),
            name: '',
            canvas: shape.canvas,
            segmentStyle: shape.connectionType.segmentStyle,
            flo_type: shape.connectionType.type
        });
        connection.setSrcDecorator(new PMUI.draw.ConnectionDecorator({
            width: 11,
            height: 11,
            canvas: canvas,
            decoratorPrefix: (typeof shape.connectionType.srcDecorator !== 'undefined'
                    && shape.connectionType.srcDecorator !== null) ?
                    shape.connectionType.srcDecorator : 'mafe-sequence',
            decoratorType: 'source',
            parent: connection
        }));
        connection.setDestDecorator(new PMUI.draw.ConnectionDecorator({
            width: 11,
            height: 11,
            canvas: canvas,
            decoratorPrefix: (typeof shape.connectionType.destDecorator !== 'undefined'
                    && shape.connectionType.destDecorator !== null) ?
                    shape.connectionType.destDecorator : 'mafe-sequence',
            decoratorType: 'target',
            parent: connection
        }));
        connection.canvas.commandStack.add(new PMUI.command.CommandConnect(connection));

        //connect the two ports
        connection.connect();
        connection.setSegmentMoveHandlers();

        //add the connection to the canvas, that means insert its html to
        // the DOM and adding it to the connections array
        canvas.addConnection(connection);

        // Filling PMFlow fields
        connection.setTargetShape(endPort.parent);
        connection.setOriginShape(sourcePort.parent);
        connection.savePoints();

        // now that the connection was drawn try to create the intersections
        connection.checkAndCreateIntersectionsWithAll();

        //attaching port listeners
        sourcePort.attachListeners(sourcePort);
        endPort.attachListeners(endPort);

        // finally trigger createEvent
        canvas.triggerCreateEvent(connection, []);
        connection.flo_state = connection.points;
        return connection;
    }

    function findBestPorts (sourceShape, shape) {

        var result = [];
        distance = 99999999;
        midPoints = getMiddlePoints(sourceShape);
        midPoints2 = getMiddlePoints(shape);
        for (i = 0; i < midPoints.length; i += 1) {
            initPoint = midPoints[i];
            for (j = 0; j < midPoints2.length; j += 1) {
                secondPoint = midPoints2[j];
                if (distance > initPoint.getManhattanDistance(secondPoint)) {
                    distance = initPoint.getManhattanDistance(midPoints2[j]);
                    result[0] = (initPoint);
                    result[1] = (midPoints2[j]);
                }
            }
        }
        return result;
    }

    function getMiddlePoints (shape) {
        return [
            new PMUI.util.Point(Math.round(shape.zoomWidth / 2) + shape.getZoomX(), 0 + shape.getZoomY()), // TOP
            new PMUI.util.Point(shape.zoomWidth + shape.getZoomX(), Math.round(shape.zoomHeight / 2) + shape.getZoomY()), // RIGHT
            new PMUI.util.Point(Math.round(shape.zoomWidth / 2) + shape.getZoomX(), shape.zoomHeight + shape.getZoomY()), // BOTTOM
            new PMUI.util.Point(0 + shape.getZoomX(), Math.round(shape.zoomHeight / 2) + shape.getZoomY())               // LEFT
        ];
    }

    function loadConnections () {
        var row, connection, dt = shape.getPorts().asArray();
        for (var i = 0; i < dt.length; i++) {
            connection = dt[i].getConnection();
            //connectio.getSrcPort().getParent().getID() //get source id
            if (shape.getID() !== connection.getDestPort().getParent().getID() && shape.gat_default_flow !== connection.flo_uid) {
                row = addRow();
                row.getField('act_name').setValue(connection.getDestPort().getParent().getID());
                row.getField('act_name').setUID(connection.getDestPort().getParent().getID());
                row.getField('flo_condition').setValue(connection.getFlowCondition());

                row.getItems()[2].style.addProperties({display: 'none'});
                row.getItems()[2].controls[0].button.setButtonType('error');
                $(row.getItems()[2].getHTML()).find("a").css({
                    padding : "5px"
                })
                formRoutingRule.addItem(row);
                for (var j = 0; j < formRoutingRule.getItems().length; j++) {
                    formRoutingRule.getItems()[j].style.addProperties({'padding': 'initial'});
                }
                row.getItems()[0].dom.labelTextContainer.style.display = 'none';
                row.getItems()[1].dom.labelTextContainer.style.display = 'none';
            }
        }
    }

    function isConnection (sourceShape, shape) {
        var connection;
        var dt = sourceShape.getPorts().asArray();
        for (var i = 0; i < dt.length; i++) {
            connection = dt[i].getConnection();
            if (sourceShape.getID() === connection.getSrcPort().getParent().getID() &&
                    shape.getID() === connection.getDestPort().getParent().getID()) {
                return connection;
            }
        }
        return false;
    }

    function deleteRow () {
        arrayShapeIdRemoved.push(formPanelSelected.getField('act_name').getValue());
        formRoutingRule.removeItem(formPanelSelected);
        PMDesigner.msgFlash('Routing rule removed correctly'.translate(), windowConnections.footer);
    }

    function enableSorting() {
        var index = 0;
        var div = $(formRoutingRule.getHTML()).find(">div:nth-child(2)").css({"overflow": "initial"});
        div.sortable({
            items: '>div',
            placeholder: 'steps-placeholder',
            cursor: "move",
            change: function (event, ui) {
                index = ui.placeholder.index();
            },
            start: function (event, ui) {
            },
            stop: function (event, ui) {
                var dt = [],
                    row,
                    formPanelSelected,
                    id,
                    i,
                    shapeDest,
                    connection;

                ui.item.parent().find(">div").each(function (i, e) {
                    dt.push(PMUI.getPMUIObject(e));
                });
                for (var i = 0; i < dt.length; i++) {
                    formPanelSelected = dt[i];
                    arrayShapeIdRemoved.push(formPanelSelected.getField('act_name').getValue());
                    formRoutingRule.removeItem(formPanelSelected);
                }
                for ( i = 0; i < dt.length; i += 1) {
                    row = addRow();
                    row.getItems()[2].style.addProperties({display: 'none'});
                    row.getItems()[2].controls[0].button.setButtonType('error');
                    $(row.getItems()[2].getHTML()).find("a").css({
                        padding : "5px"
                    })
                    formRoutingRule.addItem(row);
                    for (var j = 0; j < formRoutingRule.getItems().length; j++) {
                        formRoutingRule.getItems()[j].style.addProperties({'padding': 'initial'});
                    }
                    row.getItems()[0].dom.labelTextContainer.style.display = 'none';
                    row.getItems()[1].dom.labelTextContainer.style.display = 'none';
                    row.getField('act_name').setValue(dt[i].getField('act_name').getValue());
                    row.getField('flo_condition').setValue(dt[i].getField('flo_condition').getValue());
                    id = dt[i].getField('act_name').getValue();
                    shapeDest = PMUI.getActiveCanvas().getCustomShapes().find('id', id);
                    connection = isConnection(shape, shapeDest);
                }
                enableSorting();
            }
        });
    }
};

PMDesigner.RoutingRuleDeleteAllFlow = function (shape) {
    var warningMessageWindowDelete = new PMUI.ui.MessageWindow({
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title : 'Routing Rule'.translate(),
        id: 'warningMessageWindowDelete',
        message: 'Do you want to delete all routing rules?'.translate(),
        footerItems: [
			{
                id: 'warningMessageWindowDeleteButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDelete.close();
                },
				buttonType : "error"
            },{
                id: 'warningMessageWindowDeleteButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    deleteAllConnection();
                    warningMessageWindowDelete.close();
                },
				buttonType : "success"
            }
        ]
    });
    function deleteAllConnection () {
        PMUI.getActiveCanvas().emptyCurrentSelection();
        //IMPORTANT: You must empty elements in another array due to the array reference indices managed.
        //referer: PMDesigner.canvas.removeConnection & element.getPorts().asArray()
        var connection, elements = [];
        var ports = shape.getPorts().asArray();
        for (var i = 0; i < ports.length; i++) {
            elements.push(ports[i]);
        }
        var sw = false;
        for (var i = 0; i < elements.length; i++) {
            connection = elements[i].getConnection();
            if (shape.getID() !== connection.getDestPort().getParent().getID()) {
                PMUI.getActiveCanvas().setCurrentConnection(connection);
                PMUI.getActiveCanvas().removeElements();
                connection.saveAndDestroy();
                PMUI.getActiveCanvas().removeConnection(connection);
                sw = true;
            }
        }
        var msg = sw ? 'Routing rules deleted successfully' : 'There aren\'t routing rules';
        PMDesigner.msgFlash(msg.translate(), document.body);
    }
    warningMessageWindowDelete.open();
    warningMessageWindowDelete.showFooter();
    warningMessageWindowDelete.dom.titleContainer.style.height = '17px';
};

PMDesigner.RoutingRuleSetOrder = function (diagram) {
    var restClient = new PMRestClient({
        endpoint: 'update-route-order-from-project',
        typeRequest: 'update',
        data: {},
        functionSuccess: function () {
            PMDesigner.msgFlash('Saved correctly'.translate(), document.body, 'success',3000, 5);
        }
    });
    restClient.executeRestClient();
};
PMDesigner.dynaformDesigner = function (data) {
    var old = PMUI.activeCanvas;
    PMUI.activeCanvas = false;
    var a = new FormDesigner.main.Designer(data);
    a.show();
    a.onHide = function () {
        PMUI.activeCanvas = old;
    };
    return a;
};

PMDesigner.complexRoutingRule = function (shape) {
    var formRoutingRule,
        formPanelSelected,
        arrayShapeIdRemoved = [],
        buttonAdd,
        windowConnections,
        warningMessageWindowDelete,
        containerLabels,
        deleteButton;

    //Window
        //button add routing rule
    buttonAdd = new PMUI.ui.Button({
        id: 'routingRuleButtonAdd',
        text: 'Add Routing Rule'.translate(),
        style: {
            cssProperties: {
                marginLeft:'50px',
                marginTop:'10px',
                marginBottom:'10px',
                fontSize: '16px'
            }
        },
        buttonType : 'success',
        height:31,
        handler : function (){
            var item, btnDel;
            if (countActivities() > 0) {
                item = addRow();
                item.getItems()[2].style.addProperties({display:'none'});
                item.getItems()[2].controls[0].button.setButtonType('error');
                formRoutingRule.addItem(item);
                for (var i=0 ; i < formRoutingRule.getItems().length ; i++){
                    //formRoutingRule.getItems()[i].style.addProperties({'box-sizing': 'initial'});
                    //item.style.addProperties({padding : 'initial'});
                    formRoutingRule.getItems()[i].style.addProperties({'padding': 'initial'});
                }
                item.getItems()[0].dom.labelTextContainer.style.display = "none";
                item.getItems()[1].dom.labelTextContainer.style.display = "none";
                
            } else {
                PMDesigner.msgFlash('There are no items.'.translate(), windowConnections.footer);
            }
        }
    });
        //button Save
    buttonSave = new PMUI.ui.Button({
        id: 'windowConnectionsButtonSave',
        text: 'Apply'.translate(),
        handler: function () {
            removeConnectionsIntoCanvas();
            saveConnections();
        },
        buttonType : 'success',
        height : 31
    });
        //Button cancel
    buttonCancel = new PMUI.ui.Button({
        id: 'windowConnectionsButtonCancel',
        text: 'Cancel'.translate(),
        buttonType : 'error',
        handler : function () {
            if (formRoutingRule.isDirty()) {
                warningMessageWindowDirty.open();
                warningMessageWindowDirty.showFooter();
            } else {
                windowConnections.close();
            }
        }
    });
    
    windowConnections = new PMUI.ui.Window({
        id: 'windowConnections',
        title: 'Routing Rule'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        footerAlign : 'right',
        buttonPanelPosition: 'top',
        items : [
                 buttonAdd
                 ],
        buttons: [
            buttonCancel,
            buttonSave
        ]
    });
    windowConnections.showFooter();
    //END WINDOW

    containerLabels = new PMUI.core.Panel({
        layout :  'hbox',
        width : 'auto',
        height : 29,
        style : {
        	cssProperties : {
        		'border-bottom': '1px solid #c0c0c0'
        	}
        }
    });

    var labelNextTask = new PMUI.ui.TextLabel({
        text: 'Next Task'.translate(),
        style : {
        	cssProperties : {
        		'font-weight': 'bold'
        	}
        }
    });

    var labelCondition = new PMUI.ui.TextLabel({
        text: 'Description'.translate(),
        style : {
        	cssProperties : {
        		'font-weight': 'bold'
        	}
        }
    });
    
    containerLabels.addItem(labelNextTask);
    containerLabels.addItem(labelCondition);
    
    windowConnections.addItem(containerLabels);

    formRoutingRule = new PMUI.form.Form({
        id: 'formRoutingRule',
        visibleHeader: false,
        width: DEFAULT_WINDOW_WIDTH - 60,
        height: 'auto',
        items: [],
        style : {
            cssProperties : {
                'margin-left' : '35px'
            }
        }
    });

    var warningMessageWindowDelete = new PMUI.ui.MessageWindow({
        id: 'warningMessageWindowDelete',
        windowMessageType : 'warning',
        width : 490,
        title : "Routing Rule".translate(),
        bodyHeight : 'auto',
        message: 'Do you want to delete this routing rule?'.translate(),
        footerItems: [
			{
                id: 'warningMessageWindowDeleteButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDelete.close();
                },
				buttonType : "error"
            },{
                id: 'warningMessageWindowDeleteButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    deleteRow();
                    warningMessageWindowDelete.close();
                },
				buttonType : "success"
            }
        ]
    });

    var warningMessageWindowDirty = new PMUI.ui.MessageWindow({
        id: 'warningMessageWindowDirty',
        windowMessageType : 'warning',
        width : 490,
        bodyHeight : 'auto',
        title: "Routing Rule".translate(),
        message: 'Are you sure you want to discard your changes?'.translate(),
        footerItems: [{
                id: 'warningMessageWindowDirtyButtonNo',
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDirty.close();
                },
                buttonType : "error"
            },
			{
                id: 'warningMessageWindowDirtyButtonYes',
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    warningMessageWindowDirty.close();
                    windowConnections.close();
                },
                buttonType : "success"
            }
        ]
    });
    
    //main
    formRoutingRule.hideFooter();
    windowConnections.addItem(formRoutingRule);
    windowConnections.open();
    labelNextTask.setWidth(382);
    labelNextTask.style.addProperties({padding:'5px 0px 0px 50px'});
    labelCondition.setWidth(410);
    labelCondition.style.addProperties({padding:'5px 0px 0px 0px'});
    containerLabels.style.addProperties({'border-bottom': '1px solid #e7e7e7'});
    //windowConnections.setTitle('Routing Rule'.translate() + ' - ' + shape.gat_type);
    windowConnections.setTitle('Routing Rule'.translate() + ' - ' + ((shape.gat_type==='COMPLEX') ? 'Exclusive (Manual)'.translate(): shape.gat_type));
    loadConnections(); 
    
    
    
//functions 
    function countActivities () {
    //Important! Any changes to synchronize the assessment of the condition 
    //of the functions: countActivities and loadActivities
    var n = 0;
    var dt = PMDesigner.project.getDirtyObject().diagrams[0].activities;
    for (var i = 0; i < dt.length; i++) {
        n = n + 1;
    }

    var dt = PMDesigner.project.getDirtyObject().diagrams[0].events;
    for (var i = 0; i < dt.length; i++) {
        if (dt[i].evn_type !== 'START') {
            n = n + 1;
        }
    }
	    return n;
	};
	
	function addRow () {
	
	    var dropDownControl, description, deleteButton, newRow;
	
	    newRow = new PMUI.form.FormPanel ({
	        layout : 'hbox'
	    });
	
	    dropDownControl = new PMUI.field.DropDownListField({
	        id: 'dropdownNextTask',
	        name: 'act_name',
	        valueType: 'string',
	        label: 'Next Task'.translate(),
	        labelPosition: 'top',
	        labelVisible: false,
	        value: '',
	        readOnly: true,
	        controlsWidth : 360,
	        proportion : 1.1,
	        style : {
	        	cssProperties : {
	        		'vertical-align': 'top'
	        	}
	        }
	    });
	
	    description = new PMUI.field.TextField({
	        id: 'textCondition',
	        pmType: 'text',
	        name: 'flo_description',
	        valueType: 'string',
	        label: 'Description'.translate(),
	        labelPosition: 'top',
	        labelVisible: false,
	        controlsWidth: 320,
	        required: true,
	        style : {
	        	cssProperties : {
	        		'vertical-align': 'top'
	        	}
	        }
	    });
	
	    deleteButton = new PMUI.field.ButtonField({
	        id: 'buttonDelete',
	        value : 'Delete'.translate(),
	        handler : function (e,a) {
	        	for (var i = 0 ; i < formRoutingRule.getItems().length ; i++){
	        		if ( formRoutingRule.getItems()[i].getItems()[2].controls[0].button.id == this.id){
	        			formPanelSelected = formRoutingRule.getItems()[i];
	                    warningMessageWindowDelete.open();
	                    warningMessageWindowDelete.dom.titleContainer.style.height="17px";
	                    warningMessageWindowDelete.showFooter();
	        		}
	        	}
	        	
	        },
	        name : 'delete',
	        labelVisible : false,
	        buttonAling : 'left',
	        controlsWidth : 100,
	        proportion : 0.3,
	        style : {
	        	cssProperties : {
	        		'vertical-align': 'top'
	        	}
	        }
	    });
	
	    newRow.addItem(dropDownControl);
	    newRow.addItem(description);
	    newRow.addItem(deleteButton);
	    loadActivities(dropDownControl);
	    return newRow;
	};
	
	function loadActivities (dropdown) {
	    //Important! Any changes to synchronize the assessment of the condition 
	    //of the functions: countActivities and loadActivities
	    dropdown.clearOptions();
	    dropdown.setUID = function (uid) {
	        this.uid = uid;
	    };
	    dropdown.getUID = function () {
	        return this.uid;
	    };
	    dropdown.addOptionGroup({
	        label: 'Task'.translate(),
	        selected: true,
	        options: []
	    });
	    dropdown.addOptionGroup({
	        label: 'Sub-process'.translate(),
	        options: []
	    });
	    var dt = PMDesigner.project.getDirtyObject().diagrams[0].activities, nameGroup;
	    dt = dt.sort(function (a, b) {
	        return a.act_name.toString().toLowerCase() > b.act_name.toString().toLowerCase();
	    });
	    for (var i = 0; i < dt.length; i++) {
	        nameGroup = dt[i].act_type === 'TASK' ? 'Task'.translate() : 'Sub-process'.translate();
	        dropdown.addOption({
	            value: dt[i].act_uid,
	            label: dt[i].act_name
	        }, nameGroup);
	    }
	
	    dropdown.addOptionGroup({
	        label: 'End of process'.translate(),
	        options: []
	    });
	    var dt = PMDesigner.project.getDirtyObject().diagrams[0].events;
	    dt = dt.sort(function (a, b) {
	        return a.evn_name.toString().toLowerCase() > b.evn_name.toString().toLowerCase();
	    });
	    for (var i = 0; i < dt.length; i++) {
	        if (dt[i].evn_type !== 'START') {
	            dropdown.addOption({
	                value: dt[i].evn_uid,
	                label: dt[i].evn_name
	            }, 'End of process'.translate());
	        }
	    }
	};
	
	function removeConnectionsIntoCanvas () {
	    var shapeDest, connection, dt;
	    for (var j = 0; j < arrayShapeIdRemoved.length; j++) {
	        shapeDest = getShapeForId(arrayShapeIdRemoved[j]);
	        dt = shape.getPorts().asArray();
	        for (var i = 0; i < dt.length; i++) {
	            connection = dt[i].getConnection();
	            if (shape.getID() === connection.getSrcPort().getParent().getID() &&
	                    shapeDest.getID() === connection.getDestPort().getParent().getID()) {
	                PMDesigner.canvas.emptyCurrentSelection();
	                PMDesigner.canvas.setCurrentConnection(connection);
	                PMDesigner.canvas.removeElements();
	                connection.saveAndDestroy();
	                PMDesigner.canvas.removeConnection(connection);
	                break;
	            }
	        }
	    }
	    arrayShapeIdRemoved = [];
	};
	
	function editShapeDestConnection (shapeDest, oldShape) {
	    var connection, canvas = PMDesigner.canvas;
	    connection = isConnection(shape, oldShape);
	    oldShape.removePort(connection.destPort);
	    shapeDest.addPort(connection.destPort, 100, 100,
	            false, connection.srcPort);
	
	    connection.canvas.commandStack.add(new PMUI.command.CommandConnect(connection));
	    connection.connect();
	    canvas.triggerPortChangeEvent(connection.destPort);
	};
	
	function createEndShape () {
	    //referer /processmaker/vendor/colosa/pmUI/src/behavior/ContainerDrop.js
	    //method ContainerDropBehavior.prototype.onDrop line 94-105.
	    var customShape, canvas = PMDesigner.canvas, command;
	    customShape = canvas.shapeFactory('END');
	
	    var x = shape.getX() + shape.getWidth();
	    var y = shape.getY() + shape.getHeight() + 20;
	
	    canvas.addElement(customShape, x, y,
	            customShape.topLeftOnCreation);
	
	    //since it is a new element in the designer, we triggered the
	    //custom on create element event
	    canvas.updatedElement = customShape;
	
	    // create the command for this new shape
	    command = new PMUI.command.CommandCreate(customShape);
	    canvas.commandStack.add(command);
	    command.execute();
	    return customShape;
	};
	
	function saveConnections () {
	    if (!formRoutingRule.isValid()) {
	        return;
	    }
	    var dt = formRoutingRule.getItems(), id, oldId, shapeDest, oldShapeDest, connection;
	    for (var i = 0 ; i < dt.length; i++) {
	        id = dt[i].getField('act_name').getValue();
	        oldId = dt[i].getField('act_name').getUID();
	        if (id !== '0') {
	            if (oldId === undefined) {
	                shapeDest = getShapeForId(id);
	                createConnection(shape, shapeDest).setFlowCondition(dt[i].getField('flo_description').getValue());
	            }
	            if (oldId !== undefined && id === oldId) {
	                shapeDest = getShapeForId(id);
	                connection = isConnection(shape, shapeDest);
	                $a = connection;
	                connection.setFlowCondition(dt[i].getField('flo_description').getValue());
	            }
	            if (oldId !== undefined && id !== oldId) {
	                shapeDest = getShapeForId(id);
	                oldShapeDest = getShapeForId(oldId);
	                connection = isConnection(shape, oldShapeDest);
	                connection.setFlowCondition(dt[i].getField('flo_description').getValue()); 
	                editShapeDestConnection(shapeDest, oldShapeDest);
	            }
	        } else {
	            var customShape = createEndShape();
	            createConnection(shape, customShape);
	        }
	    }
	    windowConnections.close();
	    PMDesigner.msgFlash('Saved correctly'.translate(), document.body);
	    PMDesigner.project.dirty = true;
	};
	
	function getShapeForId (id) {
	    var dt = PMDesigner.canvas.getChildren().asArray();
	    for (var i = 0; i < dt.length; i++) {
	        if (dt[i].act_uid === id || dt[i].evn_uid === id) {
	            return dt[i];
	        }
	    }
	    return null;
	};
	
	function createConnection (sourceShape, shape) {
	    //referer to /processmaker/vendor/colosa/MichelangeloFE/src/connectiondrop.js
	    //method PMConnectionDropBehavior.prototype.onDrop
	    var sourcePort, endPort, connection, canvas = PMDesigner.canvas;
	    sourcePort = new PMUI.draw.Port({
	        width: 10,
	        height: 10
	    });
	    endPort = new PMUI.draw.Port({
	        width: 10,
	        height: 10
	    });
	
	    sourceShape.addPort(sourcePort, 100, 100);
	    shape.addPort(endPort, 100, 100,
	            false, sourcePort);
	
	    //add ports to the canvas array for regularShapes
	    //shape.canvas.regularShapes.insert(sourcePort).insert(endPort);
	    //create the connection
	    connection = new PMFlow({
	        srcPort: sourcePort,
	        destPort: endPort,
	        segmentColor: new PMUI.util.Color(92, 156, 204),
	        name: "",
	        canvas: shape.canvas,
	        segmentStyle: shape.connectionType.segmentStyle,
	        flo_type: shape.connectionType.type
	    });
	    connection.setSrcDecorator(new PMUI.draw.ConnectionDecorator({
	        width: 11,
	        height: 11,
	        canvas: canvas,
	        decoratorPrefix: (typeof shape.connectionType.srcDecorator !== 'undefined'
	                && shape.connectionType.srcDecorator !== null) ?
	                shape.connectionType.srcDecorator : "mafe-sequence",
	        decoratorType: "source",
	        parent: connection
	    }));
	    connection.setDestDecorator(new PMUI.draw.ConnectionDecorator({
	        width: 11,
	        height: 11,
	        canvas: canvas,
	        decoratorPrefix: (typeof shape.connectionType.destDecorator !== 'undefined'
	                && shape.connectionType.destDecorator !== null) ?
	                shape.connectionType.destDecorator : "mafe-sequence",
	        decoratorType: "target",
	        parent: connection
	    }));
	    connection.canvas.commandStack.add(new PMUI.command.CommandConnect(connection));
	
	    //connect the two ports
	    connection.connect();
	    connection.setSegmentMoveHandlers();
	
	    //add the connection to the canvas, that means insert its html to
	    // the DOM and adding it to the connections array
	    canvas.addConnection(connection);
	
	    // Filling PMFlow fields
	    connection.setTargetShape(endPort.parent);
	    connection.setOriginShape(sourcePort.parent);
	    connection.savePoints();
	
	    // now that the connection was drawn try to create the intersections
	    connection.checkAndCreateIntersectionsWithAll();
	
	    //attaching port listeners
	    sourcePort.attachListeners(sourcePort);
	    endPort.attachListeners(endPort);
	
	    // finally trigger createEvent
	    canvas.triggerCreateEvent(connection, []);
	    return connection;
	};
	
	function loadConnections () {
	    var row, connection, dt = shape.getPorts().asArray();
	    for (var i = 0; i < dt.length; i++) {
	        connection = dt[i].getConnection();
	        //connectio.getSrcPort().getParent().getID() //get source id
	        if (shape.getID() !== connection.getDestPort().getParent().getID()) {
	            row = addRow();
	            row.getField('act_name').setValue(connection.getDestPort().getParent().getID());
	            row.getField('act_name').setUID(connection.getDestPort().getParent().getID());
	            row.getField('flo_description').setValue(connection.getFlowCondition());
	            
	            row.getItems()[2].style.addProperties({display:'none'});
	            row.getItems()[2].controls[0].button.setButtonType('error');
	            formRoutingRule.addItem(row);
	            for (var j=0 ; j < formRoutingRule.getItems().length ; j++){
	                formRoutingRule.getItems()[j].style.addProperties({'padding': 'initial'});
	            }
	            row.getItems()[0].dom.labelTextContainer.style.display = "none";
	            row.getItems()[1].dom.labelTextContainer.style.display = "none";                
	        }
	    }
	};
	
	function isConnection (sourceShape, shape) {
	    var connection;
	    var dt = sourceShape.getPorts().asArray();
	    for (var i = 0; i < dt.length; i++) {
	        connection = dt[i].getConnection();
	        if (sourceShape.getID() === connection.getSrcPort().getParent().getID() &&
	                shape.getID() === connection.getDestPort().getParent().getID()) {
	            return connection;
	        }
	    }
	    return false;
	};
	
	function deleteRow () {
	    arrayShapeIdRemoved.push(formPanelSelected.getField('act_name').getValue());
	    formRoutingRule.removeItem(formPanelSelected);
	    PMDesigner.msgFlash('Routing rule removed correctly'.translate(), windowConnections.footer);
	}

};
//DesignerView = function () {
//    DesignerView.prototype.init.call(this);
//};
//DesignerView.prototype.canvas = new PMCanvas({
//    id: PMUI.generateUniqueId(),
//    width: 490,
//    height: 490,
//    drop: {
//        pmType: 'container'
//    },
//    container: 'regularcontainer',
//    readOnly: false
//});
//DesignerView.prototype.init = function () {
//};
//DesignerView.prototype.load = function () {
//    var that = this;
//    var restClient = new PMRestClient({
//        typeRequest: 'post',
//        multipart: true,
//        data: {
//            calls: [{
//                    url: 'project/' + PMDesigner.project.id,
//                    method: 'GET'
//                }
//            ]
//        },
//        functionSuccess: function (xhr, response) {
//            var index, activities, gateways, events, artifacts, connections, diagram;
//            diagram = response[0].response.diagrams[0];
//            for (index = 0; index < diagram.activities.length; index++) {
//                activities = diagram.activities[index];
//                that.createShape(activities.act_type, activities);
//            }
//            for (index = 0; index < diagram.events.length; index++) {
//                events = diagram.events[index];
//                that.createShape(events.evn_type, events);
//            }
//            for (index = 0; index < diagram.gateways.length; index++) {
//                gateways = diagram.gateways[index];
//                that.createShape(gateways.gat_type, gateways);
//            }
//            for (index = 0; index < diagram.artifacts.length; index++) {
//                artifacts = diagram.artifacts[index];
//                that.createShape(artifacts.art_type, artifacts);
//            }
//            for (index = 0; index < diagram.flows.length; index++) {
//                connections = diagram.flows[index];
//                that.createFlow(connections);
//            }
//            that.removeShapeEvents();
//        },
//        functionFailure: function (xhr, response)
//        {
//            PMDesigner.msgWinError(response.error.message);
//        }
//    });
//    restClient.setBaseEndPoint('');
//    restClient.executeRestClient();
//};
//DesignerView.prototype.show = function () {
//    var w = new PMUI.ui.Window({
//        title: 'Map View',
//        width: 550,
//        height: 570,
//        modal: true,
//        closable: true,
//        visibleFooter: true
//    });
//    w.open();
//    w.addItem(this.canvas);
//    this.canvas.setPositionMode('relative');
//};
//DesignerView.prototype.createShape = function (type, shape) {
//    var customShape, transformShape;
//    transformShape = this.setShapeValues(type, shape);
//    customShape = this.canvas.shapeFactory(type, transformShape);
//    this.canvas.addElement(customShape, parseInt(shape.bou_x, 10), parseInt(shape.bou_y, 10), true);
//    customShape.attachListeners();
//};
//DesignerView.prototype.setShapeValues = function (type, options) {
//    switch (type) {
//        case 'TASK':
//        case 'SUB_PROCESS':
//            options.width = parseInt(options.bou_width, 10);
//            options.height = parseInt(options.bou_height, 10);
//            options.id = options.act_uid;
//            options.labels = [{message: options.act_name}];
//            break;
//        case 'START':
//        case 'END':
//            options.id = options.evn_uid;
//            options.labels = [{message: options.evn_name}];
//            break;
//        case 'TEXT_ANNOTATION':
//            options.id = options.art_uid;
//            options.labels = [{message: options.art_name}];
//            break;
//        case 'COMPLEX':
//        case 'EXCLUSIVE':
//        case 'PARALLEL':
//        case 'INCLUSIVE':
//            options.id = options.gat_uid;
//            options.labels = [{message: options.gat_name}];
//            break;
//    }
//    return options;
//};
//DesignerView.prototype.createFlow = function (conn) {
//    var sourceObj,
//            targetObj,
//            startPoint,
//            endPoint,
//            sourcePort,
//            targetPort,
//            connection,
//            positionSourceX,
//            positionSourceY,
//            positionTargetX,
//            positionTargetY,
//            segmentMap = {
//        SEQUENCE: 'regular',
//        MESSAGE: 'segmented',
//        DATAASSOCIATION: 'dotted',
//        ASSOCIATION: 'dotted',
//        DEFAULT: 'regular',
//        CONDITIONAL: 'regular'
//    },
//    srcDecorator = {
//        SEQUENCE: 'mafe-decorator',
//        MESSAGE: 'mafe-decorator_message',
//        DATAASSOCIATION: 'mafe-decorator',
//        ASSOCIATION: 'mafe-decorator_',
//        DEFAULT: 'mafe-decorator_default',
//        CONDITIONAL: 'mafe-decorator_conditional'
//    },
//    destDecorator = {
//        SEQUENCE: 'mafe-decorator',
//        MESSAGE: 'mafe-decorator_message',
//        DATAASSOCIATION: 'mafe-decorator_association',
//        ASSOCIATION: 'mafe-decorator_association',
//        DEFAULT: 'mafe-decorator',
//        CONDITIONAL: 'mafe-decorator'
//    };
//
//    var dt = this.canvas.getCustomShapes().asArray();
//    for (var i = 0; i < dt.length; i++) {
//        if (conn.flo_element_origin === dt[i].id) {
//            sourceObj = dt[i];
//        }
//        if (conn.flo_element_dest === dt[i].id) {
//            targetObj = dt[i];
//        }
//    }
//
//    if (typeof sourceObj === 'object' && typeof targetObj === 'object') {
//        startPoint = new PMUI.util.Point(conn.flo_x1, conn.flo_y1);
//        endPoint = new PMUI.util.Point(conn.flo_x2, conn.flo_y2);
//
//        sourcePort = new PMUI.draw.Port({
//            width: 10,
//            height: 10
//        });
//
//        targetPort = new PMUI.draw.Port({
//            width: 10,
//            height: 10
//        });
//
//        positionSourceX = startPoint.x - sourceObj.absoluteX;
//        positionSourceY = startPoint.y - sourceObj.absoluteY;
//
//        positionTargetX = endPoint.x - targetObj.absoluteX;
//        positionTargetY = endPoint.y - targetObj.absoluteY;
//
//        sourceObj.addPort(sourcePort, positionSourceX, positionSourceY);
//        targetObj.addPort(targetPort, positionTargetX, positionTargetY, false, sourcePort);
//
//        connection = new PMFlow({
//            id: conn.flo_uid,
//            srcPort: sourcePort,
//            destPort: targetPort,
//            canvas: this.canvas,
//            segmentStyle: segmentMap[conn.flo_type],
//            segmentColor: new PMUI.util.Color(92, 156, 204),
//            flo_type: conn.flo_type,
//            name: conn.flo_name,
//            flo_condition: conn.flo_condition,
//            flo_state: conn.flo_state
//        });
//
//        connection.setSrcDecorator(new PMUI.draw.ConnectionDecorator({
//            decoratorPrefix: srcDecorator[conn.flo_type],
//            decoratorType: 'source',
//            style: {
//                cssClasses: []
//            },
//            width: 1,
//            height: 1,
//            canvas: this.canvas,
//            parent: connection
//        }));
//
//        connection.setDestDecorator(new PMUI.draw.ConnectionDecorator({
//            decoratorPrefix: destDecorator[conn.flo_type],
//            decoratorType: 'target',
//            style: {
//                cssClasses: []
//            },
//            width: 1,
//            height: 1,
//            canvas: this.canvas,
//            parent: connection
//        }));
//
//        connection.connect();
//        connection.setSegmentMoveHandlers();
//
//        //add the connection to the canvas, that means insert its html to
//        // the DOM and adding it to the connections array
//        this.canvas.addConnection(connection);
//
//        // Filling mafeFlow fields
//        connection.setTargetShape(targetPort.parent);
//        connection.setOriginShape(sourcePort.parent);
//        connection.savePoints();
//
//        // now that the connection was drawn try to create the intersections
//        connection.checkAndCreateIntersectionsWithAll();
//
//        //attaching port listeners
//        sourcePort.attachListeners(sourcePort);
//        targetPort.attachListeners(targetPort);
//
//        this.canvas.triggerCreateEvent(connection, []);
//    }
//};
//DesignerView.prototype.removeShapeEvents = function () {
//    var dt = this.canvas.getCustomShapes().asArray();
//    for (var i = 0; i < dt.length; i++) {
//        $(dt[i].html).find("*").addBack().off();
//    }
//};
//DesignerView.prototype.setAllShapeColor = function (color) {
//    //a = dt[i].html.getElementsByClassName('pmui pmui-layer task')[0];
//    var a, dt = this.canvas.getCustomShapes().asArray();
//    for (var i = 0; i < dt.length; i++) {
//        a = dt[i].html.getElementsByClassName('pmui pmui-layer mafe-activity-task')[0];
//        if (a === undefined) {
//            a = dt[i].html.getElementsByClassName('pmui pmui-layer mafe-activity-subprocess')[0];
//        }
//        if (a !== undefined) {
//            a.style.backgroundColor = color;
//        }
//    }
//};
////PMDesigner.mapView = function () {
////    var a = new DesignerView();
////    a.show();
////    a.load();
////    a.setAllShapeColor('red');
//};
var PMVariables = function (options) {
    var that = this;
    this.initialFormAcceptedValuesKeyValue = null;
    this.initialFormAcceptedValuesValue = null;
    this.initialGridAcceptedValuesOrder = [];
    this.validateAcceptedValuesFlag = false;
    this.var_uid = null;
    this.var_name = null;
    this.edit = false;
    this.editRow = null;
    this.dirtyAcceptedValue = false;
    this.fieldInfo = null;
    this.onSave = new Function();
    this.onEdit = new Function();
    this.clickedClose = true;
    this.editingOptions = false;
    this.editRow = null;
    this.currentVariable = null;
    this.onWindowClose = new Function();
    this.buttonCreate = new PMUI.ui.Button({
        id: 'buttonCreate',
        text: 'Create'.translate(),
        height: '36px',
        width: 100,
        style: {
            cssClasses: [
                'mafe-button-create'
            ]

        },
        handler: function () {
            that.showForm();
        }
    });
    
    this.buttonCreateInputDocument = new PMUI.field.ButtonField({
        id: 'buttonCreateInputDocument',
        value: 'Create'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        proportion: 0.8,
        handler: function (field) {
            var inputDocument = new InputDocument();
            inputDocument.build();
            inputDocument.openFormInMainWindow();
            inputDocument.method = "POST";
        }
    });
    
    this.buttonEditInputDocument = new PMUI.field.ButtonField({
        id: 'buttonEditInputDocument',
        value: 'Edit'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        proportion: 0.8,
        handler: function (field) {
            var inp_doc_uid = that.formVariables.getField('inp_doc_uid').getValue();
            if(inp_doc_uid) {
                var inputDocument = new InputDocument();
                inputDocument.build();
                inputDocument.inputDocumentOriginDataForUpdate = {};
                inputDocument.openFormInMainWindow();
                inputDocument.inputDocumentFormGetProxy(inp_doc_uid);
            }
        }
    });
    
    that.buttonCreateInputDocument.controls[0].button.setButtonType("success");
    that.buttonCreateInputDocument.controls[0].button.setStyle({cssClasses: ["mafe-button-create-variable","pmui-success"],cssProperties: {padding: "8px 15px", border: "0px"}});
    that.buttonEditInputDocument.controls[0].button.setButtonType("success");
    that.buttonEditInputDocument.controls[0].button.setStyle({cssClasses: ["mafe-button-edit-variable","pmui-success"],cssProperties: {padding: "8px 15px", border: "0px"}});
    
    var inp_doc_uid = new PMUI.field.DropDownListField({
        id: "inp_doc_uid",
        name: "inp_doc_uid",
        value: "",
        required: true,
        label: "Related Input Document".translate(),
        controlsWidth: 460,
        valueType: "string",
        labelPosition: "top"
    });
    
    that.setInputDocuments(inp_doc_uid);
    
    this.formVariables = new PMUI.form.Form({
        id: 'formVariables',
        width: 'auto',
        title: '',
        visibleHeader: false,
        items: [
            {
                pmType: 'text',
                label: 'Variable Name'.translate(),
                placeholder: "Name".translate(),
                id: 'variableName',
                value: '',
                name: 'var_name',
                required: true,
                valueType: 'string',
                maxLength: 60,
                controlsWidth: 460,
                validators: [
                    {
                        pmType: "regexp",
                        criteria: /^[0-9a-zA-Z\_]+$/,
                        errorMessage: "A valid variable starts with a letter or underscore, followed by any number of letters, numbers, or underscores.".translate()
                    }
                ]
            }, {
                pmType: 'text',
                label: 'Label'.translate(),
                placeholder: 'Label'.translate(),
                id: 'variableLabel',
                value: 'label',
                name: 'var_label',
                valueType: 'string',
                maxLength: 60,
                controlsWidth: 460,
                visible: false
            }, {
                pmType: 'dropdown',
                label: 'Variable Type'.translate(),
                placeholder: 'Variable type'.translate(),
                id: 'varType',
                value: 'string',
                name: 'var_field_type',
                required: true,
                valueType: 'string',
                controlsWidth: 460,
                options: [
                    {
                        label: 'String',
                        value: 'string'
                    }, {
                        label: 'Integer',
                        value: 'integer'
                    }, {
                        label: 'Float',
                        value: 'float'
                    }, {
                        label: 'Boolean',
                        value: 'boolean'
                    }, {
                        label: 'Datetime',
                        value: 'datetime'
                    }, {
                        label: 'Grid',
                        value: 'grid'
                    }, {
                        label: 'Array',
                        value: 'array'
                    }, {
                        label: "File",
                        value: "file"
                    }
                ],
                onChange: function (newValue, oldValue) {
                    var sw = that.gridAcceptedValues.visible === false ? true : (that.gridAcceptedValues.getData().length === 0);
                    var sw2 = that.formBooleanOptions.visible === false ? true : (that.formBooleanOptions.getField('trueOption').getValue() + that.formBooleanOptions.getField('falseOption').getValue()) === '';
                    if (sw && sw2) {
                        that.changeViewFieldType(newValue, oldValue);
                        that.formAcceptedValues.reset();
                        that.gridAcceptedValues.clearItems();
                        that.formBooleanOptions.reset();
                        return;
                    }
                    var message_window = new PMUI.ui.MessageWindow({
                        id: 'messageWindowCancel',
                        width: 490,
                        title: 'Variables'.translate(),
                        windowMessageType: 'warning',
                        bodyHeight: 'auto',
                        message: "This action will delete all options. Do you want to continue?".translate(),
                        footerItems: [
                            {
                                id: 'messageWindowNo',
                                text: 'No'.translate(),
                                handler: function () {
                                    message_window.close();
                                    that.formVariables.getField('var_field_type').setValue(oldValue);
                                },
                                buttonType: "error"
                            },
                            {
                                id: 'messageWindowYes',
                                text: 'Yes'.translate(),
                                handler: function () {
                                    message_window.close();
                                    that.changeViewFieldType(newValue, oldValue);
                                    that.formAcceptedValues.reset();
                                    that.gridAcceptedValues.clearItems();
                                    that.formBooleanOptions.reset();
                                },
                                buttonType: "success"
                            }
                        ],
                        onClose: function () {
                        }
                    });
                    message_window.open();
                    message_window.showFooter();
                }
            }, {
                pmType: "panel",
                id: "inp_doc_uidPanel",
                fieldset: false,
                layout: "hbox",
                items: [
                    inp_doc_uid,
                    that.buttonCreateInputDocument,
                    that.buttonEditInputDocument
                ]
            }, {
                pmType: 'dropdown',
                label: 'Database Connection'.translate(),
                placeholder: 'Database Connection'.translate(),
                id: 'varConnection',
                value: 'none',
                name: 'var_dbconnection',
                controlsWidth: 460,
                options: [{
                        label: 'PM Database',
                        value: 'workflow'
                    }
                ],
                onChange: function (newValue, oldValue) {
                }
            }, {
                pmType: 'textarea',
                label: 'Sql'.translate(),
                placeholder: "Insert a SQL query like: SELECT [Key field], [Label field] FROM [Table name]".translate(),
                id: 'varSql',
                value: '',
                name: 'var_sql',
                valueType: 'string',
                controlsWidth: 460,
                style: {cssClasses: ['mafe-textarea-resize']}
            }, {
                pmType: 'checkbox',
                label: 'Define accepted variable values'.translate(),
                id: "chckboxOption",
                name: 'var_options_control',
                controlsWidth: 460,
                options: [{value: '1', label: ''}],
                onChange: function (newValue, oldValue) {
                    that.changeViewFieldType(that.formVariables.getField('var_field_type').getValue());
                }
            }
        ]
    });
    this.formVariables.getData = function () {
        var data = getData2PMUI(that.formVariables.html);
        return data;
    };
    this.gridVariables = new PMUI.grid.GridPanel({
        id: 'gridVariables',
        pageSize: 10,
        width: '96%',
        style: {
            cssClasses: ['mafe-gridPanel']
        },
        filterPlaceholder: 'Search ...'.translate(),
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return '';
        },
        columns: [{
                id: 'varName',
                title: 'Name'.translate(),
                dataType: 'string',
                columnData: 'var_name',
                alignmentCell: 'left',
                width: '300px',
                sortable: true
            }, {
                id: 'varType',
                title: 'Type'.translate(),
                dataType: 'string',
                alignmentCell: 'left',
                columnData: 'var_field_type',
                sortable: true
            }, {
                id: 'varEdit',
                dataType: 'button',
                title: '',
                buttonLabel: 'Edit'.translate(),
                width: '60px',
                buttonStyle: {
                    cssClasses: [
                        'mafe-button-edit'
                    ]
                },
                onButtonClick: function (row, grid) {
                    that.showFormEdit(row.getData());
                }
            }, {
                id: 'varDelete',
                dataType: 'button',
                title: '',
                buttonLabel: function (row, data) {
                    return 'Delete'.translate();
                },
                width: '70px',
                buttonStyle: {
                    cssClasses: [
                        'mafe-button-delete'
                    ]
                },
                onButtonClick: function (row, grid) {
                    that.del(row.getData(), row, grid);
                }
            }
        ],
        dataItems: null
    });
    this.buttonFieldAdd = new PMUI.field.ButtonField({
        id: 'buttonFieldAdd',
        pmType: 'buttonField',
        value: 'Create'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        controlsWidth: 50,
        proportion: 0.8,
        handler: function (field) {
            that.addAcceptedValue();
        },
        style: {
            cssProperties: {
                "margin-left": "10px"
            }
        }
    });
    this.buttonFieldAdd.controls[0].button.setButtonType("success");
    this.buttonFieldCancel = new PMUI.field.ButtonField({
        id: 'buttonFieldCancel',
        pmType: 'buttonField',
        value: 'Cancel'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        controlsWidth: 55,
        proportion: 0.6,
        handler: function (field) {
            that.clickedClose = false;
            that.cancelAcceptedValue();
            that.editingOptions = false;
        }
    });
    this.buttonFieldCancel.controls[0].button.setButtonType("error");
    this.formAcceptedValues = new PMUI.form.Form({
        id: 'formAcceptedValues',
        width: 800,
        visibleHeader: false,
        items: [
            {
                pmType: 'panel',
                fieldset: false,
                layout: 'hbox',
                items: [{
                        pmType: 'text',
                        name: 'keyValue',
                        id: "variable-keyvalue",
                        label: 'Key'.translate(),
                        //labelWidth: '55%',
                        controlsWidth: 210,
                        proportion: 2.5,
                        valueType: 'string',
                        maxLength: 255,
                        required: true,
                        labelPosition: "top"
                    }, {
                        pmType: 'text',
                        name: 'value',
                        id: "variable-value",
                        label: 'Label'.translate(),
                        //labelWidth: '40%',
                        controlsWidth: 300,
                        valueType: 'string',
                        maxLength: 255,
                        proportion: 3.4,
                        required: true,
                        labelPosition: "top"
                    },
                    that.buttonFieldCancel,
                    that.buttonFieldAdd
                ]
            }
        ]
    });
    this.gridAcceptedValues = new PMUI.grid.GridPanel({
        id: 'gridAcceptedValues',
        pageSize: 5,
        height: 204,
        style: {cssClasses: ['mafe-gridPanel']},
        filterPlaceholder: 'Text to Search'.translate(),
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        filterable: false,
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return '';
        },
        columns: [{
                id: 'keyvalue',
                title: 'Key'.translate(),
                columnData: 'keyValue',
                dataType: 'string',
                alignmentCell: 'left',
                width: 180
            }, {
                id: 'label',
                title: 'Label'.translate(),
                columnData: 'value',
                dataType: 'string',
                alignmentCell: 'left',
                width: 300
            }, {
                id: 'buttonEdit',
                dataType: 'button',
                title: '',
                buttonLabel: 'Edit'.translate(),
                width: 60,
                buttonStyle: {cssClasses: ['mafe-button-edit']},
                onButtonClick: function (row, grid) {
                    that.editRow = row;
                    that.editAcceptedValue(row);
                }
            }, {
                id: 'buttonDelete',
                dataType: 'button',
                title: '',
                buttonLabel: function (row, data) {
                    return 'Delete'.translate();
                },
                width: 75,
                buttonStyle: {cssClasses: ['mafe-button-delete']},
                onButtonClick: function (row, grid) {
                    if (row !== that.editRow){
                        that.deleteAcceptedValue(row);
                    }else{
                        PMDesigner.msgFlash('The row can not be removed, because is being edited.'.translate(), document.getElementById('windowVariables'), 'error', 1000,5);
                    }
                }
            }
        ],
        dataItems: null,
        behavior: 'dragdropsort'
    });
    this.formBooleanOptions = new PMUI.form.Form({
        id: 'formAcceptedValues',
        width: 700,
        visibleHeader: false,
        items: [
            {
                pmType: 'panel',
                legend: 'Options'.translate(),
                fieldset: true,
                layout: 'vbox',
                items: [
                    {
                        pmType: 'panel',
                        layout: 'hbox',
                        items: [
                            new PMLabelField({
                                text: 'Key'.translate(),
                                textMode: 'plain',
                                style: {
                                    cssProperties: {
                                        color: '#AEAEAE',
                                        'font-weight': 'bold'
                                    }
                                },
                                proportion: 0.3
                            }),
                            new PMLabelField({
                                text: 'Label'.translate(),
                                textMode: 'plain',
                                style: {
                                    cssProperties: {
                                        color: '#AEAEAE',
                                        'font-weight': 'bold'
                                    }
                                }
                            })
                        ]
                    },
                    {
                        pmType: 'text',
                        name: 'trueOption',
                        label: 'True'.translate(),
                        controlsWidth: 460,
                        valueType: 'string',
                        maxLength: 100,
                        required: true
                    }, {
                        pmType: 'text',
                        name: 'falseOption',
                        label: 'False'.translate(),
                        controlsWidth: 460,
                        valueType: 'string',
                        maxLength: 100,
                        required: true
                    }
                ]
            }
        ]
    });
    this.isDirtyFormVariables = function () {
        $("input,select,textarea").blur();
        if (this.formVariables.isVisible()) {
            this.validateAcceptedValues();
            if (this.formVariables.isDirty() || this.dirtyAcceptedValue || this.validateAcceptedValuesFlag) {
                //if (this.formVariables.getField("var_options_control").controls[0].selected) {
                var message_window = new PMUI.ui.MessageWindow({
                    id: "messageWindowCancel",
                    width: 490,
                    title: "Variables".translate(),
                    windowMessageType: "warning",
                    bodyHeight: "auto",
                    message: 'Are you sure you want to discard your changes?'.translate(),
                    footerItems: [{
                            id: "messageWindowNo",
                            text: "No".translate(),
                            handler: function ()
                            {
                                message_window.close();
                            },
                            buttonType: "error"
                        },
                        {
                            id: "messageWindowYes",
                            text: "Yes".translate(),
                            handler: function () {
                                if (that.clickedClose) {
                                    that.windowVariables.close();
                                }
                                message_window.close();
                                that.showGrid();
                                that.windowVariables.hideFooter();
                            },
                            buttonType: "success"
                        },
                    ]
                });

                message_window.open();
                message_window.showFooter();
                /*} else {
                 that.showGrid();
                 }*/
            } else {
                if (that.clickedClose) {
                    that.windowVariables.close();
                } else {
                    that.showGrid();
                }
                this.initialFormAcceptedValuesKeyValue = null;
                this.initialFormAcceptedValuesValue = null;
                this.initialGridAcceptedValuesOrder = [];
                that.windowVariables.hideFooter();
            }
        } else {
            this.windowVariables.close();
        }
    };
    this.windowVariables = new PMUI.ui.Window({
        id: 'windowVariables',
        title: 'Variables'.translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        onBeforeClose: function () {
            that.clickedClose = true;
            that.isDirtyFormVariables();
        },
        footerItems: [
            new PMUI.ui.Button({
                id: "windowVariablesCancel",
                text: "Cancel".translate(),

                handler: function () {
                    that.clickedClose = false;
                    that.isDirtyFormVariables();
                },

                buttonType: "error"
            }),

            new PMUI.ui.Button({
                id: "windowVariablesSave",
                text: "Save".translate(),

                handler: function () {
                    if (that.edit) {
                        that.updateVariables();
                    } else {
                        that.saveVariables();
                    }
                },

                buttonType: "success"
            })
        ],
        onClose: function () {
            that.onWindowClose(that.currentVariable);
        },
        visibleFooter: true,
        buttonPanelPosition: "bottom"
    });
    PMVariables.prototype.init.call(this);
};
PMVariables.prototype.init = function () {
    var that = this;

    that.buttonCreate.defineEvents();

    that.windowVariables.addItem(that.gridVariables);
    that.windowVariables.addItem(that.formVariables);
    that.windowVariables.addItem(that.formAcceptedValues);
    that.windowVariables.addItem(that.gridAcceptedValues);
    that.windowVariables.addItem(that.formBooleanOptions);
    that.windowVariables.hideFooter();
    that.windowVariables.open();
    that.customCss();
    $("#formAcceptedValues .pmui-field-message").css("marginLeft", 10);
    $("#gridAcceptedValues").css({"height": "254px"});
    $("#requiredMessage").css({"width": "430px","margin-top":"30px"});
    $("#inp_doc_uid").find(".pmui-field-message:eq(0)").css("left","226px");
    this.formAcceptedValues.panel.html.style.padding = "0px 0px";
    this.formAcceptedValues.getField("keyValue").parent.html.style.padding = "0 0 10px 10px";
    this.formAcceptedValues.getField("keyValue").dom.labelTextContainer.style.width = "100%";
    this.formAcceptedValues.getField("keyValue").controls[0].html.style.marginLeft = "10px";
    this.formAcceptedValues.getField("value").dom.labelTextContainer.style.width = "100%";
    this.formAcceptedValues.getField("value").controls[0].html.style.marginLeft = "10px";

    this.buttonFieldAdd.controls[0].button.setStyle({cssProperties: {padding: "6px 15px"}});
    this.buttonFieldCancel.controls[0].button.setStyle({cssProperties: {padding: "6px 15px"}});

    $('#gridVariables .pmui-textcontrol').css({'margin-top': '5px', width: '250px'});
    that.gridVariables.dom.toolbar.appendChild(that.buttonCreate.getHTML());

    that.showGrid();
    that.loadDataBaseConnections();

    validateKeysField(that.formVariables.getField('var_name').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'isletter', 'isunderscore']);

    that.formAcceptedValues.reset();
    var label = $(this.formBooleanOptions.html).find(".pmui-pmlabelfield");
    $(label[0]).replaceWith($(label[0]).find(".pmui-pmlabelcontrol").css({"font-size": "14px", "margin-right": "88px"}));
    $(label[1]).replaceWith($(label[1]).find(".pmui-pmlabelcontrol").css({"font-size": "14px", "margin-right": "88px"}));
    this.formVariables.panel.html.style.height = "405px";
    this.formVariables.panel.html.style.overflow = "scroll !important";
    $(this.formVariables.panel.html).removeClass("pmui-formpanel");
    $(this.formVariables.panel.html).append(that.formAcceptedValues.html);
    $(this.formVariables.panel.html).append(that.gridAcceptedValues.html);
    $(this.formVariables.panel.html).append(that.formBooleanOptions.html);
    $(that.formAcceptedValues.html).find(".pmui-formpanel").css({"display": "inline-block"});
    $(this.formVariables.panel.html).append($("#requiredMessage"));
    that.windowVariables.footer.html.style.textAlign = "right";
};
PMVariables.prototype.saveVariables = function () {
    var that = this,
        data,
        inp_doc_uid_value = this.formVariables.getField("inp_doc_uid").controls[0].value;
    this.formVariables.getField("inp_doc_uid").setValue(inp_doc_uid_value);
    if (!this.formVariables.isValid()) {
        return;
    }
    if (this.formBooleanOptions.visible && !this.formBooleanOptions.isValid()) {
        return;
    }
    data = this.formVariables.getData();
    data.var_label = data.var_field_type;

    data.var_default = '';
    data.var_accepted_values = that.getDataAcceptedValues();
    data.var_field_size = 10;
    if (!this.formVariables.getField('var_sql').visible)
        data.var_sql = "";
    (new PMRestClient({
        endpoint: 'process-variable',
        typeRequest: 'post',
        functionSuccess: function (xhr, response) {
            if (that.onSave(xhr, response) === false) {
                that.var_uid = null;
                return;
            }
            that.showGrid();
            that.load();
            that.var_uid = null;
            that.windowVariables.hideFooter();
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },
        messageError: ' '.translate(),
        data: data,
        messageSuccess: 'Variable saved successfully'.translate(),
        flashContainer: that.panel
    })).executeRestClient();
};
PMVariables.prototype.updateVariables = function () {
    var that = this,
        data,
        inp_doc_uid_value = this.formVariables.getField("inp_doc_uid").controls[0].value;
    this.formVariables.getField("inp_doc_uid").setValue(inp_doc_uid_value);
    if (!this.formVariables.isValid()) {
        return;
    }
    if (this.formBooleanOptions.visible && !this.formBooleanOptions.isValid()) {
        return;
    }
    data = this.formVariables.getData();
    data.var_label = data.var_field_type;
    data.var_field_size = 10;
    if (that.formVariables.getField('var_name').getValue().trim() === that.var_name.trim()) {
        delete data['var_name'];
    }
    data.var_default = '';
    data.var_accepted_values = that.getDataAcceptedValues();
    if (!this.formVariables.getField('var_sql').visible)
        data.var_sql = "";
    (new PMRestClient({
        endpoint: 'process-variable/' + that.var_uid,
        typeRequest: 'update',
        data: data,
        functionSuccess: function (xhr, response) {
            if (that.onEdit(xhr, response, data) === false) {
                that.var_uid = null;
                return;
            }
            var var_name_old = that.currentVariable.var_name;
            that.currentVariable = data;
            that.currentVariable.var_uid = that.var_uid;
            that.currentVariable.var_name_old = var_name_old;
            that.showGrid();
            that.load();
            that.var_uid = null;
            that.windowVariables.hideFooter();
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },
        messageError: ' '.translate(),
        messageSuccess: 'Variable edited successfully'.translate(),
        flashContainer: that.panel
    })).executeRestClient();
};
PMVariables.prototype.deleteVariable = function (var_uid) {
    var that = this;
    (new PMRestClient({
        endpoint: 'process-variable/' + var_uid,
        typeRequest: 'remove',
        functionSuccess: function (xhr, response) {
            that.load();
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },
        messageError: 'working...'.translate(),
        messageSuccess: 'Variable deleted successfully'.translate(),
        flashContainer: that.panel
    })).executeRestClient();
};
PMVariables.prototype.load = function () {
    var that = this;
    var restProxy = new PMRestClient({
        endpoint: 'process-variables',
        typeRequest: 'get',
        functionSuccess: function (xhr, response) {
            var listInputDocs = response;
            that.gridVariables.setDataItems(listInputDocs);
            that.gridVariables.sort('var_name', 'asc');
            $(that.gridVariables.dom.toolbar).find("input").val("");
            that.gridVariables.clearFilter();
            if (that.currentVariable !== null) {
                var var_name_old = that.currentVariable.var_name_old;
                for (var i = 0; i < response.length; i++) {
                    if (that.currentVariable.var_uid === response[i].var_uid) {
                        that.currentVariable = response[i];
                    }
                }
                that.currentVariable.var_name_old = var_name_old;
            }
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });
    restProxy.executeRestClient();
};
PMVariables.prototype.del = function (data, row, grid) {
    var that = this;
    var confirmWindow = new PMUI.ui.MessageWindow({
        id: 'confirmWindowDel',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title: "Variables".translate(),
        message: 'Do you want to delete this variable?'.translate(),
        footerItems: [{
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                },
                buttonType: "error"
            }, {
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                    that.deleteVariable(data.var_uid, row);
                },
                buttonType: "success"
            }
        ]
    });
    confirmWindow.open();
    confirmWindow.dom.titleContainer.style.height = '17px';
    confirmWindow.showFooter();
};

PMVariables.prototype.customCss = function(){
    $("#inp_doc_uidPanel").css({padding: ""});
    $("#inp_doc_uid").css({width: "75%"}).find("label:eq(0)").css({float: "left", width: "31.5%"});
    
    var td = $("#chckboxOption .pmui-field-control-table td")[0];

    if (typeof(td) != "undefined") {
        td.setAttribute("style","padding:0px !important");
    }

    this.formVariables.panel.getHTML().setAttribute("style", "overflow: initial");
};

PMVariables.prototype.showGrid = function () {
    var that = this;
    that.formVariables.setVisible(false);
    that.formAcceptedValues.setVisible(false);
    that.gridAcceptedValues.setVisible(false);
    that.formBooleanOptions.setVisible(false);
    $(that.gridVariables.dom.toolbar).find("input").val("");
    that.gridVariables.clearFilter();
    that.gridVariables.setVisible(true);
    that.windowVariables.setTitle('Variables'.translate());
};
PMVariables.prototype.showForm = function () {
    var that = this;
    that.edit = false;
    that.dirtyAcceptedValue = false;
    that.formVariables.setVisible(true);
    that.formAcceptedValues.setVisible(true);
    that.gridAcceptedValues.setVisible(true);
    that.formBooleanOptions.setVisible(true);
    that.gridVariables.setVisible(false);
    that.windowVariables.setTitle('Create Variable'.translate());
    that.formVariables.reset();
    that.formVariables.setFocus();
    that.changeViewFieldType('string');
    that.formAcceptedValues.reset();
    that.gridAcceptedValues.clearItems();
    that.formBooleanOptions.reset();
    that.buttonFieldCancel.setVisible(false);
    that.windowVariables.showFooter();
    that.buttonCreateInputDocument.setVisible(false);
    that.buttonEditInputDocument.setVisible(false);
};
PMVariables.prototype.showFormEdit = function (data) {
    var that = this;
    that.showForm();
    that.var_uid = data.var_uid;
    that.edit = true;
    that.var_name = data.var_name;
    that.windowVariables.setTitle('Edit Variable'.translate());
    that.formVariables.getField('var_dbconnection').setValue(data.var_dbconnection);
    that.formVariables.getField('var_field_type').setValue(data.var_field_type);
    that.formVariables.getField('var_label').setValue(data.var_label);
    that.formVariables.getField('var_name').setValue(data.var_name);
    that.formVariables.getField('var_sql').setValue(data.var_sql);
    that.formVariables.getField('inp_doc_uid').setValue(data.inp_doc_uid);

    that.setVarOptionsControl(data.var_accepted_values);
    that.changeViewFieldType(data.var_field_type);
    that.setDataAcceptedValues(data.var_accepted_values);
    that.currentVariable = data;
    that.currentVariable.var_name_old = that.currentVariable.var_name;
};
PMVariables.prototype.loadDataBaseConnections = function () {
    var that = this;
    var restProxy = new PMRestClient({
        endpoint: 'database-connections',
        typeRequest: 'get',
        functionSuccess: function (xhr, response) {
            var dropdown = that.formVariables.getField('var_dbconnection');
            for (var i = 0; i < response.length; i++) {
                if (response[i].dbs_connection_type == "TNS") {
                   dropdown.addOption({
                       label: "[" + response[i].dbs_tns + "] " + response[i].dbs_type + " : " + response[i].dbs_database_description,
                       value: response[i].dbs_uid
                   });
                } else {
                   dropdown.addOption({
                       label: "[" + response[i].dbs_server + ":" + response[i].dbs_port + "] " + response[i].dbs_type + ": " + response[i].dbs_database_name + response[i].dbs_database_description,
                       value: response[i].dbs_uid
                   });
                }
            }
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });
    restProxy.executeRestClient();
};
PMVariables.prototype.changeViewFieldType = function (newValue) {
    var that = this;
    var sw = that.formVariables.getField('var_options_control').controls[0].selected;

    that.formVariables.getField('var_dbconnection').setVisible(false);
    that.formVariables.getField('var_sql').setVisible(false);
    that.formVariables.getField('var_options_control').setVisible(false);
    that.formVariables.getField('inp_doc_uid').setVisible(false);
    that.formVariables.getField('inp_doc_uid').setRequired(false);
    that.formAcceptedValues.setVisible(false);
    that.gridAcceptedValues.setVisible(false);
    that.formBooleanOptions.setVisible(false);
    that.buttonCreateInputDocument.setVisible(false);
    that.buttonEditInputDocument.setVisible(false);

    validateKeysField(that.formAcceptedValues.getField('keyValue').getControls()[0].getHTML(), []);

    if (this.fieldInfo === null) {
        this.fieldInfo = document.createTextNode('');
        var a = that.formVariables.getField('var_field_type').getControls()[0];
        a.html.parentNode.appendChild(document.createElement('br'));
        a.html.parentNode.appendChild(this.fieldInfo);
    }

    switch (newValue) {
        case 'string':
            that.formVariables.getField('var_dbconnection').setVisible(true);
            that.formVariables.getField('var_sql').setVisible(true);
            that.formVariables.getField('var_options_control').setVisible(true);
            that.formAcceptedValues.setVisible(true && sw);
            that.gridAcceptedValues.setVisible(true && sw);
            this.fieldInfo.data = "Supported Controls: text, textarea, dropdown, radio, suggest, hidden.".translate();
            break;
        case 'integer':
            that.formVariables.getField('var_dbconnection').setVisible(true);
            that.formVariables.getField('var_sql').setVisible(true);
            that.formVariables.getField('var_options_control').setVisible(true);
            that.formAcceptedValues.setVisible(true && sw);
            that.gridAcceptedValues.setVisible(true && sw);

            validateKeysField(that.formAcceptedValues.getField('keyValue').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'ishyphen']);
            this.fieldInfo.data = "Supported Controls: text, textarea, dropdown, radio, suggest, hidden.".translate();
            break;
        case 'float':
            that.formVariables.getField('var_dbconnection').setVisible(true);
            that.formVariables.getField('var_sql').setVisible(true);
            that.formVariables.getField('var_options_control').setVisible(true);
            that.formAcceptedValues.setVisible(true && sw);
            that.gridAcceptedValues.setVisible(true && sw);

            validateKeysField(that.formAcceptedValues.getField('keyValue').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'isperiod', 'ishyphen']);
            this.fieldInfo.data = "Supported Controls: text, textarea, dropdown, radio, suggest, hidden.".translate();
            break;
        case 'boolean':
            that.formBooleanOptions.setVisible(true);
            this.fieldInfo.data = "Supported Controls: checkbox, dropdown, radio, hidden.".translate();
            break;
        case 'datetime':
            this.fieldInfo.data = "Supported Controls: datetime.".translate();
            break;
        case "grid":
            this.fieldInfo.data = "Supported Controls: grid.".translate();
            break;
        case "array":
            that.formVariables.getField('var_dbconnection').setVisible(true);
            that.formVariables.getField('var_sql').setVisible(true);
            that.formVariables.getField('var_options_control').setVisible(true);
            that.formAcceptedValues.setVisible(true && sw);
            that.gridAcceptedValues.setVisible(true && sw);
            this.fieldInfo.data = "Supported Controls: array.".translate();
            break;
        case 'file':
            that.formVariables.getField('inp_doc_uid').setVisible(true);
            that.buttonCreateInputDocument.setVisible(true);
            that.buttonEditInputDocument.setVisible(true);
            that.formVariables.getField('inp_doc_uid').setRequired(true);
            this.fieldInfo.data = "Supported Controls: file.".translate();
            break;
    }

    if ($(that.formVariables.getField("var_options_control").html).find("input")[0].checked)
        $("#requiredMessage").css({"margin-left": "230px"});
    else {
        $("#requiredMessage").css({"margin-left": "0px"});
    }
};
PMVariables.prototype.addAcceptedValue = function () {
    var that = this;
    if (that.isAcceptedValueAdded()) {
        PMDesigner.msgFlash('The key value already exists.'.translate(), document.getElementById('windowVariables'), 'error', 1000,5);
        return;
    }
    if (!that.formAcceptedValues.isValid()) {
        return;
    }
    if (that.editRow === null) {
        that.gridAcceptedValues.addItem(new PMUI.grid.GridPanelRow({
            data: {
                keyValue: that.formAcceptedValues.getField('keyValue').getValue(),
                value: that.formAcceptedValues.getField('value').getValue()
            }
        }));
    } else {
        this.editingOptions = false;
        that.editRow.setData({
            keyValue: that.formAcceptedValues.getField('keyValue').getValue(),
            value: that.formAcceptedValues.getField('value').getValue()
        });
    }
    that.dirtyAcceptedValue = true;
    that.cancelAcceptedValue();

};
PMVariables.prototype.editAcceptedValue = function (row) {
    var that = this;
    this.editingOptions = true;
    that.editRow = row;
    var data = row.getData();
    that.formAcceptedValues.getField('keyValue').setValue(data.keyValue);
    that.formAcceptedValues.getField('value').setValue(data.value);
    that.buttonFieldAdd.setValue('Save'.translate());
    that.buttonFieldCancel.setVisible(true);

    that.initialFormAcceptedValuesKeyValue = data.keyValue;
    that.initialFormAcceptedValuesValue = data.value;
};
PMVariables.prototype.deleteAcceptedValue = function (row) {
    var that = this;
    var confirmWindow = new PMUI.ui.MessageWindow({
        id: 'confirmWindowDeleteAcceptedValue',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title: "Variables".translate(),
        message: 'Do you want to delete this Key Value?'.translate(),
        footerItems: [{
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                },
                buttonType: "error"
            }, {
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                    that.gridAcceptedValues.removeItem(row);
                    that.dirtyAcceptedValue = true;
                },
                buttonType: "success"
            }
        ]
    });
    confirmWindow.open();
    confirmWindow.dom.titleContainer.style.height = '17px';
    confirmWindow.showFooter();
};
PMVariables.prototype.getDataAcceptedValues = function () {
    var that = this, data = [], i, dt = [];
    if (that.gridAcceptedValues.visible) {
        dt = that.gridAcceptedValues.getData();
        for (i = 0; i < dt.length; i++) {
            delete dt[i].key;
            delete dt[i].type;
            data.push({
                value: dt[i].keyValue,
                label: dt[i].value
            });
        }
    }
    if (that.formBooleanOptions.visible) {
        var a = that.formBooleanOptions.getData();
        data = [
            {value: '1', label: a.trueOption},
            {value: '0', label: a.falseOption}
        ];
    }
    return data;
};
PMVariables.prototype.setDataAcceptedValues = function (stringJsonData) {
    if (!stringJsonData) {
        return;
    }
    var that = this, i, data = stringJsonData;
    if (typeof stringJsonData === 'string') {
        data = JSON.parse(stringJsonData);
    }
    if (that.gridAcceptedValues.visible) {
        for (i = 0; i < data.length; i++) {
            that.gridAcceptedValues.addItem(new PMUI.grid.GridPanelRow({
                data: {
                    keyValue: data[i].keyValue ? data[i].keyValue : data[i].value,
                    value: data[i].keyValue ? data[i].value : data[i].label
                }
            }));
            that.initialGridAcceptedValuesOrder.push(data[i].keyValue ? data[i].keyValue : data[i].value);
        }
    }
    if (that.formBooleanOptions.visible) {
        that.formBooleanOptions.getField('trueOption').setValue(data[0].label);
        that.formBooleanOptions.getField('falseOption').setValue(data[1].label);
    }
};
PMVariables.prototype.validateAcceptedValues = function () {
    var that = this,
        dirty = false,
        finalVal1,
        finalVal2,
        initVal1,
        initVal2,
        gridAcceptedValues,
        finalGridAcceptedValuesOrder = [],
        key;
    if (that.initialFormAcceptedValuesValue && that.formAcceptedValues.getField('value').getValue() != '') {
        finalVal1 = that.formAcceptedValues.getField('value').getValue();
        finalVal2 = that.formAcceptedValues.getField('keyValue').getValue();
        initVal1 = that.initialFormAcceptedValuesValue;
        initVal2 = that.initialFormAcceptedValuesKeyValue;
        if (finalVal1 !== initVal1 || finalVal2 !== initVal2) {
            dirty = true;
        }
    } else if (that.formAcceptedValues.getField('value').getValue() !== '' || that.formAcceptedValues.getField('keyValue').getValue()) {
        dirty = true;
    }

    if(that.initialGridAcceptedValuesOrder.length) {
        gridAcceptedValues = that.gridAcceptedValues.getData();
        for (key in gridAcceptedValues) {
            if (gridAcceptedValues.hasOwnProperty(key)) {
                finalGridAcceptedValuesOrder.push(gridAcceptedValues[key].keyValue);
            }
        }
        if(JSON.stringify(finalGridAcceptedValuesOrder) !== JSON.stringify(that.initialGridAcceptedValuesOrder)) {
            dirty = true;
        }
    }
    this.validateAcceptedValuesFlag = dirty;
}
PMVariables.prototype.setVarOptionsControl = function (stringJsonData) {
    if (!stringJsonData) {
        return;
    }
    var that = this, i, data = stringJsonData;
    if (typeof stringJsonData === 'string') {
        data = JSON.parse(stringJsonData);
    }
    if (data.length > 0) {
        that.formVariables.getField('var_options_control').setValue("['1']");
    }
};
PMVariables.prototype.cancelAcceptedValue = function () {
    var that = this;
    that.editRow = null;
    that.buttonFieldAdd.setValue('Add'.translate());
    that.buttonFieldCancel.setVisible(false);
    that.formAcceptedValues.reset();
};
PMVariables.prototype.isAcceptedValueAdded = function () {
    var that = this, i, keyValue, data, exist, i, index, rowEditValue;
    data = that.gridAcceptedValues.getData();
    keyValue = that.formAcceptedValues.getField('keyValue').getValue()||"";
    if(this.editingOptions){
        rowEditValue = this.editRow.getData()["keyValue"];
        for (i = 0; i < data.length; i++) {
            if (rowEditValue === data[i].keyValue){
                index = i;
                break;
            }
        }
        for (i = 0; i < data.length; i++) {
            if (i !== index){
                if (keyValue === data[i].keyValue){
                    exist = true;
                }
            }
        }
        if(exist){
            return true;
        }else{
            return false;
        }
    }else{
        for (i = 0; i < data.length; i++) {
            if (data[i].keyValue === keyValue) {
                return true;
            }
        }
    }
    return false;
};
PMVariables.prototype.setInputDocuments = function (inp_doc_uid) {
        var restClient = new PMRestClient({
            endpoint: 'input-documents',
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                inputDocumentsData = response;
                var arrayOptions = [];
                arrayOptions[0] = {
                    label: "- Select an input document -".translate(),
                    value: "",
                    disabled: true,
                    selected: true
                };
                for (var i = 0; i <= inputDocumentsData.length - 1; i++)  {
                    arrayOptions.push(
                        {
                            value: inputDocumentsData[i].inp_doc_uid,
                            label: inputDocumentsData[i].inp_doc_title
                        }
                    );
                }
                inp_doc_uid.setOptions(arrayOptions);
                inp_doc_uid.setValue(arrayOptions[0].value);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            },
        });
        restClient.executeRestClient();
};
PMVariables.prototype.setInputDocumentsFromIDModule = function (inp_doc_uid,response) {
    var inp_doc_uid_val = $("#inp_doc_uid").find("select:eq(0) option:selected").val();
    var arrayOptions = [];
    inputDocumentsData = response;
    arrayOptions[0] = {
        label: "- Select an input document -".translate(),
        value: "",
        disabled: true,
        selected: true
    };
    for (var i = 0; i <= inputDocumentsData.length - 1; i++)  {
        arrayOptions.push(
        {
            value: inputDocumentsData[i].inp_doc_uid,
            label: inputDocumentsData[i].inp_doc_title
        }
        );
    }
    inp_doc_uid.setOptions(arrayOptions);
    inp_doc_uid.setValue(arrayOptions[0].value);
    if(inp_doc_uid_val) {
        inp_doc_uid.setValue(inp_doc_uid_val);
    }
};
PMVariables.prototype.isWindowActive = function () {
    if($("#formVariables").is(":visible")) {
        return true;
    }
    return false;   
}
PMDesigner.variables = function () {
    var pmvariables = new PMVariables();
    pmvariables.load();
};
PMDesigner.variables.create = function () {
    var pmvariables = new PMVariables();
    pmvariables.showForm();
    pmvariables.load();
};

RowVariableCondition = function () {
    PMUI.form.FormPanel.call(this, {
        layout: 'hbox'
    });
    RowVariableCondition.prototype.init.call(this);
};
RowVariableCondition.prototype = new PMUI.form.FormPanel();
RowVariableCondition.prototype.createHTML = function () {
    PMUI.form.FormPanel.prototype.createHTML.call(this);
    var items = this.getItems();
    items[0].dom.labelTextContainer.style.display = 'none';
    items[1].dom.labelTextContainer.style.display = 'none';
    items[2].dom.labelTextContainer.style.display = 'none';
    items[2].style.addProperties({display: 'none'});
    items[2].controls[0].button.setButtonType('error');
    return this.html;
};
RowVariableCondition.prototype.init = function () {
    var that = this;
    var field = new PMUI.field.TextField({
        id: 'idField',
        name: '',
        required: true,
        controlsWidth: 425,
        proportion: 2.1,
        labelVisible: false
    });
    var typeData = new PMUI.field.DropDownListField({
        id: 'idTypeData',
        name: '',
        valueType: 'string',
        value: '',
        readOnly: true,
        controlsWidth: 200,
        labelVisible: false,
        options: [{
                value: 'integer',
                label: 'Integer'.translate()
            }, {
                value: 'string',
                label: 'String'.translate()
            }, {
                value: 'float',
                label: 'Float'.translate()
            }, {
                value: 'boolean',
                label: 'Boolean'.translate()
            }, {
                value: 'date',
                label: 'Date'.translate()
            }, {
                value: 'datetime',
                label: 'Datetime'.translate()
            }
        ]
    });
    var remove = new PMUI.field.ButtonField({
        id: 'idRemove',
        value: 'Delete'.translate(),
        labelVisible: false,
        handler: function (e, a) {
            that.getParent().removeItem(that);
        },
        name: 'delete',
        controlsWidth: 60
    });
    that.addItem(field);
    that.addItem(typeData);
    that.addItem(remove);
};

PropertiesReceiveMessage = function (menuOption) {
    this.variables = [];
    this.onApply = new Function();
    this.onCancel = new Function();
    this.menuOption = menuOption;
    Mafe.Window.call(this);
    PropertiesReceiveMessage.prototype.init.call(this);
};
PropertiesReceiveMessage.prototype = new Mafe.Window();
PropertiesReceiveMessage.prototype.init = function () {
    var that = this;
    that.setTitle(that.menuOption.getMenuTargetElement().evn_name);
    that.setButtons([
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'error',
            height: 31,
            handler: function () {
                that.close();
                that.onCancel();
            }
        }),
        new PMUI.ui.Button({
            id: 'windowDynaformInformationSaveOpen',
            text: 'Apply'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                that.onApply();
            }
        })
    ]);
    that.buttonAdd = new PMUI.ui.Button({
        text: 'Add Variable'.translate(),
        buttonType: 'success',
        height: 31,
        style: {cssProperties: {marginLeft: '50px', marginTop: '10px'}},
        handler: function () {
            that.addVariable();
        }
    });
    that.form = new Mafe.Form({
        title: that.menuOption.getMenuTargetElement().evn_name,
        width: DEFAULT_WINDOW_WIDTH - 60,
        style: {cssProperties: {'margin-left': '35px'}}
    });
    that.conditionForm = new Mafe.Form({
        visibleHeader: false,
        width: DEFAULT_WINDOW_WIDTH - 60,
        style: {cssProperties: {'margin-left': '35px'}},
        items: [{
                label: 'Condition',
                labelPosition: 'top',
                pmType: 'textarea',
                rows: 100,
                style: {cssClasses: ['mafe-textarea-resize']}
            }
        ]
    });

    that.addItem(that.buttonAdd);
    that.addItem(that.form);
    that.addItem(that.conditionForm);

    that.addVariable();
};
PropertiesReceiveMessage.prototype.addVariable = function () {
    var that = this;
    var a = new RowVariableCondition(this.variables);
    that.form.addItem(a);
    //force padding
    for (var i = 0; i < that.form.getItems().length; i++) {
        that.form.getItems()[i].style.addProperties({'padding': 'initial'});
    }
};

EventMessagesGrid = function () {
    this.onCreate = new Function();
    this.onEdit = new Function();
    this.onDel = new Function();
    Mafe.Grid.call(this);
    EventMessagesGrid.prototype.init.call(this);
};
EventMessagesGrid.prototype = new Mafe.Grid();
EventMessagesGrid.prototype.createHTML = function () {
    Mafe.Grid.prototype.createHTML.call(this);
    this.dom.toolbar.appendChild(this.buttonCreate.getHTML());
    return this.html;
};
EventMessagesGrid.prototype.init = function () {
    var that = this;
    that.buttonCreate = new PMUI.ui.Button({
        id: 'idButtonEventMessagesGrid',
        text: 'Create'.translate(),
        height: '36px',
        width: 100,
        style: {cssClasses: ['mafe-button-create']},
        handler: function (event) {
            that.onCreate(event);
        }
    });
    that.buttonCreate.defineEvents();
    that.setID('idEventMessagesGrid');
    that.setColumns([{
            id: '',
            title: 'Nombre',
            sortable: true,
            width: '460px',
            dataType: 'string',
            alignmentCell: 'left',
            columnData: 'mes_title'
        }, {
            id: 'dynaformGridPanelEdit',
            title: '',
            dataType: 'button',
            buttonStyle: {cssClasses: ['mafe-button-edit']},
            buttonLabel: function (row, data) {
                return 'Edit'.translate();
            },
            onButtonClick: function (row, grid) {
                that.onEdit(row, grid);
            }
        }, {
            id: 'dynaformGridPanelDelete',
            title: '',
            dataType: 'button',
            buttonStyle: {cssClasses: ['mafe-button-delete']},
            buttonLabel: function (row, data) {
                return 'Delete'.translate();
            },
            onButtonClick: function (row, grid) {
                that.onDel(row, grid);
            }
        }
    ]);
    that.load();
};
EventMessagesGrid.prototype.show = function () {

};
EventMessagesGrid.prototype.create = function () {

};
EventMessagesGrid.prototype.load = function () {
    var that = this;
    var dt = [
        {mes_title: 'message1-1'},
        {mes_title: 'message1-2'},
        {mes_title: 'message1-3'},
        {mes_title: 'message1-4'}
    ];
    that.setDataItems(dt);
};

EventMessagesForm = function () {
    Mafe.Form.call(this);
    EventMessagesForm.prototype.init.call(this);
};
EventMessagesForm.prototype = new Mafe.Form();
EventMessagesForm.prototype.init = function () {
    var that = this;
    that.setID('idEventMessagesForm');
    that.setItems({
        id: '',
        pmType: 'text',
        label: 'Name'.translate(),
        value: '',
        maxLength: 100,
        placeholder: ''.translate(),
        name: '',
        required: true,
        controlsWidth: 300
    });
    that.buttons = [
        new PMUI.ui.Button({
            id: 'btnClose',
            text: 'Cancel'.translate(),
            buttonType: 'error',
            height: 31,
            handler: function () {
                that.onCancel();
            }
        }),
        new PMUI.ui.Button({
            id: 'windowDynaformPmtableSave',
            text: 'Save'.translate(),
            buttonType: 'success',
            height: 31,
            handler: function () {
                that.onSave();
            }
        })
    ];
};
EventMessagesForm.prototype.getButtons = function () {
    return this.buttons;
};

EventMessages = function () {
    Mafe.Window.call(this);

    this.list = new EventMessagesGrid();
    this.form = new EventMessagesForm();

    EventMessages.prototype.init.call(this);
};
EventMessages.prototype = new Mafe.Window();
EventMessages.prototype.init = function () {
    var that = this;
    that.list.onCreate = function () {
        that.resetView();
        that.form.setVisible(true);
    };
    that.setTitle("Event Messages");
    that.addItem(that.list);
};
EventMessages.prototype.showForm = function () {
    this.list.show();
};

PMDesigner.eventMessages = function () {
    var a = new EventMessages();
    a.open();
};
PMDesigner.eventMessages.create = function () {
//    var a = new EventMessages();
//    a.open();
};


var UserPicker = function (options) {
    this.relatedField = null;
    this.processId = null;
    this.workspace = null;
    this.window = null;
    this.currentVariable = {};
    this.pageSize = 10;
    UserPicker.prototype.init.call(this, options);
};

UserPicker.prototype.type = 'UserPicker';

UserPicker.prototype.family = 'UserPicker';

UserPicker.prototype.init = function (options) {
    var defaults = {
        relatedField: null,
        processId: PMDesigner.project.projectId,
        workspace: WORKSPACE
    };

    jQuery.extend(true, defaults, options);

    this.setRelatedField(defaults.relatedField)
            .setProcessId(defaults.processId)
            .setWorkspace(defaults.workspace);
};

UserPicker.prototype.setRelatedField = function (field) {
    if (field instanceof PMUI.form.Field) {
        this.relatedField = field;
    }
    return this;
};

UserPicker.prototype.setProcessId = function (process) {
    this.processId = process;
    return this;
};

UserPicker.prototype.setWorkspace = function (workspace) {
    this.workspace = workspace;
    return this;
};

//UserPicker.prototype.getURL = function () {
//    var url = '/api/1.0/' + this.workspace + '/project/' + this.processId + '/variables';
//    return url;
//};

UserPicker.prototype.open = function (callback) {
    var w, rc, fieldC, dataGrid, panel, textField, that = this, button;

    button = new PMUI.ui.Button({
        id: 'insertUser',
        text: 'Insert User'.translate(),
        handler: function () {
            if (callback && callback.success && typeof callback.success === 'function') {
                //that.currentVariable = fieldC.getValue() + that.currentVariable;
                callback.success.call(that, that.currentVariable);
            }
            that.close();
        },
        disabled: true
    });

    textField = new PMUI.field.TextField({
        id: 'textFieldSearch',
        label: '',
        placeholder: 'Search ...'.translate()
    });

    w = new PMUI.ui.Window({
        id: 'processVariables',
        title: 'Process Users'.translate(),
        width: 480,
        height: 420,
        closable: true,
        modal: true,
        buttons: [
            button
        ],
        buttonsPosition: 'center'
    });

    //fieldC = new PMUI.field.DropDownListField({
    //    id: 'prefixDropDownListField',
    //    label: 'Prefix'.translate(),
    //    helper: '@@ string, @# float, @% integer, @? URL, @$ SQL query, @= original type.'.translate(),
    //    options: [
    //        {
    //            id: 'prefixDropDownListField1',
    //            label: '@@',
    //            value: '@@'
    //        },
    //        {
    //            id: 'prefixDropDownListField2',
    //            label: '@#',
    //            value: '@#'
    //        },
    //        {
    //            id: 'prefixDropDownListField3',
    //            label: '@%',
    //            value: '@%'
    //        },
    //        {
    //            id: 'prefixDropDownListField4',
    //            label: '@?',
    //            value: '@?'
    //        },
    //        {
    //            id: 'prefixDropDownListField5',
    //            label: '@$',
    //            value: '@$'
    //        },
    //        {
    //            id: 'prefixDropDownListField6',
    //            label: '@=',
    //            value: '@='
    //        }
    //    ],
    //    onChange: function (newValue, oldValue) {
    //    }
    //});

    textField = new PMUI.field.TextField({
        id: 'textFieldSearch',
        label: '',
        placeholder: 'Search ...'.translate(),
        width: 150
    });

    dataGrid = new PMUI.grid.GridPanel({
        id: 'gridPanel',
        selectable: true,
        pageSize: this.pageSize,
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return messagePageGrid(currentPage, pageSize, numberItems, criteria, filter);
        },
        columns: [
            {
                id: 'gridPanelUserName',
                title: 'User Name'.translate(),
                columnData: 'usr_username',
                width: 150,
                sortable: true,
                alignmentCell: 'left'
            },
            {
                id: 'gridPanelRole',
                title: 'Role'.translate(),
                columnData: 'usr_role',
                width: 230,
                sortable: false,
                alignmentCell: 'left'
            }
        ],
        onRowClick: function (row, data) {
            button.enable();
            that.currentVariable.username = data.usr_username;
            that.currentVariable.uid = data.usr_uid;
        }

    });


    panelFilter = new PMUI.core.Panel({
        id: 'panelFilter',
        layout: 'vbox',
        items: [/*fieldC,*/ textField]
    });

    panel = new PMUI.core.Panel({
        id: 'paneldataGrid',
        layout: 'vbox',
        items: [panelFilter, dataGrid]
    });


    rc = new PMRestClient({
        //endpoint: 'variables',
        typeRequest: 'get',
        functionSuccess: function (xhr, response) {
            console.log(response);
            that.window = w;
            dataGrid.setDataItems(response);
            w.open();
            w.showFooter();
            w.addItem(panel);
            panelFilter.setWidth(430);
            //fieldC.setControlsWidth(70);
            textField.controls[0].onKeyUp = function () {
                console.log(textField.controls[0].html.value);
                dataGrid.filter(textField.controls[0].html.value);
            };
            dataGrid.dom.toolbar.style.display = 'none';
            textField.dom.labelTextContainer.innerHTML = '';
            textField.dom.labelTextContainer.style.marginTop = 5;
            //fieldC.dom.labelTextContainer.style.paddingLeft = 20;
            panel.style.addProperties({'padding-left': 20});
            //fieldC.dom.labelTextContainer.style.width = 60;
            textField.dom.labelTextContainer.style.display = 'none';
            textField.controls[0].setWidth(200);
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });

    //rc.setBaseEndPoint('projects/' + this.processId + '/variables').executeRestClient();
    rc.setBaseEndPoint('users').executeRestClient();


};

UserPicker.prototype.close = function () {
    if (this.window) {
        this.window.close();
        this.window = null;
    }
};

var CriteriaUserField = function (options) {
    this.renderType = (options && options.renderType) || "text";
    PMUI.field.TextField.call(this, options);
    this.process = null;
    this.workspace = null;
    this.buttonHTML = null;
    this.rows = options.rows;
    this.user_uid = null;
    CriteriaUserField.prototype.init.call(this, options);
};

CriteriaUserField.prototype = new PMUI.field.TextField();

CriteriaUserField.prototype.setProcess = function (process) {
    this.process = process;
    return this;
};

CriteriaUserField.prototype.setWorkspace = function (workspace) {
    this.workspace = workspace;
    return this;
};

CriteriaUserField.prototype.init = function (options) {
    var defaults = {
        process: PMDesigner.project.projectId,
        workspace: WORKSPACE
    };
    jQuery.extend(true, defaults, options);
    this.setProcess(defaults.process)
        .setWorkspace(defaults.workspace);
};

CriteriaUserField.prototype.createVariablePicker = function () {
    var vp = new UserPicker({
        relatedField: this,
        processId: this.process
    });
    return vp;
};

CriteriaUserField.prototype.setControls = function () {
    if (this.controls.length) {
        return this;
    }
    if (this.renderType === 'text') {
        this.controls.push(new PMUI.control.TextControl());
    } else {
        this.controls.push(new PMUI.control.TextAreaControl({style: {cssProperties: {resize: 'vertical'}}}));
    }
    return this;
};

CriteriaUserField.prototype.createCallBack = function () {
    var that = this, oldValue, newValue, init = 0;
    return {
        success: function (variable) {
            init = that.controls[0].html.selectionStart;
            prevText = that.controls[0].html.value.substr(0, init);
            lastText = that.controls[0].html.value.substr(that.controls[0].html.selectionEnd, that.controls[0].html.value.length);
            newValue = variable.username;

            that.setValue(newValue);
            that.user_uid = variable.uid;
            that.controls[0].html.selectionEnd = init + variable.username.length;
        }
    };
};

CriteriaUserField.prototype.createHTML = function () {
    var button, that = this;
    PMUI.field.TextField.prototype.createHTML.call(this);

    button = new PMUI.ui.Button({
        id: 'buttonCriteriaUserField',
        text: '...',
        handler: function () {
            that.createVariablePicker().open(that.createCallBack());
        },
        style: {
            cssProperties: {
                background: '#2d3e50',
                fontSize: 18,
                paddingLeft: '15px',
                paddingRight: '15px',
                borderRadius: '4px',
                verticalAlign: 'top'
            }
        }
    });

    this.buttonHTML = button;
    $(this.helper.html).before(button.getHTML())
    this.buttonHTML.style.addProperties({"margin-left": "10px"});
    this.buttonHTML.html.tabIndex = -1;

    if (this.rows != null)
        this.controls[0].setHeight(this.rows);
    button.defineEvents();

    return this.html;
};

// Overwrite original init function for FormItemFactory
PMUI.form.FormItemFactory.prototype.init = function () {
    var defaults = {
        products: {
            "criteria": CriteriaUserField,
            "field": PMUI.form.Field,
            "panel": PMUI.form.FormPanel,
            "text": PMUI.field.TextField,
            "password": PMUI.field.PasswordField,
            "dropdown": PMUI.field.DropDownListField,
            "radio": PMUI.field.RadioButtonGroupField,
            "checkbox": PMUI.field.CheckBoxGroupField,
            "textarea": PMUI.field.TextAreaField,
            "datetime": PMUI.field.DateTimeField,
            "optionsSelector": PMUI.field.OptionsSelectorField,
            "buttonField": PMUI.field.ButtonField,
            "annotation" : PMUI.field.TextAnnotationField
        },
        defaultProduct: "panel"
    };
    this.setProducts(defaults.products)
        .setDefaultProduct(defaults.defaultProduct);
};

var WebEntry = function (menuOption) {
    this.relatedShape = null;
    this.restClient = null;
    this.formWebEntry = null;
    this.wee_uid = null;
    this.dyn_uid = null;
    this.usr_uid = null;
    this.wee_status = null;
    this.sugesstField = null;
    this.linkField = null;
    this.generateButton = null;
    WebEntry.prototype.init.call(this,menuOption);
};

WebEntry.prototype.init = function (menuOption) {
    var requiredMessage, defaults = {
        relatedShape: null
    };
    this.relatedShape = menuOption;
    this.createForm();
    this.createWindow();
    this.createSugesstField();
    this.createLinkField();
    this.createGenerateButton();
    this.createRestClient();
    this.winWebEntry.addItem(this.formWebEntry);
    this.winWebEntry.open();
    document.getElementById("requiredMessage").style.marginTop="40px";
    requiredMessage = $(document.getElementById("requiredMessage"));
    requiredMessage.hide();
    this.formWebEntry.panel.html.appendChild(this.sugesstField.createHTML());
    this.formWebEntry.panel.html.appendChild(this.generateButton);
    this.formWebEntry.panel.html.appendChild(this.linkField);
    this.formWebEntry.panel.html.style.height = "300px";
    this.winWebEntry.defineEvents();
    this.hideDeleteButton();
    this.loadDynaformsAndUsers(this.formWebEntry.getField("dyn_uid"), this.formWebEntry.getField("usr_uid"));
    this.formWebEntry.panel.html.appendChild(requiredMessage.show()[0]);
};

WebEntry.prototype.createSugesstField = function (){
	this.sugesstField = new SuggestField({
		label:"Users".translate(),
		width : 569.81,
		placeholder : "suggest users",
		required : true,
		helper : "When the form is submitted a new case is created with this user account.".translate(),
		dynamicLoad: {
			data : [
				{
					key : "usr_uid",
					label : ["usr_firstname","usr_lastname","(", "usr_username", ")"]
				}
			],
			keys : {
				url : HTTP_SERVER_HOSTNAME + "/api/1.0/" + WORKSPACE,
				accessToken : credentials.access_token,				
				endpoints : [
					{
						method : "GET",
						url : 'users'
					}
				]
			}
		}
	});
	return this;
};

WebEntry.prototype.hideDeleteButton = function (){
	$(this.winWebEntry.footer.items.asArray()[0].html).hide();
	return this;
};

WebEntry.prototype.showDeleteButton = function (){
	$(this.winWebEntry.footer.items.asArray()[0].html).show();
	return this;
};

WebEntry.prototype.createLinkField = function () {
    var label,link;
	this.linkField = document.createElement("div");
	this.linkField.style.marginLeft = "22px";
    this.linkField.className="pmui-field";
	$(this.linkField).css({
		"margin-left": "11px",
		left:"0px",
		top: "0px",
		display: "block",
		position: "relative",
		"z-index": "auto",
		"margin-top" : "20px"
	})
	label = document.createElement("label");
	label.textContent = "Web Entry URL".translate();  
    asterisk = document.createElement("span");
    asterisk.textContent = "*";
    $(asterisk).css({"color": "red"});
    twopointsLabel = document.createElement("label");
    twopointsLabel.textContent = ":".translate();
    label.appendChild(asterisk);
    label.appendChild(twopointsLabel);
	link = document.createElement("a");
	link.setAttribute("target","_blank");
	$(link).css({
		"text-overflow": "ellipsis",
        "white-space": "nowrap",
		overflow: "hidden",
		display: "inline-block",
		left: "0px",
		top: "0px",
		width: "569.81px",
		height: "30px",
		position: "relative",
		"z-index": "auto"
	});
	$(label).css({
		"width": "23.5%",
		"display": "inline-block",
		"float": "left",
		"color": "#2d3e50",
		"font-size": "14px"
	});
	this.linkField.appendChild(label);
	this.linkField.appendChild(link);
	return this;
};

WebEntry.prototype.createGenerateButton = function () {
	var link, button, that = this;
	this.generateButton = document.createElement("div");
	this.generateButton.style.marginLeft = "22px";
	$(this.linkField).css({
		"margin-left": "11px",
		left:"0px",
		top: "0px",
		display: "block",
		position: "relative",
		"z-index": "auto",
		"margin-top" : "20px"
	})
	link = document.createElement("div");
	$(link).css({
		"text-overflow": "ellipsis",
		overflow: "hidden",
		display: "inline-block",
		left: "0px",
		top: "0px",
		width: "755px",
		height: "30px",
		position: "relative",
		"z-index": "auto"
	});
	button = $("<button>");
	button.addClass('pmui pmui-button pmui-success');
	button.css({
		height: "25px",
		float: "right",
		padding : "0px 35px"
	});
	button.text("Generate Link".translate());
	$(button).click(function (e){
		e.preventDefault();
		e.stopPropagation();
		var data, act;
        if (that.formWebEntry.isValid()){
        	if(that.sugesstField.isValid()){
                if(that.linkField.childNodes.length>2){
                    that.linkField.childNodes[2].remove();
                }
            	data = that.formWebEntry.getData();
            	data["usr_uid"] = that.sugesstField.get("value");
            	data["evn_uid"] = that.relatedShape.evn_uid;
            	act = that.relatedShape.getPorts().asArray()[0];
            	data["act_uid"] = that.relatedShape.getPorts().asArray()[0].connection.destPort.parent.act_uid;
            	data["wee_title"] = that.relatedShape.evn_uid;
            	data["wee_description"] = "";
            	if (that.wee_uid === null){
            		dataPostWee = that.consumeRest('post','web-entry-event', data);
            		that.linkField.style.display = "block";
            		that.wee_uid = dataPostWee['wee_uid'];
					$(that.linkField).find("a")[0].textContent = dataPostWee['wee_url'];
					$(that.linkField).find("a")[0].href = dataPostWee['wee_url'];
					$(that.linkField).find("a")[0].setAttribute("title",dataPostWee['wee_url']);
					that.showDeleteButton();
                }else{
                	dataPostWee = that.consumeRest('update','web-entry-event/'+that.wee_uid, data);
                	dataPostWee = that.consumeRest('get','web-entry-event/'+that.wee_uid, data);
                	that.linkField.style.display = "block";
            		that.wee_uid = dataPostWee['wee_uid'];
					$(that.linkField).find("a")[0].textContent = dataPostWee['wee_url'];
					$(that.linkField).find("a")[0].href = dataPostWee['wee_url'];
					$(that.linkField).find("a")[0].setAttribute("title",dataPostWee['wee_url']);
					that.showDeleteButton();
                }
        	}
        	else{
        		that.sugesstField.showMessageRequired();
        	}
        }
	});
	$(link).append(button);
	this.generateButton.appendChild(link);
	return this;
};

WebEntry.prototype.createForm = function () {
    this.formWebEntry = new PMUI.form.Form({
        id: "formWebEntry",
        title: "",
        height : "300px",
        width: DEFAULT_WINDOW_WIDTH - 70,
        items: [
            {
               pmType: "dropdown",
               label: "Dynaform".translate(),
               options: [],
               name: "dyn_uid",
               id : "dyn_uid",
               helper: "Select one DynaForm".translate(),
               required: true
            },
            {
                pmType: "radio",
                label: "Status".translate(),
                name: "wee_status",
                id: "wee_status",
                required: true,
                options: [
                    {
                        label: "enable".translate(),
                        value: "ENABLED",
                    },
                    {
                        label: "disabled".translate(),
                        value: "DISABLED"
                    }
                ],
                value: "ENABLED",
                visible : false
            }
        ],
        visibleHeader: false
    });
    return this;
};

WebEntry.prototype.createWindow = function (){
	var that = this, dataPostWee;
    this.winWebEntry = new PMUI.ui.Window({
        id: "winWebEntry",
        title: "Web Entry".translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        modal: true,
        footerItems: [
        	{
                pmType: 'button',
                text: 'Delete'.translate(),
                handler: function() {
                	if(that.wee_uid !=null){
                		dataPostWee = that.consumeRest('remove','web-entry-event/'+that.wee_uid, {});
                		that.winWebEntry.close();
                		PMDesigner.msgFlash('The Web entry was removed successfully.'.translate(), document.body, 'success',3000, 5);
                	}else{
                		that.restClient.msgFlash('Not exists Web entry'.translate(), document.body, 'info',3000, 5);
                	}
                },
                buttonType : "error"
            },
            {
                pmType: 'button',
                text: "Cancel".translate(),
                handler : function () {
                	if (!that.formWebEntry.isDirty()){
                    	that.winWebEntry.close();
                	}
                },
                buttonType : "error"
            },
            {
                pmType: 'button',
                text: 'Save'.translate(),
                handler: function() {
                	var data, act;                    
                    if (that.formWebEntry.isValid()){                        
                    	if(that.sugesstField.isValid()){
                            if(that.wee_uid === null){
                                requiredMessageLink = that.formWebEntry.getItems()[0].dom.messageContainer.cloneNode(true); 
                                requiredMessageLink.childNodes[0].style.display="block";
                                requiredMessageLink.childNodes[0].innerText="This field is required. Please press the \"Generate Link\" button.".translate();
                                that.linkField.appendChild(requiredMessageLink);
                                return;
                            }
	                    	data = that.formWebEntry.getData();
	                    	data["usr_uid"] = that.sugesstField.get("value");
	                    	data["evn_uid"] = that.relatedShape.evn_uid;
	                    	act = that.relatedShape.getPorts().asArray()[0];
	                    	data["act_uid"] = that.relatedShape.getPorts().asArray()[0].connection.destPort.parent.act_uid;
	                    	data["wee_title"] = that.relatedShape.evn_uid;
	                    	data["wee_description"] = "";
	                    	if (that.wee_uid === null){
	                    	dataPostWee = that.consumeRest('post','web-entry-event', data);
		                    }else{
		                    	dataPostWee = that.consumeRest('update','web-entry-event/'+that.wee_uid, data);
		                    }
		                    that.winWebEntry.close();
	                	}
	                	else{
	                		that.sugesstField.showMessageRequired();
	                	}
                    }
                },
                buttonType : "success",
            }
        ],
        footerAlign : "right",
        closable: true,
        visibleFooter: true
    });
    return this;
};

WebEntry.prototype.createRestClient = function () {
	this.restClient =  new PMRestClient();
	return this;
};

WebEntry.prototype.loadDynaformsAndUsers = function (dynaformsControl){
    var i,j, richi, data, options = [], response, webentries = [],
    that = this, linkValue, link, label, fieldLink, webentries, dynaforms, options;
    webentries = this.consumeRest("get", "web-entry-events");
    dynaforms = this.consumeRest("get", "dynaforms");
    for ( i = 0 ; i < dynaforms.length ; i+=1 ) {
		data = {};
		data.label = dynaforms[i]["dyn_title"];
		data.value = dynaforms[i]["dyn_uid"];
		for ( j = 0 ; j < webentries.length ; j++){
			if ( webentries[j]["dyn_uid"] === data.value && webentries[j]["evn_uid"] == that.relatedShape["evn_uid"]){
    			data.selected = true;
				if(webentries[j].hasOwnProperty("usr_uid") && webentries[j]["usr_uid"] !=""){
					user = this.consumeRest("get", "user/"+webentries[j]["usr_uid"]);
					this.sugesstField.html.find("input").val(user["usr_firstname"] + " "+user["usr_lastname"] + " "+"("+user["usr_username"]+")");
					this.sugesstField.set("value",user["usr_uid"]);
					this.wee_uid = webentries[j]["wee_uid"];
					linkValue =  webentries[j]["wee_url"];
				}
    		}
		}
		options.push(data);
	}
    dynaformsControl.setOptions(options);
    
    options = [];
	
    this.sugesstField.set("options",options);
	if (this.wee_uid) {
		this.linkField.style.display = "block";
		$(this.linkField).find("a")[0].textContent = linkValue;
		$(this.linkField).find("a")[0].href = linkValue;
		$(this.linkField).find("a")[0].setAttribute("title",linkValue);
		this.showDeleteButton();
	}
	return this;
};

WebEntry.prototype.consumeRest = function (method, endpoint, data,callbkack) {
	var resp = null;
	this.restClient = new PMRestClient({
		functionSuccess: function (xhr, response) {
			resp = response;
		},
  functionFailure: function (xhr, response)
  {
      PMDesigner.msgWinError(response.error.message);
  }
	});
	this.restClient.typeRequest = method;
	if (endpoint.split('/')[0] === "user") {
		this.restClient.setBaseEndPoint("");
	}
	if (method === "update"){
		this.restClient.messageError = ['An unexpected error while editing the WebEntry, please try again later.'.translate()];
		this.restClient.messageSuccess = ['WebEntry sucessfully edited.'.translate()];
	}
	if (method === "post"){
		this.restClient.messageError = ['An unexpected error while created the WebEntry, please try again later.'.translate()];
		this.restClient.messageSuccess = ['WebEntry created successfully.'.translate()];
	}
	this.restClient.data = data;
	this.restClient.endpoint = this.restClient.endpoint + endpoint;
	this.restClient.executeRestClient();
	return resp;
};
var PMMessageType = function (options) {
    var that = this;
    this.msgt_uid = null;
    this.edit = false;
    this.editRow = null;
    this.dirtyAcceptedValue = false;
    this.fieldInfo = null;
    this.onSave = new Function();
    this.onEdit = new Function();
    this.requiredMessage = null;
	this.clickedClose = true;
    this.buttonCreate = new PMUI.ui.Button({
        id: 'buttonCreate',
        text: "Create".translate(),
        height: '36px',
        width: 100,
        style: {
            cssClasses: [
                'mafe-button-create'
            ]
        },
        handler: function () {
            that.showForm();
        }
    });

    this.frmMessageType = new PMUI.form.Form({
        id: 'frmMessageType',
        width: 'auto',
        title: '',
        visibleHeader: false,
        items: [
            {
                id: 'txtMessageTypeName',
                name: 'txtMessageTypeName',
                pmType: 'text',
                label: "Name".translate(),
                placeholder: "Name".translate(),
                value: '',
                required: true,
                valueType: 'string',
                maxLength: 60,
                controlsWidth: 460,
                validators:[
                             {
                                pmType: "regexp",
                                criteria: /^[a-zA-Z_]+[0-9a-zA-Z_]+$/,
                                errorMessage: "A valid variable starts with a letter or underscore, followed by any number of letters, numbers, or underscores.".translate()
                             }
                           ]
            }
        ]
    });

    this.frmMessageType.getData = function () {
        var data = getData2PMUI(that.frmMessageType.html);
        return data;
    };

    this.gridMessages = new PMUI.grid.GridPanel({
        id: 'gridMessages',
        pageSize: 10,
        width: '96%',
        style: {
            cssClasses: ['mafe-gridPanel']
        },
        filterPlaceholder: 'Search ...'.translate(),
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return '';
        },
        columns: [{
            id: "msgtName",
            title: "Name".translate(),
            dataType: "string",
            columnData: "msgt_name",
            alignmentCell: "left",
            width: "330px",
            sortable: true
        }, {
            id: 'msgtEdit',
            dataType: 'button',
            title: '',
            buttonLabel: 'Edit'.translate(),
            width: '60px',
            buttonStyle: {
                cssClasses: [
                    'mafe-button-edit'
                ]
            },
            onButtonClick: function (row, grid) {
                that.showFormEdit(row.getData());
            }
        }, {
            id: 'msgtDelete',
            dataType: 'button',
            title: '',
            buttonLabel: function (row, data) {
                return 'Delete'.translate();
            },
            width: '70px',
            buttonStyle: {
                cssClasses: [
                    'mafe-button-delete'
                ]
            },
            onButtonClick: function (row, grid) {
                that.del(row.getData(), row, grid);
            }
        }
        ],
        dataItems: null
    });

    this.buttonFieldAdd = new PMUI.field.ButtonField({
        id: 'buttonFieldAdd',
        pmType: 'buttonField',
        value: 'Create'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        controlsWidth: 50,
        proportion: 0.6,
        handler: function (field) {
            that.addAcceptedValue();
        },
        buttonType : "success",
        style: {
                cssProperties: {
                    'vertical-align': 'top',
                    'padding-top': '37px',
                    'padding-right': '1px',
                    'padding-bottom': '1px',
                    'padding-left': '1px'
                }
            }
    });
    this.buttonFieldAdd.controls[0].button.setButtonType("success");

    this.buttonFieldCancel = new PMUI.field.ButtonField({
        id: 'buttonFieldCancel',
        pmType: 'buttonField',
        value: 'Cancel'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        controlsWidth: 50,
        proportion: 0.6,
        handler: function (field) {
            that.cancelAcceptedValue();
        },
        style: {
                cssProperties: {
                    'vertical-align': 'top',
                    'padding-top': '37px',
                    'padding-right': '1px',
                    'padding-bottom': '1px',
                    'padding-left': '1px'
                }
            }
    });
    this.buttonFieldCancel.controls[0].button.setButtonType("error");

    this.frmAcceptedValues = new PMUI.form.Form({
        id: 'frmAcceptedValues',
        width: 700,
        visibleHeader: false,
        items: [
            {
                pmType: 'panel',
                legend: "Message Field".translate(),
                fieldset: true,
                layout: 'hbox',
                items: [
                    {
                        pmType: "text",
                        name: "txtMessageTypeVariableName",
                        label: "Message Field Name".translate(),
                        labelWidth: "100%",
                        controlsWidth: "400px",
                        proportion: 2.5,
                        valueType: "string",
                        maxLength: 255,
                        required: true,
						labelPosition : "top",
                        validators:[
                             {
                                pmType: "regexp",
                                criteria: /^[a-zA-Z_]+[0-9a-zA-Z_]+$/,
                                errorMessage: "A valid variable starts with a letter or underscore, followed by any number of letters, numbers, or underscores.".translate()
                             }
                           ]
                    },
                    that.buttonFieldCancel,
                    that.buttonFieldAdd
                ]
            }
        ]
    });

    this.gridAcceptedValues = new PMUI.grid.GridPanel({
        id: 'gridAcceptedValues',
        pageSize: 5,
        height : 204,
        style: {cssClasses: ['mafe-gridPanel']},
        filterPlaceholder: 'Search ...'.translate(),
        emptyMessage: 'No records found'.translate(),
        nextLabel: 'Next'.translate(),
        previousLabel: 'Previous'.translate(),
        filterable: false,

        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return '';
        },

        columns: [
            {
                id: "msgtv_name",
                title: "Message Field Name".translate(),
                columnData: "msgtv_name",
                dataType: "string",
                alignmentCell: "left",
                width: 180,
                sortable: true
            },
            /*{
                id: "msgtv_default_value",
                title: "Default Value".translate(),
                columnData: "msgtv_default_value",
                dataType: "string",
                alignmentCell: "left",
                width: 300
            },*/
            {
                id: "btnEdit",
                dataType: "button",
                title: "",
                buttonLabel: "Edit".translate(),
                width: 60,
                buttonStyle: {cssClasses: ["mafe-button-edit"]},

                onButtonClick: function (row, grid) {
                    that.editAcceptedValue(row);
                }
            },
            {
                id: "btnDelete",
                dataType: "button",
                title: "",

                buttonLabel: function (row, data) {
                    return "Delete".translate();
                },

                width: 75,
                buttonStyle: {cssClasses: ["mafe-button-delete"]},

                onButtonClick: function (row, grid) {
                    that.deleteAcceptedValue(row);
                }
            }
        ],

        dataItems: null
    });

	this.isDirtyFrmMessageType = function(){
	    $("input,select,textarea").blur();
		if (this.frmMessageType.isVisible()){
			if (this.frmMessageType.isDirty() || this.dirtyAcceptedValue) {
				var message_window = new PMUI.ui.MessageWindow({
					id: 'messageWindowCancel',
					width: 490,
					title: "Message Types".translate(),
					windowMessageType: 'warning',
					bodyHeight: 'auto',
					message: 'Are you sure you want to discard your changes?'.translate(),
					footerItems: [
						{
							id: 'messageWindowNo',
							text: 'No'.translate(),
							handler: function () {
								message_window.close();
							},
							buttonType : "error"
						},
						{
							id: 'messageWindowYes',
							text: 'Yes'.translate(),
							handler: function () {
								that.requiredMessage.hide();
								if(that.clickedClose){
									that.winMessageType.close();
								}
								message_window.close();
								that.showGrid();
							},
							buttonType : "success"
						}
					]
				});
				message_window.open();
				message_window.showFooter();
			} else {
				if (this.clickedClose){
					this.winMessageType.close();
				}else{
					this.showGrid();
					this.requiredMessage.hide();
				}
			}		
		}else{
			this.winMessageType.close();
		}
	};
    this.winMessageType = new PMUI.ui.Window({
        id: 'winMessageType',
        title: "".translate(),
        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        buttonsPosition: 'right',
		onBeforeClose : function(){
			that.clickedClose = true;
			that.isDirtyFrmMessageType();
		},
        footerItems: [
			new PMUI.ui.Button({
			    id: 'winMessageTypeCancel',
			    text: 'Cancel'.translate(),
			    handler: function () {
			        that.clickedClose = false;
					that.isDirtyFrmMessageType();
			    },
			    buttonType: 'error'
			}),
            new PMUI.ui.Button({
                id: 'winMessageTypeSave',
                text: "Save".translate(),
                handler: function () {
                    if (that.edit) {
                        that.updateMessageType();
                    } else {
                        that.createMessageType();
                    }
                    that.requiredMessage.hide();
                },
                buttonType: 'success'
            })
        ],
        buttonPanelPosition: 'bottom'
    });
    PMMessageType.prototype.init.call(this);
};

PMMessageType.prototype.init = function () {
    var that = this;

    that.buttonCreate.defineEvents();

    that.winMessageType.addItem(that.gridMessages);
    that.winMessageType.addItem(that.frmMessageType);
    that.winMessageType.addItem(that.frmAcceptedValues);
    that.winMessageType.addItem(that.gridAcceptedValues);
    that.winMessageType.hideFooter();
    that.winMessageType.open();
    that.requiredMessage = $(document.getElementById("requiredMessage"));

    this.buttonFieldAdd.controls[0].button.setStyle({cssProperties: {padding: "6px 15px"}});
    this.buttonFieldCancel.controls[0].button.setStyle({cssProperties: {padding: "6px 15px"}});
    that.requiredMessage.css({
        float : "none"
    });
    $('#frmAcceptedValues .pmui-formpanel:eq(1)').css({ 'width': '690px' });
    that.requiredMessage.hide();
    that.winMessageType.body.appendChild(that.requiredMessage[0]);

    that.winMessageType.footer.html.style.textAlign = 'right';

    $('#gridMessages .pmui-textcontrol').css({'margin-top': '5px', width: '250px'});
    that.gridMessages.dom.toolbar.appendChild(that.buttonCreate.getHTML());

    that.showGrid();

    validateKeysField(that.frmMessageType.getField('txtMessageTypeName').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'isletter','isunderscore']);

    that.frmAcceptedValues.reset();
};

PMMessageType.prototype.createMessageType = function () {
    var that = this,
        data;

    if (!this.frmMessageType.isValid()) {
        return;
    }
    if(that.gridAcceptedValues.getData().length == 0){
        if (!this.frmAcceptedValues.isValid()) {
            return;
        }else{
            PMDesigner.msgFlash('Add at least one variable.'.translate(), winMessageType, 'error', 3000, 5);
            return;
        }
    }

    data = this.frmMessageType.getData();
    data.msgt_name = data.txtMessageTypeName;
    data.msgt_variables = that.getDataAcceptedValues();

    (new PMRestClient({

        endpoint: 'message-type',
        typeRequest: 'post',

        functionSuccess: function (xhr, response) {
            if (that.onSave(xhr, response) === false) {
                that.msgt_uid = null;
                return;
            }

            that.showGrid();
            that.load();
            that.msgt_uid = null;
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },

        messageError: " ".translate(),
        data: data,
        messageSuccess: "Message Type Saved successfully.".translate(),
        flashContainer: that.panel

    })).executeRestClient();
};

PMMessageType.prototype.updateMessageType = function () {
    var that = this,
        data;
    if (!this.frmMessageType.isValid()) {
        return;
    }
    if(that.gridAcceptedValues.getData().length == 0){
        if (!this.frmAcceptedValues.isValid()) {
            return;
        }else{
            PMDesigner.msgFlash('Add at least one variable.'.translate(), winMessageType, 'error', 3000, 5);
            return;
        }
    }

    data = this.frmMessageType.getData();
    data.msgt_name = data.txtMessageTypeName;
    data.msgt_variables = that.getDataAcceptedValues();

    (new PMRestClient({
        endpoint: "message-type/" + that.msgt_uid,
        typeRequest: "update",
        data: data,

        functionSuccess: function (xhr, response) {
            if (that.onEdit(xhr, response, data) === false) {
                that.msgt_uid = null;
                return;
            }

            that.showGrid();
            that.load();
            that.msgt_uid = null;
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },

        messageError: " ".translate(),
        messageSuccess: "Message Type edited successfully.".translate(),
        flashContainer: that.panel
    })).executeRestClient();
};

PMMessageType.prototype.deleteMessage = function (msgt_uid) {
    var that = this;

    (new PMRestClient({
        endpoint: 'message-type/' + msgt_uid,
        typeRequest: 'remove',

        functionSuccess: function (xhr, response) {
            that.load();
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        },

        messageError: 'Working...'.translate(),
        messageSuccess: 'Message Type Deleted successfully'.translate(),
        flashContainer: that.panel
    })).executeRestClient();
};

PMMessageType.prototype.load = function () {
    var that = this;

    var restProxy = new PMRestClient({
        endpoint: 'message-types',
        typeRequest: 'get',

        functionSuccess: function (xhr, response) {
            that.gridMessages.setDataItems(response);
            that.gridMessages.sort('msgt_name', 'asc');

            $(that.gridMessages.dom.toolbar).find("input").val("");
            that.gridMessages.clearFilter();
            document.getElementById("requiredMessage").style.marginTop="60px";
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });

    restProxy.executeRestClient();
};

PMMessageType.prototype.del = function (data, row, grid) {
    var that = this;
    var confirmWindow = new PMUI.ui.MessageWindow({
        id: 'confirmWindowDel',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title : "Message Types".translate(),
        message: "Do you want to delete this Message Type?".translate(),
        footerItems: [
			{
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                },
				buttonType : "error"
            },{
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                    that.deleteMessage(data.msgt_uid, row);
                },
				buttonType : "success"
            }
        ]
    });

    confirmWindow.open();
    confirmWindow.dom.titleContainer.style.height = '17px';
    confirmWindow.showFooter();
};

PMMessageType.prototype.showGrid = function () {
    var that = this;
    that.frmMessageType.setVisible(false);
    that.frmAcceptedValues.setVisible(false);
    that.gridAcceptedValues.setVisible(false);
    $(that.gridMessages.dom.toolbar).find("input").val("");
    that.gridMessages.clearFilter();
    that.gridMessages.setVisible(true);
    that.winMessageType.setTitle("Message Types".translate());
    that.winMessageType.hideFooter();
};

PMMessageType.prototype.showForm = function () {
    var that = this;
    this.requiredMessage.show();
    that.edit = false;
    that.dirtyAcceptedValue = false;
    that.frmMessageType.setVisible(true);
    that.frmAcceptedValues.setVisible(true);
    that.gridAcceptedValues.setVisible(true);
    that.gridMessages.setVisible(false);
    that.winMessageType.setTitle("Create Message Type".translate());
    that.winMessageType.showFooter();
    that.frmMessageType.reset();
    that.frmMessageType.setFocus();
    that.changeViewFieldType();
    that.frmAcceptedValues.reset();
    that.gridAcceptedValues.clearItems();
    that.buttonFieldCancel.setVisible(false);
};

PMMessageType.prototype.showFormEdit = function (data) {
    var that = this;
    that.showForm();
    that.msgt_uid = data.msgt_uid;
    that.edit = true;

    that.winMessageType.setTitle('Edit Message Type'.translate());
    that.frmMessageType.getField('txtMessageTypeName').setValue(data.msgt_name);

    that.setDataAcceptedValues(data.msgt_variables);
    document.getElementById("requiredMessage").style.marginTop="60px";
};

PMMessageType.prototype.changeViewFieldType = function () {
    var that = this;
    var sw = true;

    that.frmAcceptedValues.setVisible(true);
    that.gridAcceptedValues.setVisible(true);

    validateKeysField(that.frmAcceptedValues.getField('txtMessageTypeVariableName').getControls()[0].getHTML(), ['isbackspace', 'isnumber', 'isletter','isunderscore']);

    if (this.fieldInfo === null) {
        this.fieldInfo = document.createTextNode('');
    }
};

PMMessageType.prototype.addAcceptedValue = function () {
    var that = this;

    if (that.isAcceptedValueAdded()) {
        var message = new PMUI.ui.FlashMessage({
            message: "The variable Name already exists.".translate(),
            duration: 3000,
            severity: 'error',
            appendTo: that.winMessageType.footer
        });

        message.show();

        return;
    }

    if (!that.frmAcceptedValues.isValid()) {
        return;
    }

    if (that.editRow === null) {
        that.gridAcceptedValues.addItem(new PMUI.grid.GridPanelRow({
            data: {
                msgtv_name: that.frmAcceptedValues.getField('txtMessageTypeVariableName').getValue()
            }
        }));
    } else {
        that.editRow.setData({
            msgtv_name: that.frmAcceptedValues.getField('txtMessageTypeVariableName').getValue()
        });
    }

    that.dirtyAcceptedValue = true;
    that.cancelAcceptedValue();
};

PMMessageType.prototype.editAcceptedValue = function (row) {
    var that = this;
    that.editRow = row;
    var data = row.getData();

    that.frmAcceptedValues.getField('txtMessageTypeVariableName').setValue(data.msgtv_name);
    that.buttonFieldAdd.setValue('Save'.translate());
    that.buttonFieldCancel.setVisible(true);
};

PMMessageType.prototype.deleteAcceptedValue = function (row) {
    var that = this;
    var confirmWindow = new PMUI.ui.MessageWindow({
        id: 'confirmWindowDeleteAcceptedValue',
        windowMessageType: 'warning',
        width: 490,
        bodyHeight: 'auto',
        title : "Message Type".translate(),
        message: "Are you sure you want to delete the \"variable\"?".translate(),
        footerItems: [
			{
                text: 'No'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                },
				buttonType : "error"
            },{
                text: 'Yes'.translate(),
                visible: true,
                handler: function () {
                    confirmWindow.close();
                    that.gridAcceptedValues.removeItem(row);
                    that.dirtyAcceptedValue = true;
                },
				buttonType : "success"
            }
        ]
    });

    confirmWindow.open();
    confirmWindow.dom.titleContainer.style.height = '17px';
    confirmWindow.showFooter();
};

PMMessageType.prototype.getDataAcceptedValues = function () {
    var that = this, data = [], i;

    if (that.gridAcceptedValues.visible) {
        data = that.gridAcceptedValues.getData();

        for (i = 0; i < data.length; i++) {
            delete data[i].key;
            delete data[i].type;
        }
    }

    return data;
};

PMMessageType.prototype.setDataAcceptedValues = function (stringJsonData) {
    if (!stringJsonData) {
        return;
    }

    var that = this, i, data = stringJsonData;

    if (typeof stringJsonData === 'string') {
        data = JSON.parse(stringJsonData);
    }

    if (that.gridAcceptedValues.visible) {
        for (i = 0; i < data.length; i++) {
            that.gridAcceptedValues.addItem(new PMUI.grid.GridPanelRow({
                data: {
                    msgtv_name:          data[i].msgtv_name,
                    msgtv_default_value: data[i].msgtv_default_value
                }
            }));
        }
    }
};

PMMessageType.prototype.cancelAcceptedValue = function () {
    var that = this;

    that.editRow = null;
    that.buttonFieldAdd.setValue("Create".translate());
    that.buttonFieldCancel.setVisible(false);
    that.frmAcceptedValues.reset();
};

PMMessageType.prototype.isAcceptedValueAdded = function () {
    var that = this, i;
    var data = that.gridAcceptedValues.getData();

    for (i = 0; i < data.length; i++) {
        if (data[i].msgtv_name === that.frmAcceptedValues.getField('txtMessageTypeVariableName').getValue()) {
            return true;
        }
    }

    return false;
};

PMDesigner.messageType = function () {
    var pmvariables = new PMMessageType();
    pmvariables.load();
};

PMDesigner.messageType.create = function () {
    var pmvariables = new PMMessageType();
    pmvariables.showForm();
    pmvariables.load();
};

var MessageEventDefinition = function (bpmnEvent)
{
    var that = this,
        msgTypeVariableDefaultValueTitle="";
    this.bpmnEvent = bpmnEvent;
    this.arrayMessageType = [];
    this.messageEventDefinitionOption = "";
    this.messageEventDefinitionUid = "";
    this.editRow = null;
    this.eventType = bpmnEvent.evn_behavior;
    this.gridCurrent = null;
    this.editMessageForm = null;
    this.dirtyGrid = false;
	this.myTitle = "";

    if ((that.bpmnEvent.evn_type == "INTERMEDIATE" || that.bpmnEvent.evn_type == "START") && that.bpmnEvent.evn_marker == "MESSAGECATCH") {
        msgTypeVariableDefaultValueTitle = "Store value in".translate();
    } else {
        msgTypeVariableDefaultValueTitle = "Get value from".translate();
    }

    this.cboMessageType = new PMUI.field.DropDownListField({
        id: "cboMessageType",
        name: "cboMessageType",
        label: "Message Type".translate(),
        options: [],
        required: true,
        controlsWidth: 150,

        onChange: function (newValue, prevValue)
        {
            var messageTypeData = that.getMessageTypeByIndex(that.cboMessageType.getValue());

            if (messageTypeData != null) {
                that.gridCurrent.setDataItems(messageTypeData.msgt_variables);

                that.resetFrmMessageEventDefinition2();
            }
        }
    });

	this.isDirtyFormMessageEvent = function (){
		if (that.frmMessageEventDefinition1.isDirty()|| that.frmMessageEventDefinition4.isDirty() || that.dirtyGrid) {
			var message_window = new PMUI.ui.MessageWindow({
				id: "cancelMessageType",
				width: 490,
				title: myTitle.translate(),
				windowMessageType: "warning",
				bodyHeight: 'auto',
				message: 'Are you sure you want to discard your changes?'.translate(),
				footerItems: [
					{
						text: "No".translate(),
						handler: function () {
							message_window.close();
						},
						buttonType : "error"
					},
					{
						text: "Yes".translate(),
						handler: function () {
							message_window.close();
							that.winMessageEventDefinition.close();
						},
						buttonType : "success"
					}
				]
			});
			message_window.open();
			message_window.showFooter();
		}else {
			that.winMessageEventDefinition.close();
		}
	};
    this.frmMessageEventDefinition1 = new PMUI.form.Form({
        id: "frmMessageEventDefinition1",
        title: "",
        width: DEFAULT_WINDOW_WIDTH - 70,
        height : "100px",
        visibleHeader: false,

        items: [
            that.cboMessageType
        ],
        style: {
            cssProperties: {
                marginBottom: '15px',
            }
        }
    });

    this.btnSaveVariable = new PMUI.field.ButtonField({
        id: "btnSaveVariable",
        pmType: "buttonField",
        value: 'Save'.translate(),
        labelVisible: false,
        buttonAlign: 'center',
        controlsWidth: 50,
        proportion: 0.8,
        handler: function (field) {
            that.addVariableInGrdPnlVariable3();
            that.dirtyGrid = true;
        },
        buttonType : "success"
    });

    this.btnCancelVariable = new PMUI.field.ButtonField({
        id: "btnCancelVariable",
        pmType: "buttonField",
        value: "Cancel".translate(),
        labelVisible: false,
        buttonAlign: 'center',
        controlsWidth: 55,
        proportion: 0.6,

        handler: function (field) {
            that.cancelAcceptedValue();
        },
        buttonType : "error"
    });

    this.frmMessageEventDefinition2 = new PMUI.form.Form({
        id: "frmMessageEventDefinition2",
        width: DEFAULT_WINDOW_WIDTH - 70,
        height : "150px",
        visibleHeader: false,
        visible:false,
        items: [
            {
                pmType: "panel",
                legend: "Message content".translate(),
                fieldset: true,
                layout: "hbox",

                items: [
                    {
                        pmType: "text",
                        id: "txtMessageTypeVariableName",
                        name: "txtMessageTypeVariableName",
                        label: "Name".translate(),
                        labelWidth: "40%",
                        controlsWidth: 200,
                        proportion: 2.5,
                        valueType: "string",
                        maxLength: 255,
                        readOnly: true,
                        required: false
                    },
                    new CriteriaField({
                        id: "txtMessageTypeVariableDefaultValue",
                        name: "txtMessageTypeVariableDefaultValue",
                        valueType: "string",
                        label: msgTypeVariableDefaultValueTitle,
                        maxLength: 200,
                        labelWidth: "50%",
                        controlsWidth: 300,
                        proportion: 3.4,
                        required: false
                    }),
                    that.btnCancelVariable,
                    that.btnSaveVariable
                ]
            }
        ]
    });

    this.frmMessageEventDefinition3 = new PMUI.form.Form({
        id: "frmMessageEventDefinition3",
        width: DEFAULT_WINDOW_WIDTH - 70,
        height : "150px",
        visibleHeader: false,
        visible:false,
        items: [
            {
                pmType: "panel",
                legend: "Message content".translate(),
                fieldset: true,
                layout: "hbox",

                items: [
                    new CriteriaField({
                        id: "txtMessageTypeVariableDefaultValue",
                        name: "txtMessageTypeVariableDefaultValue",
                        valueType: "string",
                        label: msgTypeVariableDefaultValueTitle,
                        maxLength: 200,
                        labelWidth: "50%",
                        controlsWidth: 300,
                        proportion: 3.4,
                        required: false
                    }),
                    {
                        pmType: "text",
                        id: "txtMessageTypeVariableName",
                        name: "txtMessageTypeVariableName",
                        label: "Value".translate(),
                        labelWidth: "40%",
                        controlsWidth: 200,
                        proportion: 2.5,
                        valueType: "string",
                        maxLength: 255,
                        readOnly: true,
                        required: false
                    },
                    that.btnSaveVariable,
                    that.btnCancelVariable,
                ]
            }
        ]
    });

    this.grdPnlVariable3 = new PMUI.grid.GridPanel({
        id: "grdPnlVariable3",
        pageSize: 5,
        style: {cssClasses: ["mafe-gridPanel"]},
        emptyMessage: "No records found".translate(),
        filterable: false,

        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return "";
        },

        columns: [
            {
                id: "msgtv_name",
                title: "Name".translate(),
                columnData: "msgtv_name",
                dataType: "string",
                alignmentCell: "left",
                width: 180
            },
            {
                id: "msgtv_default_value",
                title: "Get value from".translate(),
                columnData: "msgtv_default_value",
                dataType: "string",
                alignmentCell: "left",
                width: 300
            },
            {
                id: "btnEdit",
                dataType: "button",
                title: "",
                buttonLabel: "Edit".translate(),
                width: 60,
                buttonStyle: {cssClasses: ["mafe-button-edit"]},

                onButtonClick: function (row, grid) {
                    that.setValueMessageEventDefinition(row);
                }
            }
        ],

        dataItems: null
    });

    this.grdPnlReceive = new PMUI.grid.GridPanel({
        id: "grdPnlVariable3",
        pageSize: 5,
        style: {cssClasses: ["mafe-gridPanel"]},
        emptyMessage: "No records found".translate(),
        filterable: false,

        customStatusBar: function (currentPage, pageSize, numberItems, criteria, filter) {
            return "";
        },

        columns: [
            {
                id: "msgtv_default_value",
                title: "Store value in".translate(),
                columnData: "msgtv_default_value",
                dataType: "string",
                alignmentCell: "left",
                width: 200
            },
            {
                id: "msgtv_name",
                title: "Name Value".translate(),
                columnData: "msgtv_name",
                dataType: "string",
                alignmentCell: "left",
                width: 280
            },
            {
                id: "btnEdit",
                dataType: "button",
                title: "",
                buttonLabel: "Edit".translate(),
                width: 60,
                buttonStyle: {cssClasses: ["mafe-button-edit"]},

                onButtonClick: function (row, grid) {
                    that.setValueMessageEventDefinition(row);
                }
            }
        ],
        dataItems: null
    });

    this.gridCurrent = this.grdPnlVariable3;


    this.txtCorrelationValue = new CriteriaField({
        id: "txtCorrelationValue",
        name: "txtCorrelationValue",
        valueType: "string",
        label: "Correlation Value".translate(),
        maxLength: 200,
        value: "",
        controlsWidth: 380
    });

    this.frmMessageEventDefinition4 = new PMUI.form.Form({
        id: "frmMessageEventDefinition4",
        title: "",
        width: DEFAULT_WINDOW_WIDTH - 70,
        height : "50px",
        visibleHeader: false,

        items: [
            that.txtCorrelationValue
        ]
    });

    MessageEventDefinition.prototype.init.call(this);
};

MessageEventDefinition.prototype.init = function()
{
    var that = this;

    that.createWindow();
    that.winMessageEventDefinition.addItem(that.frmMessageEventDefinition1);
    that.winMessageEventDefinition.addItem(that.editMessageForm);
    that.winMessageEventDefinition.addItem(that.gridCurrent);
    that.winMessageEventDefinition.addItem(that.frmMessageEventDefinition4);

    that.winMessageEventDefinition.open();
    this.editMessageForm.setVisible(false);
    this.applyStylesPost();

    that.load();
    document.getElementById("winMessageEventDefinition").childNodes[1].style.overflow="hidden";
    document.getElementById("requiredMessage").style.marginTop="15px";
};

MessageEventDefinition.prototype.applyStylesPost = function()
{
    var that = this;
    that.btnSaveVariable.controls[0].addCSSClasses(["pmui pmui-button pmui-success"]);
    that.btnCancelVariable.controls[0].addCSSClasses(["pmui pmui-button pmui-error"]);
    that.btnSaveVariable.controls[0].html.style.padding = "5px";
    $(that.btnCancelVariable.controls[0].html).css({
        padding : "5px",
        width : "auto"
    });
};

MessageEventDefinition.prototype.createWindow = function (){
    var that = this,
        flag = 0;

    if (that.bpmnEvent.evn_type == "START" && that.bpmnEvent.evn_marker == "MESSAGECATCH" && flag == 0) {
        myTitle = "Start Message Event".translate();
        flag = 1;
        this.gridCurrent = this.grdPnlReceive;
        this.editMessageForm = this.frmMessageEventDefinition3;
    }

    if (that.bpmnEvent.evn_type == "END" && that.bpmnEvent.evn_marker == "MESSAGETHROW" && flag == 0) {
        myTitle = "End Message Event".translate();
        flag = 1;
        this.gridCurrent = this.grdPnlVariable3;
        this.editMessageForm = this.frmMessageEventDefinition2;
    }

    if (that.bpmnEvent.evn_type == "INTERMEDIATE" && that.bpmnEvent.evn_marker == "MESSAGECATCH" && flag == 0) {
        myTitle = "Intermediate Receive Message Event".translate();
        flag = 1;
        this.gridCurrent = this.grdPnlReceive;
        this.editMessageForm = this.frmMessageEventDefinition3;
    }

    if (that.bpmnEvent.evn_type == "INTERMEDIATE" && that.bpmnEvent.evn_marker == "MESSAGETHROW" && flag == 0) {
        myTitle = "Intermediate Send Message Event".translate();
        flag = 1;
        this.gridCurrent = this.grdPnlVariable3;
        this.editMessageForm = this.frmMessageEventDefinition2;
    }

    that.winMessageEventDefinition = new PMUI.ui.Window({
        id: "winMessageEventDefinition",
        title: myTitle.translate(),

        height: DEFAULT_WINDOW_HEIGHT,
        width: DEFAULT_WINDOW_WIDTH,
        modal: true,
        onBeforeClose: function ()
        {
            that.isDirtyFormMessageEvent();
        },
        footerItems: [
            {
                pmType: "button",
                buttonType: "error",
                text: "Cancel".translate(),
                handler: function ()
                {
                    that.isDirtyFormMessageEvent();
                }
            },
            {
                pmType: "button",
                buttonType: "success",
                text: "Save".translate(),

                handler: function ()
                {
                    if (!that.frmMessageEventDefinition1.isValid()) {
                        return;
                    }

                    var correlationValueAux = getData2PMUI(that.frmMessageEventDefinition4.html);

                    var data = {
                        evn_uid:  that.bpmnEvent.evn_uid,
                        msgt_uid: that.cboMessageType.getValue(),
                        //msged_usr_uid,
                        msged_variables: that.getVariablesByArray(that.grdPnlVariable3GetData()),
                        msged_correlation: correlationValueAux.txtCorrelationValue
                    };

                    switch (that.messageEventDefinitionOption) {
                        case "POST":
                            that.messageEventDefintionPostRestProxy(data);

                            that.gridCurrent.clearItems();
                            that.winMessageEventDefinition.close();
                            break;
                        case "PUT":
                            that.messageEventDefintionPutRestProxy(data, that.messageEventDefinitionUid);

                            that.gridCurrent.clearItems();
                            that.winMessageEventDefinition.close();
                            break;
                    }
                }
            }
        ],

        footerAlign: "right",
        visibleFooter: true,
        closable: true,
        buttonPanelPosition: "bottom"
    });
};

MessageEventDefinition.prototype.getMessageTypeByIndex = function(messageTypeUid)
{
    var that = this;

    var messageTypeData = null;

    if (that.arrayMessageType.length > 0) {
        for (var i = 0; i <= that.arrayMessageType.length - 1; i++) {
            if (that.arrayMessageType[i].msgt_uid == messageTypeUid) {
                messageTypeData = that.arrayMessageType[i];
                break;
            }
        }
    }

    //Return
    return messageTypeData;
};

MessageEventDefinition.prototype.getVariablesByArray = function(arrayVariables)
{
    var variables = {};

    for (var i = 0; i <= arrayVariables.length - 1; i++) {
        variables[arrayVariables[i].msgtv_name] = arrayVariables[i].msgtv_default_value;
    }

    //Return
    return variables;
};

MessageEventDefinition.prototype.getVariablesByObject = function(objectVariable)
{
    var that = this;

    var arrayData = [];

    for (var key in objectVariable) {
        var aux = {};

        aux["msgtv_name"]          = key;
        aux["msgtv_default_value"] = objectVariable[key];

        arrayData.push(aux);
    };

    //Return
    return arrayData;
};

MessageEventDefinition.prototype.load = function()
{
    var that = this;

    that.messageEventDefinitionUid = "";
    that.messageEventDefinitionOption = "";

    var restProxy = new PMRestClient({
        typeRequest: "get",
        endpoint: "message-event-definitions",

        functionSuccess: function (xhr, response)
        {
            var dataResponse = response;
            var arrayMessageEventDefinition = dataResponse;
            var arrayMessageEventDefinitionData = {};

            for (var i = 0; i <= arrayMessageEventDefinition.length - 1; i++) {
                if (arrayMessageEventDefinition[i].evn_uid == that.bpmnEvent.evn_uid) {
                    that.messageEventDefinitionUid = arrayMessageEventDefinition[i].msged_uid
                    arrayMessageEventDefinitionData = arrayMessageEventDefinition[i];
                    break;
                }
            }

            that.cboMessageTypeSetOptionsRestProxy(that.cboMessageType, (typeof(arrayMessageEventDefinitionData.msgt_uid) != "undefined")? arrayMessageEventDefinitionData.msgt_uid : "");

            if (that.messageEventDefinitionUid == "") {
                //POST
                that.messageEventDefinitionOption = "POST";

                that.editMessageForm.getField("txtMessageTypeVariableName").setValue("");
                that.editMessageForm.getField("txtMessageTypeVariableDefaultValue").setValue("");
            } else {
                //PUT
                that.messageEventDefinitionOption = "PUT";

                that.gridCurrent.setDataItems(that.getVariablesByObject(arrayMessageEventDefinitionData.msged_variables));
                that.frmMessageEventDefinition4.getField("txtCorrelationValue").setValue(arrayMessageEventDefinitionData.msged_correlation);
            }
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });

    restProxy.executeRestClient();
};

MessageEventDefinition.prototype.setValueMessageEventDefinition = function(row)
{
    var that = this;

    that.editRow = row;
    var data = row.getData();

    that.editMessageForm.getField("txtMessageTypeVariableName").setValue(data.msgtv_name);
    that.editMessageForm.getField("txtMessageTypeVariableDefaultValue").setValue(data.msgtv_default_value);

    that.editMessageForm.setVisible(true);
};

MessageEventDefinition.prototype.resetFrmMessageEventDefinition2 = function()
{
    var that = this;

    that.editMessageForm.getField("txtMessageTypeVariableName").setValue("");
    that.editMessageForm.getField("txtMessageTypeVariableDefaultValue").setValue("");
};

MessageEventDefinition.prototype.addVariableInGrdPnlVariable3 = function()
{
    var that = this;

    if (that.editRow == null) {
        that.gridCurrent.addItem(new PMUI.grid.GridPanelRow({
            data: {
                msgtv_name: that.editMessageForm.getField("txtMessageTypeVariableName").getValue(),
                msgtv_default_value: that.editMessageForm.getField("txtMessageTypeVariableDefaultValue").getValue()
            }
        }));
    } else {
        that.editRow.setData({
            msgtv_name: that.editMessageForm.getField("txtMessageTypeVariableName").getValue(),
            msgtv_default_value: that.editMessageForm.getField("txtMessageTypeVariableDefaultValue").getValue()
        });
    }

    that.cancelAcceptedValue();
};

MessageEventDefinition.prototype.cancelAcceptedValue = function()
{
    var that = this;

    that.editRow = null;

    that.editMessageForm.reset();
    that.editMessageForm.setVisible(false);
};

MessageEventDefinition.prototype.grdPnlVariable3GetData = function()
{
    var that = this;

    var data = [];

    if (that.gridCurrent.visible) {
        data = that.gridCurrent.getData();

        for (var i = 0; i <= data.length - 1; i++) {
            delete data[i].key;
            delete data[i].type;
        }
    }

    //Return
    return data;
};

MessageEventDefinition.prototype.cboMessageTypeSetOptionsRestProxy = function(cboMessageType, messageTypeUidSelected)
{
    var that = this;

    cboMessageType.clearOptions();
    var iAux = 0;

    var restProxy = new PMRestClient({
        typeRequest: "get",
        endpoint: "message-types",

        functionSuccess: function (xhr, response)
        {
            var dataResponse = response;
            that.arrayMessageType = dataResponse;

            var arrayOptions = [];

            for (var i = 0; i <= dataResponse.length - 1; i++) {
                if (dataResponse[i].msgt_uid == messageTypeUidSelected) {
                    var iAux = i;
                }

                arrayOptions.push(
                    {
                        value: dataResponse[i].msgt_uid,
                        label: dataResponse[i].msgt_name
                    }
                );
            }

            if (arrayOptions.length > 0) {
                cboMessageType.setOptions(arrayOptions);

                if (messageTypeUidSelected == "") {
                    //POST
                    cboMessageType.setValue(arrayOptions[0].value);

                    var messageTypeData = that.getMessageTypeByIndex(arrayOptions[0].value);

                    if (messageTypeData != null) {
                        that.gridCurrent.setDataItems(messageTypeData.msgt_variables);
                    }
                } else {
                    //PUT
                    cboMessageType.setValue(arrayOptions[iAux].value);
                }
            }
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });

    restProxy.executeRestClient();
};

MessageEventDefinition.prototype.messageEventDefintionPostRestProxy = function(data)
{
    var restProxy = new PMRestClient({
        endpoint: "message-event-definition",
        typeRequest: "post",
        data: data,

        functionSuccess: function(xhr, response)
        {
            var dataResponse = response;
            PMDesigner.msgFlash('The property event was saved successfully.'.translate(), document.body, 'success', 3000, 5);
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });

    restProxy.executeRestClient();
};

MessageEventDefinition.prototype.messageEventDefintionPutRestProxy = function(data, messageEventDefinitionUid)
{
    var restProxy = new PMRestClient ({
        endpoint: "message-event-definition/" + messageEventDefinitionUid,
        typeRequest: "update",
        data: data,

        functionSuccess: function (xhr, response)
        {
            var dataResponse = response;
            PMDesigner.msgFlash('The property event was saved successfully.'.translate(), document.body, 'success', 3000, 5);
        },
        functionFailure: function (xhr, response)
        {
            PMDesigner.msgWinError(response.error.message);
        }
    });

    restProxy.executeRestClient();
};


/*----------------------------------********---------------------------------*/
var FeatureUtils = function () {
    
};

FeatureUtils.prototype.generateUId = function () {
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for ( var i=0; i < 16; i++ ) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
};

var ElementFactory = function () {
    this.utils = new FeatureUtils();
};

ElementFactory.prototype.getElement = function (data) {
    var element = {};
    element.id = this.utils.generateUId();
    element.name = data.name;
    element.label = data.label;
    element.valueType = data.valueType;
    element.controlsWidth = data.controlsWidth;
    element.required = data.required;
    element.events = data.events;
    element.listeners = data.listeners;

    switch (data.type) {
        case 'text':
            element.pmType = data.type;
            element.maxLength = 3;
            break;
        case 'hidden':
            element.pmType = data.type;
            break;
        case 'textarea':
            element.pmType = data.type;
            element.rows = data.rows;
            break;
        case 'dropdown':
            element.pmType = data.type;
            element.options = data.options;
            break;
        case 'checkbox':
            element.pmType = data.type;
            break;
        case 'link':
            element.pmType = data.type;
            break;
        case 'button':
            element.pmType = data.type;
            break;
        case 'criteria':
            element.pmType = data.type;
            element.rows = data.rows;
            break;
        default:
            break;
    }

    return element;
};

var FeaturesHandler = function () {
    this.elementFactory = new ElementFactory();
    this.utils = new FeatureUtils();
    this.forms = [];
};

FeaturesHandler.prototype.registerEvents = function (items) {
    
};

FeaturesHandler.prototype.registerListeners = function (items) {
    
};

FeaturesHandler.prototype.wireEvents = function(items) {
    this.registerEvents(items);
    this.registerListeners(items);
};

FeaturesHandler.prototype.parseForm = function (formData) {
    var form = {};
    form.id = this.utils.generateUId();
    form.title = formData.title;
    form.icon = (formData.icon || '');
    form.action = formData.action;
    form.panel = new PMUI.form.Form({
        id: this.utils.generateUId(),
        visibleHeader: false,
        width: DEFAULT_WINDOW_WIDTH - 250,
        items : this.parseItems(formData)
    });
    //console.log (this.parseItems(formData));
    return form;
};

FeaturesHandler.prototype.parseItems = function (formData) {
    var items = [];
    if (this.validateData(formData)) {
        for (var i in formData.fields) {
            items.push(
                this.elementFactory.getElement(formData.fields[i])
            );
        }
    }
    this.wireEvents(items);
    return items;
};

FeaturesHandler.prototype.validateData = function (formData) {
    switch (true) {
        case !(formData.type == 'form'):
            return false;
            break;
        case formData.language == undefined:
            return false;
            break;
        default:
            return true;
            break;
    }
};

FeaturesHandler.prototype.getForms = function() {
    return [];
};

PMDesigner.featuresHandler = new FeaturesHandler();
/*----------------------------------********---------------------------------*/
/**
 * @class IntroHelper
 * Handle Intro helper
 *
 * @constructor
 * Creates a new instance of the class
 * @param {Object} options
 */
var IntroHelper = function (options) {
    this.steps = [];
    this.introjs = null;
    IntroHelper.prototype.initObject.call(this, options);
};
IntroHelper.prototype.type = 'IntroHelper';

IntroHelper.prototype.initObject = function (options) {
    var defaults = {
        steps: [],
        skipLabel: "Skip"

    };
    $.extend(true, defaults, options);
    this.setSteps(defaults.steps);

    this.setSkipLabel(defaults.skipLabel);
    this.setNextLabel(defaults.nextLabel);
    this.setPrevLabel(defaults.prevLabel);
    this.setDoneLabel(defaults.doneLabel);

};

IntroHelper.prototype.setSteps = function (steps) {
    this.steps = steps;
    return this;
};

IntroHelper.prototype.setSkipLabel = function (label) {
    this.skipLabel = label;
    return this;
};
IntroHelper.prototype.setNextLabel = function (label) {
    this.nextLabel = label;
    return this;
};

IntroHelper.prototype.setPrevLabel = function (label) {
    this.prevLabel = label;
    return this;
};

IntroHelper.prototype.setDoneLabel = function (label) {
    this.doneLabel = label;
    return this;
};

IntroHelper.prototype.setSkipLabel = function (label) {
    this.skipLabel = label;
    return this;
};

IntroHelper.prototype.startIntro = function () {
    this.introjs = introJs();
    this.introjs.setOptions({
        steps: this.steps,
        skipLabel: this.skipLabel,
        nextLabel: this.nextLabel,
        prevLabel: this.prevLabel,
        doneLabel: this.doneLabel
    });

    this.introjs.start();
};
(function () {
PMDesigner.scriptTaskProperties = function (activity) {
    var that = this;
    var taskUid = activity.getID();
    var taskType = activity.getTaskType();
    var taskType = "TRIGGER";
    var triggerSelectedData;
    var oldValue = "";
    var uidProj = PMDesigner.project.id;
    var scrtas_uid = "";
    var triggerUid = "";
    $ctrlSpaceMessage = $("<p class='ctrlSpaceMessage'>" + "Press".translate() + " <strong>ctrl+space</strong> " + "to get the function list".translate() + ".</p>");
    
    /*window*/
    var buttonCancel = new PMUI.ui.Button({
        id: 'cancelScriptButton',
        text: "Cancel".translate(),
        buttonType: 'error',
        handler: function (event) {
			clickedClose = false;
			scriptTaskPropertiesWindow.isDirtyFormScript();
        }
    });
    
    var restClientNewScriptTask = function (triggerUid) {
        var restClient = new PMRestClient({
            endpoint: 'script-task',
            typeRequest: 'post',
            data: {
                scrtas_obj_uid: triggerUid,
                act_uid: taskUid,
                scrtas_obj_type:taskType
            },
            functionSuccess: function () {
                scriptTaskPropertiesWindow.close();
                PMDesigner.msgFlash('Script Task saved correctly'.translate(), document.body, 'success',3000, 5);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
                PMDesigner.msgFlash('There are problems updating the Script Task, please try again.'.translate(), document.body, 'error',3000, 5);
            }
        });
        restClient.executeRestClient();
    };
    
    var restClientUpdateScriptTask = function (triggerUid) {
        var restClient = new PMRestClient({
            endpoint: 'script-task/'+formScriptTask.getItems()[0].items.get(4).getValue(),
            typeRequest: 'update',
            data: {
                scrtas_obj_uid: triggerUid, /*trigger uid*/
                act_uid: taskUid,
                scrtas_obj_type:taskType
            },
            functionSuccess: function () {
                scriptTaskPropertiesWindow.close();
                PMDesigner.msgFlash('Script Task saved correctly'.translate(), document.body, 'success',3000, 5);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
                PMDesigner.msgFlash('There are problems updating the Script Task, please try again.'.translate(), document.body, 'error',3000, 5);
            }
        });
        restClient.executeRestClient();	
    };
    
    var restClientNewTrigger = function (dataToSend,newScriptTask){
        var restClient = new PMRestClient({
            endpoint: 'trigger',
            typeRequest: 'post',
            data: dataToSend,
            functionSuccess: function (xhr, response) {
				triggerUid = response.tri_uid;
				if(triggerUid != "" && typeof triggerUid != "undefinied") {
				    if(newScriptTask) {
				        restClientNewScriptTask(triggerUid);
				    } else {
				        restClientUpdateScriptTask(triggerUid);
				    }
				}
            },
            functionFailure: function (xhr, response)
            {
                var msg = response.error.message;
                var arrayMatch = [];

                if ((arrayMatch = /^[\w\s]+\:\s*(.*)$/i.exec(msg))) {
                    msg = arrayMatch[1];
                }

                PMDesigner.msgWinError(msg);
            }
        });
        restClient.executeRestClient();
    };
    
    var restClientUpdateTrigger = function (newScriptTask){
        var restClient = new PMRestClient({
            endpoint: 'trigger/' + formScriptTask.getItems()[0].items.get(1).getValue(),
            typeRequest: 'update',
            data: {
                scrtas_obj_uid: formScriptTask.getItems()[0].items.get(1).getValue(), /*trigger uid*/
                tri_webbot: formScriptTask.getItems()[1].controls[0].cm.getValue(),
                act_uid: taskUid,
                scrtas_obj_type:taskType
            },
            functionSuccess: function (xhr, response) {
                triggerUid = response.tri_uid;
				if(newScriptTask) {
				    restClientNewScriptTask(formScriptTask.getItems()[0].items.get(1).getValue());						
				} else {
				    restClientUpdateScriptTask(formScriptTask.getItems()[0].items.get(1).getValue());    
				}
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
                PMDesigner.msgFlash('There are problems updating the Script Task, please try again.'.translate(), document.body, 'error',3000, 5);
            }
        });
        restClient.executeRestClient();
    };
                                
    var buttonSave = new PMUI.ui.Button({
        id: 'saveScriptButton',
        text: "Save".translate(),
        handler: function (event) {
            if(formScriptTask.isValid()) {
                if (formScriptTask.getItems()[0].items.get(4).getValue() === "") { /*new*/
                    var newScriptTask = true;
                    if(formScriptTask.getItems()[0].items.get(1).getValue() != "") {
                        restClientUpdateTrigger(newScriptTask);
                    } else {
                        var dataToSend = {
                            tri_title: formScriptTask.getItems()[0].items.get(2).getValue(),
                            tri_description: "",
                            tri_webbot: formScriptTask.getItems()[1].controls[0].cm.getValue(),
                            tri_param: ""
                        };
                        restClientNewTrigger(dataToSend,newScriptTask);
                    }
                } else { /*old*/
                    var newScriptTask = false;
                    if(formScriptTask.getItems()[0].items.get(1).getValue() !== "") {
                        restClientUpdateTrigger(newScriptTask);
                    } else {
                        var dataToSend = {
                            tri_title: formScriptTask.getItems()[0].items.get(2).getValue(),
                            tri_description: "",
                            tri_webbot: formScriptTask.getItems()[1].controls[0].cm.getValue(),
                            tri_param: ""
                        };
                        restClientNewTrigger(dataToSend,newScriptTask);
                    }
                }
            }
        },
        buttonType: 'success'
    });
    
    var scriptTaskPropertiesWindow = new PMUI.ui.Window({
        id: "scriptTaskPropertiesWindow",
        title: "Script Task Properties".translate(),
        width: DEFAULT_WINDOW_WIDTH,
        height: DEFAULT_WINDOW_HEIGHT,
        footerItems: [
            {
                text: "@@",
                id: "selectPickerButton",
                handler: function () {
                    var picker = new VariablePicker();
                    picker.open({
                        success: function (variable) {
                            var codeMirror = formScriptTask.getItems()[1].controls[0].cm;
                            var cursorPos = codeMirror.getCursor();
                            codeMirror.replaceSelection(variable);
                            codeMirror.setCursor(cursorPos.line, cursorPos.ch);
                        }
                    });
                },
                style: {
                    cssProperties: {
                        "margin-left": '208px',
                        "background": "rgb(45, 62, 80)",
                        "border": "1px solid rgb(45, 62, 80)"
                    }
                }
            },
            buttonCancel,
            buttonSave
        ],
        buttonPanelPosition : "bottom",
        footerAling : "right",
		onBeforeClose : function(){
		    clickedClose = true;
	        scriptTaskPropertiesWindow.isDirtyFormScript();
		}
    });
    
    scriptTaskPropertiesWindow.isDirtyFormScript = function (){
	var that = this;
	var title = "Script Task".translate();
    if (oldValue !== formScriptTask.getItems()[1].controls[0].cm.getValue()){
		var message_window = new PMUI.ui.MessageWindow({
			id: "cancelMessageTriggers",
			windowMessageType: 'warning',
			width: 490,
			title: title,
			message: 'Are you sure you want to discard your changes?'.translate(),
			footerItems: [
				{
					text: "No".translate(),
					handler: function() {
						message_window.close();
					},
					buttonType : "error"
				},
				{
					text: "Yes".translate(),
					handler: function() {
						message_window.close();
						that.close();
					},
					buttonType : "success"
				}
			]
		});
		message_window.open();
		message_window.showFooter();
	} else {
		that.close();
	}
    };
    /*end window*/
    
    /*form*/
  
    var triggerEngine = new PMUI.field.DropDownListField({
        id: "triggerEngine",
        name: "triggerEngine",
        label: "Title".translate(),
        options: null,
        controlsWidth: 400,
        required: true,
        onChange: function (newValue, prevValue)
        {
            var uidTri = newValue;
            for (i = 0; i < triggerSelectedData.length; i++) {
                if (triggerSelectedData[i].tri_uid == uidTri) {
                    formScriptTask.getItems()[1].controls[0].cm.setValue(triggerSelectedData[i].tri_webbot);
                    //oldValue = triggerSelectedData[i].tri_webbot;
                }
            }
        }
    });
    
    var getListTrigger = function (triggerEngine) {
        var restClient = new PMRestClient({
            endpoint: 'triggers',
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                triggerSelectedData = response;
                var arrayOptions = [];
                arrayOptions[0] = {
                    label: "- Select a trigger -".translate(),
                    value: "",
                    disabled: true,
                    selected: true
                };
                for (var i = 0; i <= triggerSelectedData.length - 1; i++)  {
                    arrayOptions.push(
                        {
                            value: triggerSelectedData[i].tri_uid,
                            label: triggerSelectedData[i].tri_title
                        }
                    );
                }
                triggerEngine.setOptions(arrayOptions);
                triggerEngine.setValue(arrayOptions[0].value);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            },
            messageError: "There are problems getting the Triggers list, please try again.".translate()
        });
        restClient.executeRestClient();
    };
    
    var getScriptTask = function() {
        var restClient = new PMRestClient({
            endpoint: 'script-task/activity/'+taskUid,
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                if(typeof response == "object")
                {
                    triggerUid = response.scrtas_obj_uid;
    				if(triggerUid != "" && typeof triggerUid != "undefinied") {
                        for (i = 0; i < triggerSelectedData.length; i++) {
                            if (triggerSelectedData[i].tri_uid == triggerUid) {
                                formScriptTask.getItems()[1].controls[0].setValue(triggerSelectedData[i].tri_webbot);
                                oldValue = triggerSelectedData[i].tri_webbot;
                                formScriptTask.getItems()[0].items.get(4).setValue(response.scrtas_uid);
                                formScriptTask.getItems()[0].items.get(1).setValue(triggerUid);
                            }
                        }
                    }
                }
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        });
        restClient.executeRestClient();    
    };
    
    var formScriptTask = new PMUI.form.Form({
        id: "formScriptTask",
        border: true,
        visibleHeader: false,
        width: '900px',
        height: "300px",
        name: "formScriptTask",
        title: "".translate(),
        items: [
            {
                id: "panelDetailsCustom",
                pmType: "panel",
                layout: 'vbox',
                fieldset: false,
                height: '380px',
                legend: "DETAILS".translate(),
                items: [
                    {
                        id: "taskUid",
                        pmType: "text",
                        label: "ID".translate(),
                        value: taskUid,
                        name: "taskUid",
                        readOnly: true,
                        visible: false,
                        valueType: 'string'
                    },
                    triggerEngine,
                    {
                        id: "newScript",
                        pmType: "text",
                        label: "Title".translate(),
                        controlsWidth: 400,
                        value: "",
                        name: "newScript",
                        required: false,
                        visible: false,
                        valueType: 'string'
                    },
                    {
                        id: "taskType",
                        pmType: "text",
                        value: taskType,
                        name: "taskType",
                        visible: false,
                        valueType: 'string'
                    },
                    {
                        id: "scrtas_uid",
                        pmType: "text",
                        value: scrtas_uid,
                        name: "scrtas_uid",
                        visible: false,
                        valueType: 'string'
                    }
                ]
            }
        ]/*,
        buttons: [
            {
                text: "@@",
                id: "selectPickerButton",
                handler: function () {
                    var picker = new VariablePicker();
                    picker.open({
                        success: function (variable) {
                            var codeMirror = formScriptTask.getItems()[1].controls[0].cm;
                            var cursorPos = codeMirror.getCursor();
                            codeMirror.replaceSelection(variable);
                            codeMirror.setCursor(cursorPos.line, cursorPos.ch);
                        }
                    });
                },
                style: {
                    cssProperties: {
                        "margin-left": '208px',
                        "background": "rgb(45, 62, 80)",
                        "border": "1px solid rgb(45, 62, 80)"
                    }
                }
            }
        ]*/
    });
    
    that.cd = new PMCodeMirrorField({
        labelWidth: '23.8%'
    });
    that.cd.setLabel("Code".translate());
    formScriptTask.addItem(that.cd);
    formScriptTask.getItems()[1].setName('code');
    formScriptTask.getItems()[1].setID('code');
    formScriptTask.getItems()[1].setHeight(300);
    CodeMirror.commands.autocomplete = function(cm) {
        CodeMirror.showHint(cm, CodeMirror.phpHint);
    }
    
    getListTrigger(triggerEngine);
    getScriptTask();
    /*end form*/
    
    var domSettings = function() {
        var codeMirrorControl;
        codeMirrorControl = formScriptTask.getItems()[1].controls[0].cm;
        formScriptTask.getItems()[1].html.style.padding = "10px";
        if (codeMirrorControl != undefined) {
           codeMirrorControl.setSize(650, 255); //CodeMirror Size
           $("#code").find(".CodeMirror-wrap").css({'border': '1px solid #c0c0c0'}); 
        }
        var requiredMessage = $(document.getElementById("requiredMessage"));
        scriptTaskPropertiesWindow.body.appendChild(requiredMessage[0]);
        requiredMessage[0].style['marginTop']='65px';
        
        scriptTaskPropertiesWindow.footer.html.style.textAlign = 'right';
        $(".CodeMirror.cm-s-default.CodeMirror-wrap").after($ctrlSpaceMessage.css({"padding-left":"10px","margin":"3px 0px 0px 0px"}));
        
        var titleAdd = "Add new".translate();
        var titleBack = "Back to list".translate();
        
        $("#triggerEngine").find("select").after('&nbsp;&nbsp;<a id="titleAdd" title="'+titleAdd+'" class="showHideScript pmui pmui-button mafe-button-edit-assign-no-hover" href="#" style="left: 0px; top: 0px; width: auto; line-height: normal; position: relative; height: auto; z-index: auto;"><span class="button-label"></span><span class="button-icon " style="display: inline-block;"></span></a>');
        $("#newScript").find("input").after('&nbsp;&nbsp;<a id="titleBack" title="'+titleBack+'" class="showHideScript pmui pmui-button mafe-button-delete-assign-no-hover" href="#" style="left: 0px; top: 0px; width: auto; line-height: normal; position: relative; height: auto; z-index: auto;"><span class="button-label"></span><span class="button-icon " style="display: inline-block;"></span></a>');
        $( "#titleAdd, #titleBack" ).tooltip();
    };
        
    scriptTaskPropertiesWindow.addItem(formScriptTask);
    scriptTaskPropertiesWindow.open();
    scriptTaskPropertiesWindow.showFooter();
    domSettings();
    
    $(".showHideScript").on("click",function(){
        if(formScriptTask.getItems()[0].items.get(1).isVisible()) {
            formScriptTask.getItems()[0].items.get(1).setVisible(false);
        } else {
            formScriptTask.getItems()[0].items.get(1).setVisible(true);
            formScriptTask.getItems()[0].items.get(1).setValue("");
            formScriptTask.getItems()[0].items.get(2).setRequired(false);
            formScriptTask.getItems()[0].items.get(1).setRequired(true);
            $(formScriptTask.getItems()[0].items.get(1).html).find("select").focus();
        }
        
        if(!formScriptTask.getItems()[0].items.get(2).isVisible()) {
            formScriptTask.getItems()[0].items.get(2).setVisible(true);
            formScriptTask.getItems()[0].items.get(1).setRequired(false);
            formScriptTask.getItems()[0].items.get(1).setValue("");
            formScriptTask.getItems()[0].items.get(2).setRequired(true);
            formScriptTask.getItems()[0].items.get(2).setValue("");
            $(formScriptTask.getItems()[0].items.get(2).html).find("input").focus();
        } else {
            formScriptTask.getItems()[0].items.get(2).setVisible(false);
        }
        formScriptTask.getItems()[1].controls[0].cm.setValue("");
        oldValue = "";
        
    });

};
}());

(function () {
PMDesigner.timerEventProperties = function (activity) {
    var that = this;
    var evnUid = activity.getID();
    var activityType = activity.getEventMarker();
    var uidProj = PMDesigner.project.id;
    var oldValues;
    var tmrevn_uid = "";
    var dataTimer = "";
    var eventType = activity.getEventType();

    /*window*/
    var buttonCancel = new PMUI.ui.Button({
        id: 'cancelTimmerButton',
        text: "Cancel".translate(),
        buttonType: 'error',
        handler: function (event) {
			clickedClose = false;
            formTimerEvent.getField('startDate').controls[0].hideCalendar();
            formTimerEvent.getField('endDate').controls[0].hideCalendar();
            formTimerEvent.getField('oneDateTime').controls[0].hideCalendar();
            formTimerEvent.getField('dateTimeVariablePicker').controls[0].hideCalendar();
			timerEventPropertiesWindow.isDirtyFormScript();
        }
    });
    
    var restClientNewTimerEvent = function(dataToSave) {
        var restClient = new PMRestClient({
            endpoint: 'timer-event',
            typeRequest: 'post',
            data: dataToSave,
            functionSuccess: function (xhr, response) {
                timerEventPropertiesWindow.close();
                PMDesigner.msgFlash('Timer Event saved correctly'.translate(), document.body, 'success',3000, 5);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
                PMDesigner.msgFlash('There are problems updating the Timer Event, please try again.'.translate(), document.body, 'error',3000, 5);
            }
        });
        restClient.executeRestClient();
    };
    
    var restClientUpdateTimerEvent = function(dataToSave) {
        var restClient = new PMRestClient({
            endpoint: 'timer-event/'+formTimerEvent.getField("tmrevn_uid").getValue(),
            typeRequest: 'update',
            data: dataToSave,
            functionSuccess: function (xhr, response) {
                timerEventPropertiesWindow.close();
                PMDesigner.msgFlash('Timer Event saved correctly'.translate(), document.body, 'success',3000, 5);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
                PMDesigner.msgFlash('There are problems updating the Timer Event, please try again.'.translate(), document.body, 'error',3000, 5);
            }
        });
        restClient.executeRestClient();
    };
    
    var buttonSave = new PMUI.ui.Button({
        id: 'saveTimmerButton',
        text: "Save".translate(),
        handler: function (event) {
            formTimerEvent.getField("hourType").setValue(getData2PMUI(formTimerEvent.html).hourType);
            formTimerEvent.getField("minuteType").setValue(getData2PMUI(formTimerEvent.html).minuteType);
            formTimerEvent.getField("dayType").setValue(getData2PMUI(formTimerEvent.html).dayType);
            if(formTimerEvent.isValid()) {
                var opt = formTimerEvent.getField("radioGroup").getValue();
                var formData = formTimerEvent.getData();
                switch(opt) {
                    case "1": /*hourly*/
                        dataTimer = {
                            evn_uid: evnUid,
                            tmrevn_option: "HOURLY",
                            tmrevn_start_date: formData.startDate.substring(0, 10),
                            tmrevn_end_date: formTimerEvent.getField("endDate").getValue().substring(0, 10),
                            tmrevn_minute: formData.minuteType.length == 1 ? "0"+formData.minuteType : (formData.minuteType.length == 0 ? "00" : formData.minuteType )
                        };
                    break;
                    case "2": /*daily*/
                        dataTimer = {
                            evn_uid: evnUid,
                            tmrevn_option: "DAILY",
                            tmrevn_start_date: formData.startDate.substring(0, 10),
                            tmrevn_end_date: formTimerEvent.getField("endDate").getValue().substring(0, 10),
                            tmrevn_hour: formData.hourType.length == 1 ? "0"+formData.hourType : (formData.hourType.length == 0 ? "00" : formData.hourType ),
                            tmrevn_minute: formData.minuteType.length == 1 ? "0"+formData.minuteType : (formData.minuteType.length == 0 ? "00" : formData.minuteType ),
                            tmrevn_configuration_data: JSON.parse(formData.daysGroup).map(function(n) {return Number(n);})
                        };
                    break;
                    case "3": /*monthly*/
                        dataTimer = {
                            evn_uid: evnUid,
                            tmrevn_option: "MONTHLY",
                            tmrevn_start_date: formData.startDate.substring(0, 10),
                            tmrevn_end_date: formTimerEvent.getField("endDate").getValue().substring(0, 10),
                            tmrevn_day: formData.dayType.length == 1 ? "0"+formData.dayType : (formData.dayType.length == 0 ? "00" : formData.dayType ),
                            tmrevn_hour: formData.hourType.length == 1 ? "0"+formData.hourType : (formData.hourType.length == 0 ? "00" : formData.hourType ),
                            tmrevn_minute: formData.minuteType.length == 1 ? "0"+formData.minuteType : (formData.minuteType.length == 0 ? "00" : formData.minuteType ),
                            tmrevn_configuration_data: JSON.parse(formData.monthsGroup).map(function(n) {return Number(n);})
                        };
                    break;
                    case "4": /*one-date-time*/
                        dataTimer = {
                            evn_uid: evnUid,
                            tmrevn_option: "ONE-DATE-TIME",
                            tmrevn_next_run_date: $("#oneDateTime").find("input:eq(0)").val()
                        };
                        for (var i in ENABLED_FEATURES) {
                            if (ENABLED_FEATURES[i] == 'oq3S29xemxEZXJpZEIzN01qenJUaStSekY4cTdJVm5vbWtVM0d4S2lJSS9qUT0=') {
                                dataTimer.tmrevn_next_run_date = convertDatetimeToIso8601(dataTimer.tmrevn_next_run_date);
                            }
                        }
                    break;
                    case "5": /*every*/
                        dataTimer = {
                            evn_uid: evnUid,
                            tmrevn_option: "EVERY",
                            tmrevn_hour: formData.hourType.length == 1 ? "0"+formData.hourType : (formData.hourType.length == 0 ? "00" : formData.hourType ),
                            tmrevn_minute: formData.minuteType.length == 1 ? "0"+formData.minuteType : (formData.minuteType.length == 0 ? "00" : formData.minuteType )
                        };
                    break;
                    case "6": /*wait for*/
                        if(formData.dayType == "" && formData.hourType == "" && formData.minuteType == "") {
                             PMDesigner.msgWinError("At least one of these fields must be filled (Day, Hour, Minute)".translate());
                             return;
                        }
                        dataTimer = {
                            evn_uid: evnUid,
                            tmrevn_option: "WAIT-FOR",
                            tmrevn_day: formData.dayType.length == 1 ? "0"+formData.dayType : (formData.dayType.length == 0 ? "00" : formData.dayType ),
                            tmrevn_hour: formData.hourType.length == 1 ? "0"+formData.hourType : (formData.hourType.length == 0 ? "00" : formData.hourType ),
                            tmrevn_minute: formData.minuteType.length == 1 ? "0"+formData.minuteType : (formData.minuteType.length == 0 ? "00" : formData.minuteType )
                        };
                    break;
                    case "7": /*wait until specified date time*/
                        dataTimer = {
                            evn_uid: evnUid,
                            tmrevn_option: "WAIT-UNTIL-SPECIFIED-DATE-TIME",
                            tmrevn_configuration_data: $("#dateTimeVariablePicker").find("input:eq(0)").val()
                        };
                    break;
                }
                if (formTimerEvent.getField("tmrevn_uid").getValue() == "") {
                    restClientNewTimerEvent(dataTimer);
                } else {
                    restClientUpdateTimerEvent(dataTimer);
                }
            }
        },
        buttonType: 'success'
    });
    
    var timerEventPropertiesWindow = new PMUI.ui.Window({
        id: "timerEventPropertiesWindow",
        title: "Timer Event Properties".translate(),
        width: DEFAULT_WINDOW_WIDTH,
        height: DEFAULT_WINDOW_HEIGHT,
        footerItems: [
            buttonCancel,
            buttonSave
        ],
        buttonPanelPosition : "bottom",
        footerAling : "right",
		onBeforeClose : function(){
		    clickedClose = true;
            formTimerEvent.getField('startDate').controls[0].hideCalendar();
            formTimerEvent.getField('endDate').controls[0].hideCalendar();
            formTimerEvent.getField('oneDateTime').controls[0].hideCalendar();
            formTimerEvent.getField('dateTimeVariablePicker').controls[0].hideCalendar();
	        timerEventPropertiesWindow.isDirtyFormScript();
		}
    });
    
    timerEventPropertiesWindow.isDirtyFormScript = function (){
    	var that = this;
        var title = "Timer Event".translate();
    	var newValues = getFormData($("#formTimerEvent"));
    	if (JSON.stringify(oldValues) !== JSON.stringify(newValues) ){
    		var message_window = new PMUI.ui.MessageWindow({
    			id: "cancelMessageTriggers",
    			windowMessageType: 'warning',
    			width: 490,
    			title: title,
    			message: 'Are you sure you want to discard your changes?'.translate(),
    			footerItems: [
    				{
    					text: "No".translate(),
    					handler: function() {
    						message_window.close();
    					},
    					buttonType : "error"
    				},
    				{
    					text: "Yes".translate(),
    					handler: function() {
    						message_window.close();
    						that.close();
    					},
    					buttonType : "success"
    				}
    			]
    		});
    		message_window.open();
    		message_window.showFooter();
    	} else {
    		that.close();
    	}
    };
    /*end window*/
    
    /*form*/
    var showHourlyItems = function() {
        //formTimerEvent.getItems()[0].setVisible(false);
        formTimerEvent.getField('startDate').setVisible(true);
        formTimerEvent.getField('startDate').setRequired(true);
        formTimerEvent.getField('endDateCheckbox').setVisible(true);
        formTimerEvent.getField('endDate').setVisible(true);
        formTimerEvent.getField('oneDateTime').setVisible(false);
        formTimerEvent.getField('oneDateTime').reset();
        formTimerEvent.getField('oneDateTime').setRequired(false);
        formTimerEvent.getField('daysGroup').setVisible(false);
        formTimerEvent.getField('daysGroup').reset();
        formTimerEvent.getField('daysGroup').setRequired(false);
        formTimerEvent.getField('monthsGroup').setVisible(false);
        formTimerEvent.getField('monthsGroup').reset();
        formTimerEvent.getField('monthsGroup').setRequired(false);
        formTimerEvent.getField('dateTimeVariablePicker').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').reset();
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setRequired(false);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setVisible(false); 
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').reset(false);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setRequired(false);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setRequired(true);
    };
    
    var showDailyItems = function() {
        formTimerEvent.getField('startDate').setVisible(true);
        formTimerEvent.getField('startDate').setRequired(true);
        formTimerEvent.getField('endDateCheckbox').setVisible(true);
        formTimerEvent.getField('endDate').setVisible(true);
        formTimerEvent.getField('oneDateTime').setVisible(false); 
        formTimerEvent.getField('oneDateTime').reset();
        formTimerEvent.getField('oneDateTime').setRequired(false);
        formTimerEvent.getField('daysGroup').setVisible(true);
        formTimerEvent.getField('daysGroup').setRequired(true);
        formTimerEvent.getField('oneDateTime').reset();
        formTimerEvent.getField('oneDateTime').setRequired(false);
        formTimerEvent.getField('monthsGroup').setVisible(false); 
        formTimerEvent.getField('monthsGroup').reset();
        formTimerEvent.getField('monthsGroup').setRequired(false);
        formTimerEvent.getField('dateTimeVariablePicker').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').reset();
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setRequired(false);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setRequired(true);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setRequired(true);
    };
    
    var showMonthlyItems = function() {
        formTimerEvent.getField('startDate').setVisible(true);
        formTimerEvent.getField('startDate').setRequired(true);
        formTimerEvent.getField('endDateCheckbox').setVisible(true);
        formTimerEvent.getField('endDate').setVisible(true);
        formTimerEvent.getField('oneDateTime').setVisible(false);
        formTimerEvent.getField('oneDateTime').reset();
        formTimerEvent.getField('oneDateTime').setRequired(false);
        formTimerEvent.getField('daysGroup').setVisible(false); 
        formTimerEvent.getField('daysGroup').reset();
        formTimerEvent.getField('daysGroup').setRequired(false);
        formTimerEvent.getField('monthsGroup').setVisible(true);
        formTimerEvent.getField('monthsGroup').setRequired(true);
        formTimerEvent.getField('dateTimeVariablePicker').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setRequired(true);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setRequired(true);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setRequired(true);
    };
    
    var showOneDateTimeItems = function() {
        formTimerEvent.getField('startDate').setVisible(false);
        formTimerEvent.getField('startDate').reset();
        formTimerEvent.getField('startDate').setRequired(false);
        formTimerEvent.getField('endDateCheckbox').setVisible(false);
        formTimerEvent.getField('endDate').setVisible(false);
        formTimerEvent.getField('oneDateTime').setVisible(true);
        formTimerEvent.getField('oneDateTime').setRequired(true);
        formTimerEvent.getField('daysGroup').setVisible(false); 
        formTimerEvent.getField('daysGroup').reset();
        formTimerEvent.getField('daysGroup').setRequired(false);
        formTimerEvent.getField('monthsGroup').setVisible(false);
        formTimerEvent.getField('monthsGroup').reset();
        formTimerEvent.getField('monthsGroup').setRequired(false);
        formTimerEvent.getField('dateTimeVariablePicker').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setVisible(false); 
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').reset();
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setRequired(false);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setVisible(false); 
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').reset();
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setRequired(false);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setVisible(false); 
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').reset();
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setRequired(false);
    };
    
    var showEveryItems = function() {
        formTimerEvent.getField('startDate').setVisible(false);
        formTimerEvent.getField('startDate').reset();
        formTimerEvent.getField('startDate').setRequired(false);
        formTimerEvent.getField('endDateCheckbox').setVisible(false);
        formTimerEvent.getField('endDate').setVisible(false);
        formTimerEvent.getField('oneDateTime').setVisible(false); 
        formTimerEvent.getField('oneDateTime').reset();
        formTimerEvent.getField('oneDateTime').setRequired(false);
        formTimerEvent.getField('daysGroup').setVisible(false); 
        formTimerEvent.getField('daysGroup').reset();
        formTimerEvent.getField('daysGroup').setRequired(false);
        formTimerEvent.getField('monthsGroup').setVisible(false); 
        formTimerEvent.getField('monthsGroup').reset();
        formTimerEvent.getField('monthsGroup').setRequired(false);
        formTimerEvent.getField('dateTimeVariablePicker').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setVisible(false); 
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').reset();
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setRequired(false);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setRequired(true);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setRequired(true);
    };
    /*intermediate*/
    var showWaitForItems = function() {
        formTimerEvent.getField('startDate').setVisible(false);
        formTimerEvent.getField('endDateCheckbox').setVisible(false);
        formTimerEvent.getField('endDate').setVisible(false);
        formTimerEvent.getField('oneDateTime').setVisible(false);
        formTimerEvent.getField('daysGroup').setVisible(false); 
        formTimerEvent.getField('daysGroup').reset();
        formTimerEvent.getField('daysGroup').setRequired(false);
        formTimerEvent.getField('monthsGroup').setVisible(false);
        formTimerEvent.getField('monthsGroup').reset();
        formTimerEvent.getField('monthsGroup').setRequired(false);
        formTimerEvent.getField('dateTimeVariablePicker').setVisible(false);
        formTimerEvent.getField('dateTimeVariablePicker').reset(false);
        formTimerEvent.getField('dateTimeVariablePicker').setRequired(false);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setVisible(true);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setVisible(true);
    };
    
    var showWaitUntilItems = function() {
        formTimerEvent.getField('startDate').setVisible(false);
        formTimerEvent.getField('endDateCheckbox').setVisible(false);
        formTimerEvent.getField('endDate').setVisible(false);
        formTimerEvent.getField('oneDateTime').setVisible(false);
        formTimerEvent.getField('daysGroup').setVisible(false);
        formTimerEvent.getField('daysGroup').reset();
        formTimerEvent.getField('daysGroup').setRequired(false);
        formTimerEvent.getField('monthsGroup').setVisible(false); 
        formTimerEvent.getField('monthsGroup').reset();
        formTimerEvent.getField('monthsGroup').setRequired(false);
        formTimerEvent.getField('dateTimeVariablePicker').setVisible(true);
        formTimerEvent.getField('dateTimeVariablePicker').setRequired(true);
        formTimerEvent.getItems()[0].items.get(4).getField('dayType').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('hourType').setVisible(false);
        formTimerEvent.getItems()[0].items.get(4).getField('minuteType').setVisible(false);
    };
    
    var radioGroup = new PMUI.field.RadioButtonGroupField({
        id: 'radioGroup',
        controlPositioning: 'horizontal',
        maxDirectionOptions: 7,
        options: [
            {
                label: "Hourly".translate(),
                value: "1"
            },
            {
                label: "Daily".translate(),
                value: "2"
            },
            {
                label: "Monthly".translate(),
                value: "3"
            },
            {
                label: "One date/time".translate(),
                value: "4"
            },
            {
                label: "Every".translate(),
                value: "5"
            },
            {
                label: "Wait for".translate(),
                value: "6"
            },
            {
                label: "Wait until specified date/time".translate(),
                value: "7"
            }
            
        ],
        onChange: function(newVal, oldVal) {
            switch(newVal) {
                case "1":
                    showHourlyItems();
                break;
                case "2":
                    showDailyItems();
                break;
                case "3":
                    showMonthlyItems();
                break;
                case "4":
                    showOneDateTimeItems();
                break;
                case "5":
                    showEveryItems();
                break;
                case "6":
                    showWaitForItems();
                break;
                case "7":
                    showWaitUntilItems();
                break;
            }
        },
        value: "1"
    });
    
    var startDate = new PMUI.field.DateTimeField({
        id: 'startDate',
        label:'Star date'.translate(),
        //value: new Date(),
        datetime : false,
        dateFormat: 'yy-mm-dd',
        firstDay: 1,
        controlsWidth: 100,
        required: false,
        readOnly: true
    });
    
    var endDate = new PMUI.field.DateTimeField({
        id: 'endDate',
        label: "End date".translate(),
        value: '',
        disabled: true,
        datetime : false,
        dateFormat: 'yy-mm-dd',
        firstDay: 1,
        controlsWidth: 100,
        required: false,
        readOnly: true
    });
    
    var oneDateTime = new PMUI.field.DateTimeField({
        id: 'oneDateTime',
        label:'Date time'.translate(),
        datetime : true,
        dateFormat: 'yy-mm-dd HH:ii:ss',
        firstDay: 1,
        controlsWidth: 150,
        required: false,
        readOnly: true
    });
    
    var daysGroup = new PMUI.field.CheckBoxGroupField({
        label: "Days".translate(),
        id: 'daysGroup',
        controlPositioning: 'vertical',
        maxDirectionOptions: 3,
        required: true,
        options : [
            {  
                label: 'Monday'.translate(),
                value: 1,
                name: 'monday',
                selected :true
            },
            {  
                label: 'Tuesday'.translate(),
                value: 2,
                name: 'tuesday',
                selected :true
            },
            {  
                label: 'Wednesday'.translate(),
                value: 3,
                name: 'wednesday',
                selected :true
            },
            {  
                label: 'Thursday'.translate(),
                value: 4,
                name: 'thursday',
                selected :true
            },
            {  
                label: 'Friday'.translate(),
                value: 5,
                name: 'friday',
                selected :true
            },
            {  
                label: 'Saturday'.translate(),
                value: 6,
                name: 'saturday',
                selected :true
            },
            {  
                label: 'Sunday'.translate(),
                value: 7,
                name: 'sunday',
                selected :true
            }
        ],
        onChange: function(newVal, oldVal) {
            
        }
    });
    
    var monthsGroup = new PMUI.field.CheckBoxGroupField({
        label: "Months".translate(),
        id: 'monthsGroup',
        controlPositioning: 'vertical',
        maxDirectionOptions: 3,
        required: true,
        options : [
            {  
                label: 'January'.translate(),
                value: 1,
                name: 'january',
                selected :true
            },
            {  
                label: 'February'.translate(),
                value: 2,
                selected :true
            },
            {  
                label: 'March'.translate(),
                value: 3,
                selected :true
            },
            {  
                label: 'April'.translate(),
                value: 4,
                selected :true
            },
            {  
                label: 'May'.translate(),
                value: 5,
                selected :true
            },
            {  
                label: 'June'.translate(),
                value: 6,
                selected :true
            },
            {  
                label: 'July'.translate(),
                value: 7,
                selected :true
            },
            {  
                label: 'August'.translate(),
                value: 8,
                selected :true
            },
            {  
                label: 'September'.translate(),
                value: 9,
                selected :true
            },
            {  
                label: 'October'.translate(),
                value: 10,
                selected :true
            },
            {  
                label: 'November'.translate(),
                value: 11,
                selected :true
            },
            {  
                label: 'December'.translate(),
                value: 12,
                selected :true
            }
        ],
        onChange: function(newVal, oldVal) {
            
        }
    });
    
    /*var dateTimeVariablePicker = new CriteriaField({
        id: "dateTimeVariablePicker",
        name: "dateTimeVariablePicker",
        pmType: "date",
        datetime : false,
        dateFormat: 'yy-mm-dd',
        maxDate: "+1y -1m -4d",
        firstDay: 1,
        valueType: "string",
        label: "Date time".translate(),
        maxLength: 200,
        value: "",
        controlsWidth: 200
    });*/
    
    var dateTimeVariablePicker = new PMUI.field.DateTimeField({
        id: 'dateTimeVariablePicker',
        label:'Date time'.translate(),
        datetime : true,
        dateFormat: 'yy-mm-dd HH:ii:ss',
        firstDay: 1,
        controlsWidth: 150,
        required: false,
        readOnly: true
    });
    
    var formTimerEvent = new PMUI.form.Form({
        id: "formTimerEvent",
        border: true,
        visibleHeader: false,
        width: '900px',
        height: "300px",
        name: "formTimerEvent",
        title: "".translate(),
        items: [
            {
                id: "panelDetailsCustom",
                pmType: "panel",
                layout: 'vbox',
                fieldset: false,
                height: '380px',
                legend: "DETAILS".translate(),
                items: [
                    {
                        id: "evnUid",
                        pmType: "text",
                        value: evnUid,
                        name: "evnUid",
                        readOnly: true,
                        visible: false,
                        valueType: 'string'
                    },
                    {
                        id: "activityType",
                        pmType: "text",
                        value: activityType,
                        name: "activityType",
                        readOnly: true,
                        visible: false,
                        valueType: 'string'
                    },
                    radioGroup,
                    {
                        pmType: "panel",
                        id: "datesPanel",
                        layout: 'hbox',
                        items: [
                            startDate,
                            {
                                pmType: "checkbox",
                                id: "endDateCheckbox",
                                label: "End date".translate(),
                                controlPositioning: 'vertical',
                                maxDirectionOptions: 2,
                                value: '',
                                options : [
                                    {  
                                       label: "End date:".translate(),
                                       disabled: false,
                                       value: '1',
                                       selected :false
                                    }
                                ],
                                onChange: function(newVal, oldVal) {
                                    if(newVal[2] == "1") {
                                        $('#endDate').find('input:eq(0)').removeProp("disabled");
                                    } else {
                                        $('#endDate').find('input:eq(0)').val('').attr("disabled","disabled");  
                                        formTimerEvent.getField('endDate').setValue('');
                                    }
                                }
                            },
                            endDate,
                            oneDateTime,
                            dateTimeVariablePicker
                        ]
                    },
                    {
                        pmType: "panel",
                        id: "dayHourMonthPanel",
                        layout: 'hbox',
                        items: [
                            {
                                id: "dayType",
                                label: "Day".translate(),
                                pmType: "text",
                                value: "",
                                name: "dayType",
                                visible: true,
                                valueType: 'integer',
                                controlsWidth: 50,
                                maxLength: 2
                            },
                            {
                                id: "hourType",
                                label: "Hour".translate(),
                                pmType: "text",
                                value: "",
                                name: "hourType",
                                visible: true,
                                valueType: 'integer',
                                controlsWidth: 50,
                                maxLength: 2
                            },
                            {
                                id: "minuteType",
                                label: "Minute".translate(),
                                pmType: "text",
                                value: "",
                                name: "minuteType",
                                visible: true,
                                valueType: 'integer',
                                controlsWidth: 50,
                                maxLength: 2
                            }
                        ]
                    },
                    daysGroup,
                    monthsGroup,
                    {
                        id: "tmrevn_uid",
                        pmType: "text",
                        value: tmrevn_uid,
                        name: "tmrevn_uid",
                        visible: false,
                        valueType: 'string'
                    }
                ]
            }
        ]
    });
    
    formTimerEvent.initialData = function () {
        var formElements = this.getItems()[0];
        var radioGroupValues = {'radioGroup':formElements.items.get(2).getValue()};
        oldValues.push(radioGroupValues);
        
        var datesPanelElements = formElements.items.get(3).getItems();
        for(var i=0;i<datesPanelElements.length; i++) {
            //datesPanelElements[i].getValue()
        }
    };
    
    var getFormData = function($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};
    
        $.map(unindexed_array, function(n, i){
            indexed_array[n['name']] = n['value'];
        });
        return indexed_array;
    }
    
    var getTimerEventData = function () {
        var restClient = new PMRestClient({
            endpoint: 'timer-event/event/'+formTimerEvent.getField("evnUid").getValue(),
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                if(typeof response === "object" && JSON.stringify(response).length > 2) {
                    var opt = response.tmrevn_option.toUpperCase();
                    switch(opt) {
                        case "HOURLY":
                            $("#radioGroup").find("input:eq(0)").trigger("click");
                            formTimerEvent.getField("tmrevn_uid").setValue(response.tmrevn_uid);
                            formTimerEvent.getField("startDate").setValue(response.tmrevn_start_date);
                            if(response.tmrevn_end_date != "") {
                                formTimerEvent.getField("endDateCheckbox").setValue('["1"]');
                                formTimerEvent.getField("endDate").setValue(response.tmrevn_end_date);
                            }
                            formTimerEvent.getField("minuteType").setValue(response.tmrevn_minute);
                        break;
                        case "DAILY":
                            $("#radioGroup").find("input:eq(1)").trigger("click");                        
                            formTimerEvent.getField("tmrevn_uid").setValue(response.tmrevn_uid);
                            formTimerEvent.getField("startDate").setValue(response.tmrevn_start_date);
                            if(response.tmrevn_end_date != "") {
                                formTimerEvent.getField("endDateCheckbox").setValue('["1"]');
                                formTimerEvent.getField("endDate").setValue(response.tmrevn_end_date);
                            }
                            formTimerEvent.getField("hourType").setValue(response.tmrevn_hour);
                            formTimerEvent.getField("minuteType").setValue(response.tmrevn_minute);
                            formTimerEvent.getField("daysGroup").setValue("");
                            formTimerEvent.getField("daysGroup").setValue(JSON.stringify( response.tmrevn_configuration_data.map(function(n) {return n.toString();}) ));
                        break;
                        case "MONTHLY":
                            $("#radioGroup").find("input:eq(2)").trigger("click");
                            formTimerEvent.getField("tmrevn_uid").setValue(response.tmrevn_uid);
                            formTimerEvent.getField("startDate").setValue(response.tmrevn_start_date);
                            if(response.tmrevn_end_date != "") {
                                formTimerEvent.getField("endDateCheckbox").setValue('["1"]');
                                formTimerEvent.getField("endDate").setValue(response.tmrevn_end_date);
                            }
                            formTimerEvent.getField("dayType").setValue(response.tmrevn_day);
                            formTimerEvent.getField("hourType").setValue(response.tmrevn_hour);
                            formTimerEvent.getField("minuteType").setValue(response.tmrevn_minute);
                            formTimerEvent.getField("monthsGroup").setValue("");
                            formTimerEvent.getField("monthsGroup").setValue(JSON.stringify( response.tmrevn_configuration_data.map(function(n) {return n.toString();}) ));
                        break;
                        case "ONE-DATE-TIME":
                            $("#radioGroup").find("input:eq(3)").trigger("click");
                            formTimerEvent.getField("tmrevn_uid").setValue(response.tmrevn_uid);
                            var d = response.tmrevn_next_run_date.replace(/-/g, "/");
                            for (var i in ENABLED_FEATURES) {
                                if (ENABLED_FEATURES[i] == 'oq3S29xemxEZXJpZEIzN01qenJUaStSekY4cTdJVm5vbWtVM0d4S2lJSS9qUT0=') {
                                    d = response.tmrevn_next_run_date;
                                }
                            }
                            d = new Date(d);
                            formTimerEvent.getField("oneDateTime").setValue(d);
                        break;
                        case "EVERY":
                            $("#radioGroup").find("input:eq(4)").trigger("click");
                            formTimerEvent.getField("tmrevn_uid").setValue(response.tmrevn_uid);
                            formTimerEvent.getField("hourType").setValue(response.tmrevn_hour);
                            formTimerEvent.getField("minuteType").setValue(response.tmrevn_minute);
                        break;
                        case "WAIT-FOR":
                            $("#radioGroup").find("input:eq(5)").trigger("click");
                            formTimerEvent.getField("tmrevn_uid").setValue(response.tmrevn_uid);
                            formTimerEvent.getField("dayType").setValue(response.tmrevn_day);
                            formTimerEvent.getField("hourType").setValue(response.tmrevn_hour);
                            formTimerEvent.getField("minuteType").setValue(response.tmrevn_minute);
                        break;
                        case "WAIT-UNTIL-SPECIFIED-DATE-TIME":
                            $("#radioGroup").find("input:eq(6)").trigger("click");
                            formTimerEvent.getField("tmrevn_uid").setValue(response.tmrevn_uid);
                            var d = response.tmrevn_configuration_data.replace(/-/g, "/");
                            d = new Date(d);
                            formTimerEvent.getField("dateTimeVariablePicker").setValue(d);
                        break;
                    }
                } else {
                    if(eventType == "START") {
                        $("#radioGroup").find("input:eq(1)").trigger("click");
                    } else {
                        $("#radioGroup").find("input:eq(5)").trigger("click");
                    }
                } 
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
                PMDesigner.msgFlash('There are problems updating the Timer Event, please try again.'.translate(), document.body, 'error',3000, 5);
            }
        });
        restClient.executeRestClient();
    };
    
    /*end form*/

    var validateItems = function(itemId){

        if(itemId == 'dayType'){
            var regexTest = new RegExp(/^([1-9]|[1-2][0-9]|3[0-1])$/);
            var message = "Error value: Day: 1 - 31".translate();
        }
        if(itemId == 'hourType'){
            var regexTest = new RegExp(/^([0-9]|1[0-9]|2[0-4])$/);
            var message = "Error value: Hour: 0 - 23".translate();
        }
        if(itemId == 'minuteType'){
            var regexTest = new RegExp(/^([0-9]|[1-2][0-9]|[3-4][0-9]|5[0-9]|6[0])$/);
            var message = "Error value: Minute: 0 - 59".translate();
        }

        var valueItem = $('#'+itemId).find('span input:eq(0)').val();

        if(!regexTest.test(valueItem)){
            PMDesigner.msgFlash(message, timerEventPropertiesWindow, 'error', 3000, 5); 
            $('#'+itemId).find('span input:eq(0)').val('');
            return false;
        }
    };
    
    var domSettings = function() {
        var requiredMessage = $(document.getElementById("requiredMessage"));
        timerEventPropertiesWindow.body.appendChild(requiredMessage[0]);
        requiredMessage[0].style['marginTop']='70px';
        
        timerEventPropertiesWindow.footer.html.style.textAlign = 'right';

        $('#hourType, #dayType, #minuteType').find('span input:eq(0)').bind('change',function(){
            validateItems($(this).closest('div').attr('id'));
        });

        $("#dayType").find("input").attr({"type":"number","maxlength":"2", "min":"1", "max":"31"});
        $("#hourType").find("input").attr({"type":"number","maxlength":"2", "min":"0", "max":"23"});
        $("#minuteType").find("input").attr({"type":"number","maxlength":"2", "min":"0", "max":"59"});
        
        $("#radioGroup").css({"text-align":"center","margin-bottom":"20px"}).find("label:eq(0)").remove();
        $("#endDateCheckbox").css({"width":"170px","top":"6px","left":"28px"}).find("label:eq(0)").remove();
        $("#endDateCheckbox").find("table:eq(0)").css("border","0px");
        $("#startDate").css("width","");
        $("#endDate").css("width","104px").find("label:eq(0)").remove();
        $("#oneDateTime").css("width","");
        $("#datesPanel").css("text-align","center").find("label").css({"width":"","float":"","text-align":"right"});
        $("#dayHourMonthPanel").css("text-align","center").find("label").css({"float":"", "width": "34.5%"});
        
        $("#daysGroup").css("text-align","center").find("label:eq(0)").remove();
        $("#monthsGroup").css("text-align","center").find("label:eq(0)").remove();
        $("#daysGroup").find("input").each(function(){
            $(this).attr("name",$(this).val());
        });
        
        $("#dateTimeVariablePicker").css("width","");
        
        
        if(eventType == "START") {
            $(formTimerEvent.getField("radioGroup").controls[0].html).parent().show();
            $(formTimerEvent.getField("radioGroup").controls[1].html).parent().show();
            $(formTimerEvent.getField("radioGroup").controls[2].html).parent().show();
            $(formTimerEvent.getField("radioGroup").controls[3].html).parent().show();
            $(formTimerEvent.getField("radioGroup").controls[4].html).parent().show();
            $(formTimerEvent.getField("radioGroup").controls[5].html).parent().hide();
            $(formTimerEvent.getField("radioGroup").controls[6].html).parent().hide();
            $("#radioGroup").find("input:eq(1)").trigger("click");
        } else {
            $(formTimerEvent.getField("radioGroup").controls[0].html).parent().hide();
            $(formTimerEvent.getField("radioGroup").controls[1].html).parent().hide();
            $(formTimerEvent.getField("radioGroup").controls[2].html).parent().hide();
            $(formTimerEvent.getField("radioGroup").controls[3].html).parent().hide();
            $(formTimerEvent.getField("radioGroup").controls[4].html).parent().hide();
            $(formTimerEvent.getField("radioGroup").controls[5].html).parent().show();
            $(formTimerEvent.getField("radioGroup").controls[6].html).parent().show();
            $("#radioGroup").find("input:eq(5)").trigger("click");
        }
       
    };
    
    timerEventPropertiesWindow.addItem(formTimerEvent);
    timerEventPropertiesWindow.open();
    timerEventPropertiesWindow.showFooter();
    domSettings();
    getTimerEventData(); 
    oldValues = getFormData($("#formTimerEvent"));
    
    
};
}());


(function () {
PMDesigner.emailEventProperties = function (activity) {
    var that = this;
    var activityId = activity.getID();
    var activityType = activity.getEventMarker();
    var uidProj = PMDesigner.project.id;
    var initTinyMCE = null;
    var oldValues;
    var emailEventId = "";
    var prf_uid = "";
    var ddSize = 21; /*options to display in drop down*/
    
    /*window*/
    var buttonCancel = new PMUI.ui.Button({
        id: 'cancelEmailEventsButton',
        text: "Cancel".translate(),
        buttonType: 'error',
        handler: function (event) {
            PMDesigner.hideAllTinyEditorControls();
			clickedClose = false;
			emailEventPropertiesWindow.isDirtyFormScript();
        }
    });
    
    var buttonSave = new PMUI.ui.Button({
        id: 'saveEmailEventsButton',
        text: "Save".translate(),
        handler: function (event) {
            PMDesigner.hideAllTinyEditorControls();
            var dataForm = formEmailEvent.getData();
            if(formEmailEvent.isValid()) {
                if(dataForm.emailEventId == "") { /*insert*/
                    (new PMRestClient({
                        endpoint: 'file-manager',
                        typeRequest: 'post',
                        messageError: ''.translate(),
                        data: {
                            prf_filename: "emailEvent_"+new Date().getTime()+".html",
                            prf_path: "templates",
                            prf_content: dataForm.filecontent
                        },
                        functionSuccess: function (xhr, response) {
                            prf_uid = response.prf_uid;
        				    if(prf_uid != "" && typeof prf_uid != "undefined") {
        				        var restClient = new PMRestClient({
                                    endpoint: 'email-event',
                                    typeRequest: 'post',
                                    data: {
                                        evn_uid: activityId,
                                        email_event_from: $(formEmailEvent.getField('emailAcounts').html).find("select option:selected").text(),
                                        email_event_to: dataForm.ToEmail,
                                        email_event_subject:dataForm.subjectEmail,
                                        prf_uid: prf_uid
                                    },
                                    functionSuccess: function () {
                                        emailEventPropertiesWindow.close();
                                        PMDesigner.msgFlash('Email Event saved correctly'.translate(), document.body, 'success',3000, 5);
                                    },
                                    functionFailure: function (xhr, response)
                                    {
                                        PMDesigner.msgWinError(response.error.message);
                                        PMDesigner.msgFlash('There are problems updating the Email Event, please try again.'.translate(), document.body, 'error',3000, 5);
                                    }
                                });
                                restClient.executeRestClient();
        				    }
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        }
                    })).executeRestClient();
                    
                    	
                } else { /*update*/
                    (new PMRestClient({
                        endpoint: 'file-manager/' + dataForm.prf_uid,
                        typeRequest: 'update',
                        messageError: ''.translate(),
                        data: {
                            prf_content: tinyMCE.activeEditor.getContent()
                        },
                        functionSuccess: function (xhr, response) {
                            prf_uid = response.prf_uid;
        				    if(prf_uid != "" && typeof prf_uid != "undefined") {
                                var restClient = new PMRestClient({
                                    endpoint: 'email-event/'+dataForm.emailEventId,
                                    typeRequest: 'update',
                                    data: {
                                        evn_uid: activityId,
                                        email_event_from: $(formEmailEvent.getField('emailAcounts').html).find("select option:selected").text(),
                                        email_event_to: dataForm.ToEmail,
                                        email_event_subject:dataForm.subjectEmail,
                                        prf_uid: prf_uid
                                    },
                                    functionSuccess: function () {
                                        emailEventPropertiesWindow.close();
                                        PMDesigner.msgFlash('Email Event Edited correctly'.translate(), document.body, 'success',3000, 5);
                                    },
                                    functionFailure: function (xhr, response)
                                    {
                                        PMDesigner.msgWinError(response.error.message);
                                        PMDesigner.msgFlash('There are problems Edited the Email Event, please try again.'.translate(), document.body, 'error',3000, 5);
                                    }
                                });
                                restClient.executeRestClient();	
                            }
                        },
                        functionFailure: function (xhr, response)
                        {
                            PMDesigner.msgWinError(response.error.message);
                        }
                    })).executeRestClient();
                }
            }
        },
        buttonType: 'success'
    });
    
    var emailEventPropertiesWindow = new PMUI.ui.Window({
        id: "emailEventPropertiesWindow",
        title: "Email Event Properties".translate(),
        width: DEFAULT_WINDOW_WIDTH,
        height: DEFAULT_WINDOW_HEIGHT,
        footerItems: [
            buttonCancel,
            buttonSave
        ],
        buttonPanelPosition : "bottom",
        footerAling : "right",
		onBeforeClose : function(){
            PMDesigner.hideAllTinyEditorControls();
		    clickedClose = true;
	        emailEventPropertiesWindow.isDirtyFormScript();
		}
    });
    
    this.emailEventPropertiesWindow = emailEventPropertiesWindow;
    
    emailEventPropertiesWindow.isDirtyFormScript = function (){
    	var that = this;
    	var formData = formEmailEvent.getData();
    	formData.filecontent = $(tinyMCE.activeEditor.getContent()).text().trim().length ? tinyMCE.activeEditor.getContent() : "";
    	var newValues = formData;
    	if (JSON.stringify(oldValues) !== JSON.stringify(newValues) ){
    		var message_window = new PMUI.ui.MessageWindow({
    			id: "cancelMessageTriggers",
    			windowMessageType: 'warning',
    			width: 490,
    			title: "Email Event".translate(),
    			message: 'Are you sure you want to discard your changes?'.translate(),
    			footerItems: [
    				{
    					text: "No".translate(),
    					handler: function() {
    						message_window.close();
    					},
    					buttonType : "error"
    				},
    				{
    					text: "Yes".translate(),
    					handler: function() {
    						message_window.close();
    						that.close();
    					},
    					buttonType : "success"
    				}
    			]
    		});
    		message_window.open();
    		message_window.showFooter();
    	} else {
    		that.close();
    	}
    };
    /*end window*/
    
    /*form*/
    
    var emailAcounts = new PMUI.field.DropDownListField({
        id: "emailAcounts",
        name: "emailAcounts",
        label: "From".translate(),
        options: null,
        controlsWidth: 400,
        required: true,
        labelWidth: "15%",
        onChange: function (newValue, prevValue)
        {
            var uidTri = newValue;
            for (i = 0; i < triggerSelectedData.length; i++) {
                if (triggerSelectedData[i].tri_uid == uidTri) {
                    formScriptTask.getItems()[1].controls[0].cm.setValue(triggerSelectedData[i].tri_webbot);
                    oldValue = triggerSelectedData[i].tri_webbot;
                }
            }
        }
    });
    
    var emailContent = new PMUI.field.TextAreaField({
        id: 'filecontent',
        name: 'filecontent',
        label: 'Content'.translate(),
        required: true,
        value: '',
        rows: 210,
        labelWidth: "15%",
        controlsWidth: 720,
        onChange: function (currentValue, previousValue) {
        },
        style: {cssClasses: ['mafe-textarea-resize']}
    });
        
    var getEmailAccounts = function (emailAcounts) {
        var restClient = new PMRestClient({
            endpoint: 'email-event/accounts/emailServer',
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                triggerSelectedData = response;
                var arrayOptions = [];
                arrayOptions[0] = {
                    label: "- Select an email account -".translate(),
                    value: "",
                    disabled: true,
                    selected: true
                };
                for (var i = 0; i <= triggerSelectedData.length - 1; i++)  {
                    arrayOptions.push(
                        {
                            value: triggerSelectedData[i].uid,
                            label: triggerSelectedData[i].email
                        }
                    );
                }
                emailAcounts.setOptions(arrayOptions);
                emailAcounts.setValue(arrayOptions[0].value);
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            },
            messageError: "There are problems getting the Triggers list, please try again.".translate()
        });
        restClient.executeRestClient();
    };
    
    var formEmailEvent = new PMUI.form.Form({
        id: "formEmailEvent",
        border: true,
        visibleHeader: false,
        width: '900px',
        height: "300px",
        name: "formEmailEvent",
        title: "".translate(),
        items: [
            {
                id: "panelDetailsCustom",
                pmType: "panel",
                layout: 'vbox',
                fieldset: false,
                height: '380px',
                legend: "DETAILS".translate(),
                items: [
                    {
                        id: "activityId",
                        pmType: "text",
                        value: activityId,
                        name: "activityId",
                        visible: false,
                        valueType: 'string'
                    },
                    {
                        id: "activityType",
                        pmType: "text",
                        value: activityType,
                        name: "activityType",
                        visible: false,
                        valueType: 'string'
                    },
                    emailAcounts,
                    {
                        id: "ToEmail",
                        pmType: "text",
                        helper: "The email can be a string or a variable (@@myEmail), comma separated list of emails".translate(),
                        label: "To".translate(),
                        controlsWidth: 400,
                        value: "",
                        name: "ToEmail",
                        required: true,
                        visible: true,
                        labelWidth: "15%",
                        valueType: 'string'
                    }, 
                    new CriteriaField({
                        id: 'subjectEmail',
                        pmType: 'text',
                        label: "Subject".translate(),
                        controlsWidth: 400,
                        value: "",
                        name: "subjectEmail",
                        required: false,
                        visible: true,
                        labelWidth: "15%",
                        valueType: 'string'
                    }),
                    emailContent,
                    {
                        id: "emailEventId",
                        pmType: "text",
                        value: emailEventId,
                        name: "emailEventId",
                        visible: false,
                        valueType: 'string'
                    },
                    {
                        id: "prf_uid",
                        pmType: "text",
                        value: prf_uid,
                        name: "prf_uid",
                        visible: false,
                        valueType: 'string'
                    }
                ]
            }
        ]
    });
    
    var emailWindowTinyMCE = function() {
        initTinyMCE = function () {
            tinyMCE.activeEditor.domainURL = "/sys" + WORKSPACE + "/" + LANG + "/" + SKIN + "/";
            tinyMCE.activeEditor.processID = PMDesigner.project.id;
        };
        formEmailEvent.getField('filecontent').getControls()[0].getHTML().className = 'tmceEditor';
        applyStyleWindowForm(emailEventPropertiesWindow);
        tinyMCE.init({
            editor_selector: 'tmceEditor',
            mode: 'specific_textareas',
            directionality: 'ltr',
            verify_html: false,
            skin: 'o2k7',
            theme: 'advanced',
            skin_variant: 'silver',
            plugins: 'advhr,advimage,advlink,advlist,autolink,autoresize,contextmenu,directionality,emotions,example,example_dependency,fullpage,fullscreen,iespell,inlinepopups,insertdatetime,layer,legacyoutput,lists,media,nonbreaking,noneditable,pagebreak,paste,preview,print,save,searchreplace,style,tabfocus,table,template,visualblocks,visualchars,wordcount,xhtmlxtras,pmSimpleUploader,pmVariablePicker,style',
            theme_advanced_buttons1: 'pmSimpleUploader,|,pmVariablePicker,|,bold,italic,underline,|,justifyleft,justifycenter,justifyright,justifyfull,|,fontselect,fontsizeselect,|,cut,copy,paste',
            theme_advanced_buttons2: 'bullist,numlist,|,outdent,indent,blockquote,|,tablecontrols,|,undo,redo,|,link,unlink,image,|,forecolor,backcolor,styleprops',
            theme_advanced_buttons3: 'hr,removeformat,visualaid,|,sub,sup,|,ltr,rtl,|,code',
            popup_css: "/js/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/dialogTinyBpmn.css",
            oninit: initTinyMCE,
            onchange_callback: function (inst) {
                formEmailEvent.getField('filecontent').setValue(tinyMCE.activeEditor.getContent({format: 'raw'}));
            },
            handle_event_callback: function (e) {
            },
            setup: function (ed) {
                ed.onSetContent.add(function (ed, l) {
                    formEmailEvent.getField('filecontent').setValue(tinyMCE.activeEditor.getContent({format: 'raw'}));
                });
            }
        });
    };
        
    var getFormData = function($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};
    
        $.map(unindexed_array, function(n, i){
            indexed_array[n['name']] = n['value'];
        });
        return indexed_array;
    };
    
    var getEmailEventData = function() {
        var restClient = new PMRestClient({
            endpoint: 'email-event/'+activityId,
            typeRequest: 'get',
            functionSuccess: function (xhr, response) {
                if(typeof response == "object")
                {
                    emailEventId = response.email_event_uid;
    				if(emailEventId != "" && typeof emailEventId != "undefined") {
                        formEmailEvent.getField('emailEventId').setValue(response.email_event_uid);

                        var valFrom = $(formEmailEvent.getField('emailAcounts').html).find("select option").filter(function() {
                            return this.text == response.email_event_from; 
                        }).val();
                        
                        if(valFrom != "" && typeof valFrom != "undefined") {
                            formEmailEvent.getField('emailAcounts').setValue(valFrom);
                        }
                        
                        formEmailEvent.getField('subjectEmail').setValue(response.email_event_subject);   
                        formEmailEvent.getField('ToEmail').setValue(response.email_event_to);
                        
                        formEmailEvent.getField('prf_uid').setValue(response.prf_uid);
                                               
                        (new PMRestClient({
                            endpoint: 'file-manager',
                            typeRequest: 'get',
                            messageError: ''.translate(),
                            data: {
                                path: "templates"
                            },
                            functionSuccess: function (xhr, response) {
                                for (var i = 0; i < response.length; i++) {
                                    if(response[i].prf_uid == formEmailEvent.getField('prf_uid').getValue()) {
                                        formEmailEvent.getField('filecontent').setValue(response[i].prf_content);
                                        if(!$(tinyMCE.activeEditor.getContent()).text().trim().length) {
                                            tinyMCE.activeEditor.setContent(response[i].prf_content);
                                        }
                                        break;
                                    }
                                }
                            },
                            functionFailure: function (xhr, response)
                            {
                                PMDesigner.msgWinError(response.error.message);
                            }
                        })).executeRestClient();
                    }
                }
            },
            functionFailure: function (xhr, response)
            {
                PMDesigner.msgWinError(response.error.message);
            }
        });
        restClient.executeRestClient();
    };
    
    getEmailAccounts(emailAcounts);
    
    /*end form*/
    
    this.deleteEmailEventByEventUid = function() {
        (new PMRestClient({
            endpoint: 'email-event/by-event/'+activityId,
            typeRequest: 'remove',
            messageError: ''.translate(),
            functionSuccess: function (xhr, response) {
            },
            functionFailure: function (xhr, response)
            {
            }
        })).executeRestClient();
        return this;
    };
        
    var domSettings = function() {
        emailEventPropertiesWindow.footer.html.style.textAlign = 'right';
        $("#emailAcounts").find("select:eq(0)").css("height","auto").attr({
                                "onmousedown":"if(this.options.length>"+ddSize+"){this.size="+ddSize+";}",
                                "onchange":"this.size=0;",
                                "onblur":"this.size=0;"
                           });
    };
           
    emailEventPropertiesWindow.addItem(formEmailEvent);
    emailEventPropertiesWindow.open();
    emailEventPropertiesWindow.showFooter();
    emailWindowTinyMCE();
    domSettings();
    getEmailEventData();
    oldValues = formEmailEvent.getData();
  
};
}());


SaveAsForm = function (settings) {
    Mafe.Form.call(this, settings);
    SaveAsForm.prototype.init.call(this, settings);
};
SaveAsForm.prototype = new Mafe.Form();
SaveAsForm.prototype.init = function () {
    var that = this;
    that.onSave = new Function();
    that.onCancel = new Function();
    that.setID("SaveAsForm");
    that.setTitle("Save as".translate());
    that.setItems([{
            id: "prj_name",
            name: "pro_title",
            pmType: "text",
            label: "Title".translate(),
            placeholder: "Title".translate(),
            required: true
        }, {
            id: "prj_description",
            pmType: "textarea",
            name: "pro_description",
            label: "Description".translate(),
            placeholder: "Description".translate(),
            rows: 200
        }, {
            id: "pro_category",
            name: "pro_category",
            pmType: "dropdown",
            label: "Category".translate(),
            options: [
                {value: "", label: "No Category".translate()}
            ]
        }
    ]);
    that.setButtons([{
            id: "idCancel",
            text: "Cancel".translate(),
            buttonType: "error",
            handler: function () {
                that.onCancel();
            }
        }, {
            id: "idSave",
            text: "Save".translate(),
            buttonType: "success",
            handler: function () {
                that.onSave();
            }
        }
    ]);
    that.loadCategory();
};
SaveAsForm.prototype.loadCategory = function () {
    var that = this;
    var a = new PMRestClient({
        typeRequest: "post",
        multipart: true,
        data: {
            calls: [{
                    url: "project/categories",
                    method: "GET"
                }, {
                    url: "project/" + PMDesigner.project.projectId + "/process",
                    method: "GET"
                }
            ]
        },
        functionSuccess: function (xhr, response) {
            var i, dt, category = that.getField("pro_category");
            dt = response[0].response;
            for (i = 0; i < dt.length; i++) {
                category.addOption({
                    value: dt[i].cat_uid,
                    label: dt[i].cat_name
                });
            }
            //load data
            dt = response[1].response;
            that.getField("pro_title").setValue("Copy of".translate() + " [" + dt.pro_title + "]");
            that.getField("pro_description").setValue(dt.pro_description);
            that.getField("pro_category").setValue(dt.pro_category);
        },
        functionFailure: function (xhr, response) {
        }
    });
    a.setBaseEndPoint("");
    a.executeRestClient();
};

SaveAs = function (settings) {
    Mafe.Window.call(this, settings);
    SaveAs.prototype.init.call(this, settings);
};
SaveAs.prototype = new Mafe.Window();
SaveAs.prototype.init = function () {
    var that = this;
    that.saveAsForm = new SaveAsForm();
    that.saveAsForm.onYesConfirmCancellation = function () {
        that.close();
    };
    that.saveAsForm.onCancel = function () {
        that.saveAsForm.loseChanges({title: that.title});
    };
    that.saveAsForm.onSave = function () {
        that.saveAsForm.getField("pro_title").setReadOnly(true);
        that.saveAsForm.getField("pro_description").setReadOnly(true);
        PMUI.getPMUIObject($(that.saveAsForm.html).find("#idSave")[0]).setDisabled(true);
        var a = new PMRestClient({
            typeRequest: "post",
            multipart: true,
            data: {
                calls: [{
                        url: "project/save-as",
                        method: "POST",
                        data: {
                            prj_uid: PMDesigner.project.projectId,
                            prj_name: that.saveAsForm.getField("pro_title").getValue(),
                            prj_description: that.saveAsForm.getField("pro_description").getValue(),
                            prj_category: that.saveAsForm.getField("pro_category").getValue()
                        }
                    }
                ]
            },
            functionSuccess: function (xhr, response) {
                if (response[0].response.prj_uid) {
                    that.close();
                    window.location.href = "designer?prj_uid=" + response[0].response.prj_uid;
                } else {
                    that.saveAsForm.getField("pro_title").setReadOnly(false);
                    that.saveAsForm.getField("pro_description").setReadOnly(false);
                    PMUI.getPMUIObject($(that.saveAsForm.html).find("#idSave")[0]).setDisabled(false);
                    var field = that.saveAsForm.getField("pro_title");
                    $(field.html).find(".pmui-textlabel").text(response[0].response);
                    field.showMessage();
                }
            },
            functionFailure: function (xhr, response) {
            }
        });
        a.setBaseEndPoint("");
        a.executeRestClient();
    };

    that.setTitle("Save as".translate());
    that.addItem(that.saveAsForm);
};
(function () {
    PMDesigner.granularProcessExport = function () {
        var totalObjects = 0,
            objectValues;
        var buttonCancel = new PMUI.ui.Button({
            id: 'cancelButton',
            text: "Cancel".translate(),
            buttonType: 'error',
            handler: function (event) {
                granularProcessExportWindow.close();
            }
        });

        var buttonSave = new PMUI.ui.Button({
            id: 'saveButton',
            text: "Export".translate(),
            handler: function (event) {
                var selectedObjects,
                    locationOrigin,
                    ws = enviromentVariables('WORKSPACE'),
                    formData = granularProcessExportForm.getData();
                selectedObjects = JSON.parse(formData.objectsGroup).map(function(n) {return Number(n);});
                if(selectedObjects.length === 0) {
                    PMDesigner.msgFlash('At least one object should be selected in order to execute the action.'.translate(), document.body, 'error',3000, 5);
                    return;
                }
                if (!window.location.origin) {
                    locationOrigin = window.location.protocol + "//" + window.location.hostname +
                    (window.location.port ? ':' + window.location.port : '');
                } else if(typeof HTTP_SERVER_HOSTNAME !== 'undefined') {
                    locationOrigin = HTTP_SERVER_HOSTNAME;
                } else {
                    locationOrigin = window.location.origin;
                }
                location.href = locationOrigin + "/api/1.0/" + ws + "/project/" + PMDesigner.project.id +
                "/export-granular?access_token=" + PMDesigner.project.keys.access_token+'&objects=' +
                encodeURIComponent(JSON.stringify(selectedObjects));
                granularProcessExportWindow.close();
            },
            buttonType: 'success'
        });

        var granularProcessExportWindow = new PMUI.ui.Window({
            id: "granularProcessExportWindow",
            title: "Export Process Objects".translate(),
            width: 350,
            height: DEFAULT_WINDOW_HEIGHT,
            footerItems: [
                buttonCancel,
                buttonSave
            ],
            buttonPanelPosition : "bottom",
            footerAling : "right",
            onBeforeClose : function(){
                granularProcessExportWindow.close();
            }
        });

        var objectsGroup = new PMUI.field.CheckBoxGroupField({
            labelVisible: false,
            id: 'objectsGroup',
            controlPositioning: 'horizontal',
            maxDirectionOptions: 1,
            required: true,
            options : [],
            onChange: function(newVal, oldVal) {
                if(totalObjects > JSON.parse(newVal).length) {
                    granularProcessExportForm.getField('checkAllId').setValue(0);
                }
            }
        });

        var loadObjects = function() {
            var objectsList,
                restClient,
                i;
            restClient = new PMRestClient({
                endpoint: 'export/listObjects',
                typeRequest: 'get',
                functionSuccess: function (xhr, response) {
                    var arrayIds = [],
                        i;
                    objectsList = JSON.parse(response);
                    for(i in objectsList.data) {
                        objectsGroup.addOption({
                            label: objectsList.data[i].OBJECT_NAME,
                            name: objectsList.data[i].OBJECT_NAME,
                            selected: false,
                            value: objectsList.data[i].OBJECT_ID
                        });
                        arrayIds.push(objectsList.data[i].OBJECT_ID.toString());
                    }
                    totalObjects = objectsList.data.length;
                    objectValues = objectsGroup.getValueFromControls();
                    objectValues = JSON.parse(objectValues).length ? objectValues : JSON.stringify(arrayIds);
                },
                functionFailure: function (xhr, response)
                {
                    PMDesigner.msgWinError(response.error.message);
                    PMDesigner.msgFlash('There are problems loading the process objects.'.translate(), document.body, 'error',3000, 5);
                }
            });
            restClient.executeRestClient();
        };
        loadObjects();

        var granularProcessExportForm = new PMUI.form.Form({
            id: "granularProcessExportForm",
            border: true,
            visibleHeader: false,
            width: '340px',
            name: "granularProcessExportForm",
            title: "",
            items: [
                {
                    id: "panelDetailsCustom",
                    pmType: "panel",
                    layout: 'vbox',
                    fieldset: false,
                    height: '380px',
                    legend: "DETAILS".translate(),
                    items: [
                        {
                            pmType: "checkbox",
                            id: "checkAllId",
                            labelVisible: false,
                            controlPositioning: 'vertical',
                            maxDirectionOptions: 2,
                            value: '',
                            options : [
                                {
                                    label: "Check All".translate(),
                                    disabled: false,
                                    value: '1',
                                    selected :false
                                }
                            ],
                            onChange: function(newVal, oldVal) {
                                if(newVal[2] === "1") {
                                    objectsGroup.setValueToControls(objectValues);
                                } else {
                                    objectsGroup.setValueToControls();
                                }
                            }
                        },
                        objectsGroup
                    ]
                }
            ]
        });

        var domSettings = function() {
            $('#objectsGroup').find('label:eq(0)').remove();
        };

        granularProcessExportWindow.addItem(granularProcessExportForm);
        granularProcessExportWindow.open();
        granularProcessExportWindow.showFooter();
        domSettings();
    };
}());


