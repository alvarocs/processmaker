<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-17 at 18:07:43.
 */
class i18n_POTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var i18n_PO
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new i18n_PO;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers i18n_PO::buildInit
     * @todo   Implement testBuildInit().
     */
    public function testBuildInit()
    {      
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po'); 
      $obj->buildInit();
      $vlineas = file(PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po');      
      $this->assertEquals( trim($vlineas[0]), 'msgid ""');      
      $this->assertEquals( trim($vlineas[1]), 'msgstr ""');
      return $obj;
    }

    /**
     * @depends testAddTranslation
     * @covers i18n_PO::readInit
     * @todo   Implement testReadInit().
     */
    public function testReadInit($obj)
    {
      $resp = $obj->readInit();
    }

    /**
     * @depends testBuildInit
     * @covers i18n_PO::addHeader
     * @todo   Implement testAddHeader().
     */
    public function testAddHeader($obj)
    {
      $obj->addHeader('Project-Id-Version','ProcessMaker (Branch 2.0-dev) 2.0.34.rc4-179-g5fa57e9');
      $vlineas = file(PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po');      
      $this->assertEquals( trim($vlineas[2]), '"Project-Id-Version: ProcessMaker (Branch 2.0-dev) 2.0.34.rc4-179-g5fa57e9\n"');
      return $obj;
    }

    /**
     * @depends testAddHeader
     * @covers i18n_PO::addTranslatorComment
     * @todo   Implement testAddTranslatorComment().
     */
    public function testAddTranslatorComment($obj)
    { //$cur_encoding = mb_detect_encoding('COMMENT OF TRANSLATION');
      //utf8_encode
      $obj->addTranslatorComment('COMMENT OF TRANSLATION'); //English
      $obj->addTranslatorComment("Jap'iqmasiqa mana  juñiyniyuq kashan kay raphipiqa."); //Quechua
      $obj->addTranslatorComment('رمز عبور اشتباه است'); //Persian
      $obj->addTranslatorComment('Brugeren har ingen rettigheder på denne side.'); //Danish
      $obj->addTranslatorComment('ليس لدى المستخدم حقوق على هذه الصفحة'); //Arabic
      $obj->addTranslatorComment('用户无此页权限'); //Chinese
      $obj->addTranslatorComment('Неправильный пароль'); //Russian

      $vlineas = file(PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po'); 
      
      $this->assertEquals(trim($vlineas[4])  , '# COMMENT OF TRANSLATION'); //English
      $this->assertEquals(trim($vlineas[5])  , "# Jap'iqmasiqa mana  juñiyniyuq kashan kay raphipiqa."); //Quechua 
      $this->assertEquals(trim($vlineas[6])  , '# رمز عبور اشتباه است'); //Persian
      $this->assertEquals(trim($vlineas[7])  , '# Brugeren har ingen rettigheder på denne side.'); //Danish
      $this->assertEquals(trim($vlineas[8])  , '# ليس لدى المستخدم حقوق على هذه الصفحة'); //Arabic
      $this->assertEquals(trim($vlineas[9])  , '# 用户无此页权限'); //Chinese
      $this->assertEquals(trim($vlineas[10]) , '# Неправильный пароль'); //Russian
      return $obj;
    }

    /**
     * @depends testAddTranslatorComment
     * @covers i18n_PO::addExtractedComment
     * @todo   Implement testAddExtractedComment().
     */
    public function testAddExtractedComment($obj)
    {
      $obj->addExtractedComment('COMMENT EXTRA OF TRANSLATION');
      $vlineas = file(PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po'); 
      $this->assertEquals( trim($vlineas[11]), '#. COMMENT EXTRA OF TRANSLATION');
      return $obj;
    }

    /**
     * @depends testAddExtractedComment
     * @covers i18n_PO::addReference
     * @todo   Implement testAddReference().
     */
    public function testAddReference($obj)
    {
      $obj->addReference('REFERENCE');
      $vlineas = file(PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po'); 
      $this->assertEquals( trim($vlineas[12]), '#: REFERENCE');
      return $obj;
    }

    /**
     * @depends testAddReference
     * @covers i18n_PO::addFlag
     * @todo   Implement testAddFlag().
     */
    public function testAddFlag($obj)
    {
      $obj->addFlag('FLAG');
      $vlineas = file(PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po'); 
      $this->assertEquals( trim($vlineas[13]), '#, FLAG');
      return $obj;
    }

    /**
     * @depends testAddFlag
     * @covers i18n_PO::addPreviousUntranslatedString
     * @todo   Implement testAddPreviousUntranslatedString().
     */
    public function testAddPreviousUntranslatedString($obj)
    {
      $obj->addPreviousUntranslatedString('PREVIOUS UNTRANSLATED STRING');
      $vlineas = file(PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po'); 
      $this->assertEquals( trim($vlineas[14]), '#| PREVIOUS UNTRANSLATED STRING');
      return $obj;        
    }

    /**
     * @depends testAddPreviousUntranslatedString
     * @covers i18n_PO::addTranslation
     * @todo   Implement testAddTranslation().
     */
    public function testAddTranslation($obj)
    {
      $obj->addTranslation('ID_TRANSLATION','MSG_TRANSLATION');
      $vlineas = file(PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po'); 
      $this->assertEquals( trim($vlineas[15]), 'msgid "ID_TRANSLATION"');
      $this->assertEquals( trim($vlineas[16]), 'msgstr "MSG_TRANSLATION"');
      return $obj;   
    }   

    /**
     * @covers i18n_PO::prepare
     * @todo   Implement testPrepare().
     */
    public function testPrepare()
    {
      //case Chinese
      G::loadClass('i18n_po');
      $objC = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.ru-RU.po'); 
      $this->assertEquals(trim($objC->prepare('Content-Transfer-Encoding: 8bit\n \t \r', false)), 'Content-Transfer-Encoding: 8bit');
      $this->assertEquals(trim($objC->prepare('Content-Transfer-Encoding: 8bit\n \t \r', true)), 'Content-Transfer-Encoding: 8bit\n \t \r');

      //case Russian
      G::loadClass('i18n_po');
      $objR = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.ru-RU.po'); 
      $this->assertEquals(trim($objR->prepare('Content-Transfer-Encoding: 8bit\n \t \r', false)), 'Content-Transfer-Encoding: 8bit');
      $this->assertEquals(trim($objR->prepare('Content-Transfer-Encoding: 8bit\n \t \r', true)), 'Content-Transfer-Encoding: 8bit\n \t \r');
      
      //case English
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.en.po'); 
      $this->assertEquals(trim($obj->prepare('Content-Transfer-Encoding: 8bit\n \t \r', false)), 'Content-Transfer-Encoding: 8bit');
      $this->assertEquals(trim($obj->prepare('Content-Transfer-Encoding: 8bit\n \t \r', true)), 'Content-Transfer-Encoding: 8bit\n \t \r');
      return $obj; 
    }     

    /**
     * @covers i18n_PO::getHeaders
     * @todo   Implement testGetHeaders().
     */
    public function testGetHeaders()
    {
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmakerHEAD.en.po'); 
      $obj->readInit();
      $this->assertNotEmpty($obj->getHeaders());
      foreach ($obj->getHeaders() as $key => $value) {
        if ($key == 'X-Poedit-Language')
          $this->assertEquals('X-Poedit-Language',trim($key));
      }
    }

    /**
     * @covers i18n_PO::getTranslation
     * @todo   Implement testGetT ranslation().
     */
    public function testGetTranslation()
    {
    //** case Quechua **
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.qu-BO.po'); 
      $obj->readInit();
      $this->assertNotEmpty($obj->getTranslation());

    //** case Persian **
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.fa-IR.po'); 
      $obj->readInit();
      $this->assertNotEmpty($obj->getTranslation());

    //** case Danish **
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.da-DK.po'); 
      $obj->readInit();
      $this->assertNotEmpty($obj->getTranslation());

    //** case Arabic **
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.ar-EG.po'); 
      $obj->readInit();
      $this->assertNotEmpty($obj->getTranslation());

    //** case Chinese ** 
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.zh-CN.po'); 
      $obj->readInit();
      $this->assertNotEmpty($obj->getTranslation());

    //** case Russian **
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmaker.ru-RU.po'); 
      $obj->readInit();
      $this->assertNotEmpty($obj->getTranslation());
      
    //** case English **
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmakerTRANSLATION.en.po'); 
      $obj->readInit();
      $this->assertNotEmpty($obj->getTranslation());   

      // case1 $this->_fileLine is null
      G::loadClass('i18n_po');
      $obj = new i18n_PO (PATH_TRUNK.'/tests/shared/filesPO/processmakerCase1.en.po'); 
      $obj->readInit();      
      $this->assertEmpty($obj->getTranslation());
    }

    /**
     * @covers i18n_PO::__destruct
     * @todo   Implement test__destruct().
     */
    public function test__destruct()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
